// Code generated from ChainParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // ChainParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ChainParser struct {
	ChainParserBase
}

var ChainParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func chainparserParserInit() {
	staticData := &ChainParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'break'", "'case'", "'chan'", "'const'", "'continue'", "'default'",
		"'defer'", "'else'", "'fallthrough'", "'for'", "'func'", "'go'", "'goto'",
		"'if'", "'import'", "'interface'", "'map'", "'nil'", "'package'", "'range'",
		"'return'", "'select'", "'struct'", "'switch'", "'type'", "'var'", "'workflow'",
		"'generates'", "'prerequisite'", "'nodes'", "'branches'", "'success'",
		"'error'", "'abort'", "'end'", "", "'('", "')'", "'{'", "'}'", "'['",
		"']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "':='", "'...'",
		"'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'|'",
		"'/'", "'%'", "'<<'", "'>>'", "'&^'", "'~'", "'!'", "'+'", "'-'", "'^'",
		"'*'", "'&'", "'<-'", "'-->'", "'<--'",
	}
	staticData.SymbolicNames = []string{
		"", "BREAK", "CASE", "CHAN", "CONST", "CONTINUE", "DEFAULT", "DEFER",
		"ELSE", "FALLTHROUGH", "FOR", "FUNC", "GO", "GOTO", "IF", "IMPORT",
		"INTERFACE", "MAP", "NIL_LIT", "PACKAGE", "RANGE", "RETURN", "SELECT",
		"STRUCT", "SWITCH", "TYPE", "VAR", "WORKFLOW", "GENERATES", "PREREQUISITE",
		"NODES", "BRANCHES", "SUCCESS", "ERROR", "ABORT", "END", "IDENTIFIER",
		"L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET",
		"ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS",
		"DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS",
		"NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS",
		"OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "UNDERLYING", "EXCLAMATION",
		"PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "L_TO_R",
		"R_TO_L", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT",
		"DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE",
		"OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE",
		"RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", "COMMENT", "TERMINATOR",
		"LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI",
		"EOS", "OTHER",
	}
	staticData.RuleNames = []string{
		"sourceFile", "workflowDefine", "workflowDeclare", "workflowParameters",
		"workflowBlock", "prerequisteStatements", "prerequisiteStmt", "golangEmbedStatement",
		"nodesStatements", "nodeStmt", "directionStatements", "successStatements",
		"errorStatements", "abortStatements", "branchesStatements", "directionStmt",
		"nodeName", "branchStmt", "branchDirection", "chain_eos", "packageClause",
		"packageName", "identifier", "importDecl", "importSpec", "importPath",
		"declaration", "constDecl", "constSpec", "identifierList", "expressionList",
		"typeDecl", "typeSpec", "aliasDecl", "typeDef", "typeParameters", "typeParameterDecl",
		"typeElement", "typeTerm", "functionDecl", "methodDecl", "receiver",
		"varDecl", "varSpec", "block", "statementList", "statement", "simpleStmt",
		"expressionStmt", "sendStmt", "incDecStmt", "assignment", "assign_op",
		"shortVarDecl", "labeledStmt", "returnStmt", "breakStmt", "continueStmt",
		"gotoStmt", "fallthroughStmt", "deferStmt", "ifStmt", "switchStmt",
		"exprSwitchStmt", "exprCaseClause", "exprSwitchCase", "typeSwitchStmt",
		"typeSwitchGuard", "typeCaseClause", "typeSwitchCase", "typeList", "selectStmt",
		"commClause", "commCase", "recvStmt", "forStmt", "condition", "forClause",
		"rangeClause", "goStmt", "type_", "typeArgs", "typeName", "typeLit",
		"arrayType", "arrayLength", "elementType", "pointerType", "interfaceType",
		"sliceType", "mapType", "channelType", "methodSpec", "functionType",
		"signature", "result", "parameters", "parameterDecl", "expression",
		"primaryExpr", "conversion", "operand", "literal", "basicLit", "integer",
		"operandName", "qualifiedIdent", "compositeLit", "literalType", "literalValue",
		"elementList", "keyedElement", "key", "element", "structType", "fieldDecl",
		"string_", "embeddedField", "functionLit", "index", "slice_", "typeAssertion",
		"arguments", "methodExpr", "eos",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 100, 1216, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		0, 5, 0, 256, 8, 0, 10, 0, 12, 0, 259, 9, 0, 1, 0, 1, 0, 1, 0, 5, 0, 264,
		8, 0, 10, 0, 12, 0, 267, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 282, 8, 2, 1, 2, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 5, 3, 292, 8, 3, 10, 3, 12, 3, 295, 9, 3,
		1, 3, 3, 3, 298, 8, 3, 3, 3, 300, 8, 3, 1, 4, 1, 4, 1, 4, 5, 4, 305, 8,
		4, 10, 4, 12, 4, 308, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 315, 8,
		5, 10, 5, 12, 5, 318, 9, 5, 1, 6, 1, 6, 1, 6, 3, 6, 323, 8, 6, 1, 6, 1,
		6, 1, 6, 5, 6, 328, 8, 6, 10, 6, 12, 6, 331, 9, 6, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 347,
		8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 354, 8, 8, 10, 8, 12, 8, 357,
		9, 8, 1, 8, 5, 8, 360, 8, 8, 10, 8, 12, 8, 363, 9, 8, 1, 9, 1, 9, 1, 10,
		1, 10, 1, 10, 1, 10, 3, 10, 371, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 3,
		11, 377, 8, 11, 4, 11, 379, 8, 11, 11, 11, 12, 11, 380, 1, 12, 1, 12, 1,
		12, 1, 12, 3, 12, 387, 8, 12, 4, 12, 389, 8, 12, 11, 12, 12, 12, 390, 1,
		13, 1, 13, 1, 13, 1, 13, 3, 13, 397, 8, 13, 4, 13, 399, 8, 13, 11, 13,
		12, 13, 400, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 407, 8, 14, 4, 14, 409,
		8, 14, 11, 14, 12, 14, 410, 1, 15, 1, 15, 1, 15, 5, 15, 416, 8, 15, 10,
		15, 12, 15, 419, 9, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 5, 23,
		448, 8, 23, 10, 23, 12, 23, 451, 9, 23, 1, 23, 3, 23, 454, 8, 23, 1, 24,
		1, 24, 3, 24, 458, 8, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1,
		26, 1, 26, 3, 26, 468, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		5, 27, 476, 8, 27, 10, 27, 12, 27, 479, 9, 27, 1, 27, 3, 27, 482, 8, 27,
		1, 28, 1, 28, 3, 28, 486, 8, 28, 1, 28, 1, 28, 3, 28, 490, 8, 28, 1, 29,
		1, 29, 1, 29, 5, 29, 495, 8, 29, 10, 29, 12, 29, 498, 9, 29, 1, 30, 1,
		30, 1, 30, 5, 30, 503, 8, 30, 10, 30, 12, 30, 506, 9, 30, 1, 31, 1, 31,
		1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 514, 8, 31, 10, 31, 12, 31, 517, 9,
		31, 1, 31, 3, 31, 520, 8, 31, 1, 32, 1, 32, 3, 32, 524, 8, 32, 1, 33, 1,
		33, 3, 33, 528, 8, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 3, 34, 535, 8,
		34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 543, 8, 35, 10, 35,
		12, 35, 546, 9, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1,
		37, 5, 37, 556, 8, 37, 10, 37, 12, 37, 559, 9, 37, 1, 38, 3, 38, 562, 8,
		38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 3, 39, 569, 8, 39, 1, 39, 1, 39,
		3, 39, 573, 8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 580, 8, 40,
		1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 590, 8,
		42, 10, 42, 12, 42, 593, 9, 42, 1, 42, 3, 42, 596, 8, 42, 1, 43, 1, 43,
		1, 43, 1, 43, 3, 43, 602, 8, 43, 1, 43, 1, 43, 3, 43, 606, 8, 43, 1, 44,
		1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 3, 45, 615, 8, 45, 1, 45, 1,
		45, 1, 45, 5, 45, 620, 8, 45, 10, 45, 12, 45, 623, 9, 45, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 3, 46, 640, 8, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47,
		3, 47, 647, 8, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1,
		50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 3, 52, 663, 8, 52, 1, 52,
		1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 3, 54, 674, 8,
		54, 1, 55, 1, 55, 3, 55, 678, 8, 55, 1, 56, 1, 56, 3, 56, 682, 8, 56, 1,
		57, 1, 57, 3, 57, 686, 8, 57, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 60,
		1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3,
		61, 704, 8, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 710, 8, 61, 3, 61, 712,
		8, 61, 1, 62, 1, 62, 3, 62, 716, 8, 62, 1, 63, 1, 63, 3, 63, 720, 8, 63,
		1, 63, 3, 63, 723, 8, 63, 1, 63, 1, 63, 3, 63, 727, 8, 63, 3, 63, 729,
		8, 63, 1, 63, 1, 63, 5, 63, 733, 8, 63, 10, 63, 12, 63, 736, 9, 63, 1,
		63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 3, 65, 747,
		8, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3,
		66, 758, 8, 66, 1, 66, 1, 66, 5, 66, 762, 8, 66, 10, 66, 12, 66, 765, 9,
		66, 1, 66, 1, 66, 1, 67, 1, 67, 3, 67, 771, 8, 67, 1, 67, 1, 67, 1, 67,
		1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 3,
		69, 786, 8, 69, 1, 70, 1, 70, 3, 70, 790, 8, 70, 1, 70, 1, 70, 1, 70, 3,
		70, 795, 8, 70, 5, 70, 797, 8, 70, 10, 70, 12, 70, 800, 9, 70, 1, 71, 1,
		71, 1, 71, 5, 71, 805, 8, 71, 10, 71, 12, 71, 808, 9, 71, 1, 71, 1, 71,
		1, 72, 1, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 3, 73, 819, 8, 73, 1,
		73, 3, 73, 822, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74,
		830, 8, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 838, 8, 75,
		1, 75, 1, 75, 1, 76, 1, 76, 1, 77, 3, 77, 845, 8, 77, 1, 77, 1, 77, 3,
		77, 849, 8, 77, 1, 77, 1, 77, 3, 77, 853, 8, 77, 1, 78, 1, 78, 1, 78, 1,
		78, 1, 78, 1, 78, 3, 78, 861, 8, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79,
		1, 79, 1, 80, 1, 80, 3, 80, 871, 8, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1,
		80, 3, 80, 878, 8, 80, 1, 81, 1, 81, 1, 81, 3, 81, 883, 8, 81, 1, 81, 1,
		81, 1, 82, 1, 82, 3, 82, 889, 8, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83,
		1, 83, 1, 83, 1, 83, 3, 83, 899, 8, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1,
		84, 1, 85, 1, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88,
		1, 88, 3, 88, 917, 8, 88, 1, 88, 1, 88, 5, 88, 921, 8, 88, 10, 88, 12,
		88, 924, 9, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1, 90,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3,
		91, 944, 8, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92,
		3, 92, 954, 8, 92, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 3, 94, 961, 8, 94,
		1, 95, 1, 95, 3, 95, 965, 8, 95, 1, 96, 1, 96, 1, 96, 1, 96, 5, 96, 971,
		8, 96, 10, 96, 12, 96, 974, 9, 96, 1, 96, 3, 96, 977, 8, 96, 3, 96, 979,
		8, 96, 1, 96, 1, 96, 1, 97, 3, 97, 984, 8, 97, 1, 97, 3, 97, 987, 8, 97,
		1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 995, 8, 98, 1, 98, 1,
		98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98,
		1, 98, 1, 98, 1, 98, 5, 98, 1012, 8, 98, 10, 98, 12, 98, 1015, 9, 98, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1023, 8, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 1031, 8, 99, 10, 99, 12, 99, 1034, 9,
		99, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 1040, 8, 100, 1, 100, 1, 100,
		1, 101, 1, 101, 1, 101, 3, 101, 1047, 8, 101, 1, 101, 1, 101, 1, 101, 1,
		101, 3, 101, 1053, 8, 101, 1, 102, 1, 102, 1, 102, 3, 102, 1058, 8, 102,
		1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 1064, 8, 103, 1, 104, 1, 104, 1,
		105, 1, 105, 3, 105, 1070, 8, 105, 1, 106, 1, 106, 1, 106, 1, 106, 1, 107,
		1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108,
		1, 108, 1, 108, 1, 108, 3, 108, 1089, 8, 108, 3, 108, 1091, 8, 108, 1,
		109, 1, 109, 1, 109, 3, 109, 1096, 8, 109, 3, 109, 1098, 8, 109, 1, 109,
		1, 109, 1, 110, 1, 110, 1, 110, 5, 110, 1105, 8, 110, 10, 110, 12, 110,
		1108, 9, 110, 1, 111, 1, 111, 1, 111, 3, 111, 1113, 8, 111, 1, 111, 1,
		111, 1, 112, 1, 112, 3, 112, 1119, 8, 112, 1, 113, 1, 113, 3, 113, 1123,
		8, 113, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 5, 114, 1130, 8, 114, 10,
		114, 12, 114, 1133, 9, 114, 1, 114, 1, 114, 1, 115, 1, 115, 1, 115, 1,
		115, 3, 115, 1141, 8, 115, 1, 115, 3, 115, 1144, 8, 115, 1, 116, 1, 116,
		1, 117, 3, 117, 1149, 8, 117, 1, 117, 1, 117, 3, 117, 1153, 8, 117, 1,
		118, 1, 118, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 120, 1,
		120, 3, 120, 1165, 8, 120, 1, 120, 1, 120, 3, 120, 1169, 8, 120, 1, 120,
		3, 120, 1172, 8, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1179,
		8, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 122,
		1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1193, 8, 122, 3, 122, 1195, 8,
		122, 1, 122, 3, 122, 1198, 8, 122, 1, 122, 3, 122, 1201, 8, 122, 3, 122,
		1203, 8, 122, 1, 122, 1, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 124, 1,
		124, 1, 124, 3, 124, 1214, 8, 124, 1, 124, 0, 1, 196, 125, 0, 2, 4, 6,
		8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
		44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
		80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
		144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
		174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
		204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
		234, 236, 238, 240, 242, 244, 246, 248, 0, 11, 1, 0, 74, 75, 1, 0, 35,
		36, 1, 0, 48, 49, 2, 0, 60, 65, 68, 72, 2, 0, 45, 45, 99, 99, 1, 0, 67,
		73, 2, 0, 61, 65, 71, 72, 2, 0, 60, 60, 68, 70, 1, 0, 54, 59, 2, 0, 76,
		79, 83, 84, 1, 0, 90, 91, 1288, 0, 250, 1, 0, 0, 0, 2, 270, 1, 0, 0, 0,
		4, 276, 1, 0, 0, 0, 6, 299, 1, 0, 0, 0, 8, 301, 1, 0, 0, 0, 10, 309, 1,
		0, 0, 0, 12, 329, 1, 0, 0, 0, 14, 346, 1, 0, 0, 0, 16, 348, 1, 0, 0, 0,
		18, 364, 1, 0, 0, 0, 20, 370, 1, 0, 0, 0, 22, 372, 1, 0, 0, 0, 24, 382,
		1, 0, 0, 0, 26, 392, 1, 0, 0, 0, 28, 402, 1, 0, 0, 0, 30, 412, 1, 0, 0,
		0, 32, 420, 1, 0, 0, 0, 34, 422, 1, 0, 0, 0, 36, 426, 1, 0, 0, 0, 38, 431,
		1, 0, 0, 0, 40, 433, 1, 0, 0, 0, 42, 437, 1, 0, 0, 0, 44, 439, 1, 0, 0,
		0, 46, 441, 1, 0, 0, 0, 48, 457, 1, 0, 0, 0, 50, 462, 1, 0, 0, 0, 52, 467,
		1, 0, 0, 0, 54, 469, 1, 0, 0, 0, 56, 483, 1, 0, 0, 0, 58, 491, 1, 0, 0,
		0, 60, 499, 1, 0, 0, 0, 62, 507, 1, 0, 0, 0, 64, 523, 1, 0, 0, 0, 66, 525,
		1, 0, 0, 0, 68, 532, 1, 0, 0, 0, 70, 538, 1, 0, 0, 0, 72, 549, 1, 0, 0,
		0, 74, 552, 1, 0, 0, 0, 76, 561, 1, 0, 0, 0, 78, 565, 1, 0, 0, 0, 80, 574,
		1, 0, 0, 0, 82, 581, 1, 0, 0, 0, 84, 583, 1, 0, 0, 0, 86, 597, 1, 0, 0,
		0, 88, 607, 1, 0, 0, 0, 90, 621, 1, 0, 0, 0, 92, 639, 1, 0, 0, 0, 94, 646,
		1, 0, 0, 0, 96, 648, 1, 0, 0, 0, 98, 650, 1, 0, 0, 0, 100, 654, 1, 0, 0,
		0, 102, 657, 1, 0, 0, 0, 104, 662, 1, 0, 0, 0, 106, 666, 1, 0, 0, 0, 108,
		670, 1, 0, 0, 0, 110, 675, 1, 0, 0, 0, 112, 679, 1, 0, 0, 0, 114, 683,
		1, 0, 0, 0, 116, 687, 1, 0, 0, 0, 118, 690, 1, 0, 0, 0, 120, 692, 1, 0,
		0, 0, 122, 695, 1, 0, 0, 0, 124, 715, 1, 0, 0, 0, 126, 717, 1, 0, 0, 0,
		128, 739, 1, 0, 0, 0, 130, 746, 1, 0, 0, 0, 132, 748, 1, 0, 0, 0, 134,
		770, 1, 0, 0, 0, 136, 778, 1, 0, 0, 0, 138, 785, 1, 0, 0, 0, 140, 789,
		1, 0, 0, 0, 142, 801, 1, 0, 0, 0, 144, 811, 1, 0, 0, 0, 146, 821, 1, 0,
		0, 0, 148, 829, 1, 0, 0, 0, 150, 833, 1, 0, 0, 0, 152, 841, 1, 0, 0, 0,
		154, 844, 1, 0, 0, 0, 156, 860, 1, 0, 0, 0, 158, 865, 1, 0, 0, 0, 160,
		877, 1, 0, 0, 0, 162, 879, 1, 0, 0, 0, 164, 888, 1, 0, 0, 0, 166, 898,
		1, 0, 0, 0, 168, 900, 1, 0, 0, 0, 170, 905, 1, 0, 0, 0, 172, 907, 1, 0,
		0, 0, 174, 909, 1, 0, 0, 0, 176, 912, 1, 0, 0, 0, 178, 927, 1, 0, 0, 0,
		180, 931, 1, 0, 0, 0, 182, 943, 1, 0, 0, 0, 184, 953, 1, 0, 0, 0, 186,
		955, 1, 0, 0, 0, 188, 958, 1, 0, 0, 0, 190, 964, 1, 0, 0, 0, 192, 966,
		1, 0, 0, 0, 194, 983, 1, 0, 0, 0, 196, 994, 1, 0, 0, 0, 198, 1022, 1, 0,
		0, 0, 200, 1035, 1, 0, 0, 0, 202, 1052, 1, 0, 0, 0, 204, 1057, 1, 0, 0,
		0, 206, 1063, 1, 0, 0, 0, 208, 1065, 1, 0, 0, 0, 210, 1069, 1, 0, 0, 0,
		212, 1071, 1, 0, 0, 0, 214, 1075, 1, 0, 0, 0, 216, 1090, 1, 0, 0, 0, 218,
		1092, 1, 0, 0, 0, 220, 1101, 1, 0, 0, 0, 222, 1112, 1, 0, 0, 0, 224, 1118,
		1, 0, 0, 0, 226, 1122, 1, 0, 0, 0, 228, 1124, 1, 0, 0, 0, 230, 1140, 1,
		0, 0, 0, 232, 1145, 1, 0, 0, 0, 234, 1148, 1, 0, 0, 0, 236, 1154, 1, 0,
		0, 0, 238, 1158, 1, 0, 0, 0, 240, 1162, 1, 0, 0, 0, 242, 1182, 1, 0, 0,
		0, 244, 1187, 1, 0, 0, 0, 246, 1206, 1, 0, 0, 0, 248, 1213, 1, 0, 0, 0,
		250, 251, 3, 40, 20, 0, 251, 257, 3, 248, 124, 0, 252, 253, 3, 46, 23,
		0, 253, 254, 3, 248, 124, 0, 254, 256, 1, 0, 0, 0, 255, 252, 1, 0, 0, 0,
		256, 259, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 257, 258, 1, 0, 0, 0, 258,
		265, 1, 0, 0, 0, 259, 257, 1, 0, 0, 0, 260, 261, 3, 2, 1, 0, 261, 262,
		3, 248, 124, 0, 262, 264, 1, 0, 0, 0, 263, 260, 1, 0, 0, 0, 264, 267, 1,
		0, 0, 0, 265, 263, 1, 0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 268, 1, 0, 0,
		0, 267, 265, 1, 0, 0, 0, 268, 269, 5, 0, 0, 1, 269, 1, 1, 0, 0, 0, 270,
		271, 5, 27, 0, 0, 271, 272, 3, 4, 2, 0, 272, 273, 5, 39, 0, 0, 273, 274,
		3, 8, 4, 0, 274, 275, 5, 40, 0, 0, 275, 3, 1, 0, 0, 0, 276, 277, 5, 36,
		0, 0, 277, 278, 5, 37, 0, 0, 278, 279, 3, 6, 3, 0, 279, 281, 5, 38, 0,
		0, 280, 282, 5, 28, 0, 0, 281, 280, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282,
		283, 1, 0, 0, 0, 283, 284, 5, 36, 0, 0, 284, 285, 5, 41, 0, 0, 285, 286,
		3, 74, 37, 0, 286, 287, 5, 42, 0, 0, 287, 5, 1, 0, 0, 0, 288, 293, 3, 194,
		97, 0, 289, 290, 5, 44, 0, 0, 290, 292, 3, 194, 97, 0, 291, 289, 1, 0,
		0, 0, 292, 295, 1, 0, 0, 0, 293, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0,
		294, 297, 1, 0, 0, 0, 295, 293, 1, 0, 0, 0, 296, 298, 5, 44, 0, 0, 297,
		296, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 300, 1, 0, 0, 0, 299, 288,
		1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 7, 1, 0, 0, 0, 301, 302, 3, 10,
		5, 0, 302, 306, 3, 16, 8, 0, 303, 305, 3, 20, 10, 0, 304, 303, 1, 0, 0,
		0, 305, 308, 1, 0, 0, 0, 306, 304, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307,
		9, 1, 0, 0, 0, 308, 306, 1, 0, 0, 0, 309, 310, 5, 29, 0, 0, 310, 311, 5,
		39, 0, 0, 311, 312, 3, 12, 6, 0, 312, 316, 5, 40, 0, 0, 313, 315, 5, 99,
		0, 0, 314, 313, 1, 0, 0, 0, 315, 318, 1, 0, 0, 0, 316, 314, 1, 0, 0, 0,
		316, 317, 1, 0, 0, 0, 317, 11, 1, 0, 0, 0, 318, 316, 1, 0, 0, 0, 319, 323,
		5, 45, 0, 0, 320, 323, 5, 99, 0, 0, 321, 323, 1, 0, 0, 0, 322, 319, 1,
		0, 0, 0, 322, 320, 1, 0, 0, 0, 322, 321, 1, 0, 0, 0, 323, 324, 1, 0, 0,
		0, 324, 325, 3, 14, 7, 0, 325, 326, 3, 248, 124, 0, 326, 328, 1, 0, 0,
		0, 327, 322, 1, 0, 0, 0, 328, 331, 1, 0, 0, 0, 329, 327, 1, 0, 0, 0, 329,
		330, 1, 0, 0, 0, 330, 13, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 332, 347, 3,
		52, 26, 0, 333, 347, 3, 108, 54, 0, 334, 347, 3, 94, 47, 0, 335, 347, 3,
		158, 79, 0, 336, 347, 3, 112, 56, 0, 337, 347, 3, 114, 57, 0, 338, 347,
		3, 116, 58, 0, 339, 347, 3, 118, 59, 0, 340, 347, 3, 88, 44, 0, 341, 347,
		3, 122, 61, 0, 342, 347, 3, 124, 62, 0, 343, 347, 3, 142, 71, 0, 344, 347,
		3, 150, 75, 0, 345, 347, 3, 120, 60, 0, 346, 332, 1, 0, 0, 0, 346, 333,
		1, 0, 0, 0, 346, 334, 1, 0, 0, 0, 346, 335, 1, 0, 0, 0, 346, 336, 1, 0,
		0, 0, 346, 337, 1, 0, 0, 0, 346, 338, 1, 0, 0, 0, 346, 339, 1, 0, 0, 0,
		346, 340, 1, 0, 0, 0, 346, 341, 1, 0, 0, 0, 346, 342, 1, 0, 0, 0, 346,
		343, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 346, 345, 1, 0, 0, 0, 347, 15, 1,
		0, 0, 0, 348, 349, 5, 30, 0, 0, 349, 355, 5, 46, 0, 0, 350, 351, 3, 18,
		9, 0, 351, 352, 3, 248, 124, 0, 352, 354, 1, 0, 0, 0, 353, 350, 1, 0, 0,
		0, 354, 357, 1, 0, 0, 0, 355, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356,
		361, 1, 0, 0, 0, 357, 355, 1, 0, 0, 0, 358, 360, 5, 99, 0, 0, 359, 358,
		1, 0, 0, 0, 360, 363, 1, 0, 0, 0, 361, 359, 1, 0, 0, 0, 361, 362, 1, 0,
		0, 0, 362, 17, 1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 364, 365, 3, 58, 29, 0,
		365, 19, 1, 0, 0, 0, 366, 371, 3, 22, 11, 0, 367, 371, 3, 24, 12, 0, 368,
		371, 3, 26, 13, 0, 369, 371, 3, 28, 14, 0, 370, 366, 1, 0, 0, 0, 370, 367,
		1, 0, 0, 0, 370, 368, 1, 0, 0, 0, 370, 369, 1, 0, 0, 0, 371, 21, 1, 0,
		0, 0, 372, 373, 5, 32, 0, 0, 373, 378, 5, 46, 0, 0, 374, 376, 3, 30, 15,
		0, 375, 377, 3, 38, 19, 0, 376, 375, 1, 0, 0, 0, 376, 377, 1, 0, 0, 0,
		377, 379, 1, 0, 0, 0, 378, 374, 1, 0, 0, 0, 379, 380, 1, 0, 0, 0, 380,
		378, 1, 0, 0, 0, 380, 381, 1, 0, 0, 0, 381, 23, 1, 0, 0, 0, 382, 383, 5,
		33, 0, 0, 383, 388, 5, 46, 0, 0, 384, 386, 3, 30, 15, 0, 385, 387, 3, 38,
		19, 0, 386, 385, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 389, 1, 0, 0, 0,
		388, 384, 1, 0, 0, 0, 389, 390, 1, 0, 0, 0, 390, 388, 1, 0, 0, 0, 390,
		391, 1, 0, 0, 0, 391, 25, 1, 0, 0, 0, 392, 393, 5, 34, 0, 0, 393, 398,
		5, 46, 0, 0, 394, 396, 3, 30, 15, 0, 395, 397, 3, 38, 19, 0, 396, 395,
		1, 0, 0, 0, 396, 397, 1, 0, 0, 0, 397, 399, 1, 0, 0, 0, 398, 394, 1, 0,
		0, 0, 399, 400, 1, 0, 0, 0, 400, 398, 1, 0, 0, 0, 400, 401, 1, 0, 0, 0,
		401, 27, 1, 0, 0, 0, 402, 403, 5, 31, 0, 0, 403, 408, 5, 46, 0, 0, 404,
		406, 3, 34, 17, 0, 405, 407, 3, 38, 19, 0, 406, 405, 1, 0, 0, 0, 406, 407,
		1, 0, 0, 0, 407, 409, 1, 0, 0, 0, 408, 404, 1, 0, 0, 0, 409, 410, 1, 0,
		0, 0, 410, 408, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 29, 1, 0, 0, 0,
		412, 417, 3, 32, 16, 0, 413, 414, 7, 0, 0, 0, 414, 416, 3, 32, 16, 0, 415,
		413, 1, 0, 0, 0, 416, 419, 1, 0, 0, 0, 417, 415, 1, 0, 0, 0, 417, 418,
		1, 0, 0, 0, 418, 31, 1, 0, 0, 0, 419, 417, 1, 0, 0, 0, 420, 421, 7, 1,
		0, 0, 421, 33, 1, 0, 0, 0, 422, 423, 5, 36, 0, 0, 423, 424, 3, 36, 18,
		0, 424, 425, 3, 32, 16, 0, 425, 35, 1, 0, 0, 0, 426, 427, 5, 69, 0, 0,
		427, 428, 3, 232, 116, 0, 428, 429, 5, 69, 0, 0, 429, 430, 5, 58, 0, 0,
		430, 37, 1, 0, 0, 0, 431, 432, 5, 99, 0, 0, 432, 39, 1, 0, 0, 0, 433, 434,
		5, 19, 0, 0, 434, 435, 3, 42, 21, 0, 435, 436, 6, 20, -1, 0, 436, 41, 1,
		0, 0, 0, 437, 438, 3, 44, 22, 0, 438, 43, 1, 0, 0, 0, 439, 440, 5, 36,
		0, 0, 440, 45, 1, 0, 0, 0, 441, 453, 5, 15, 0, 0, 442, 454, 3, 48, 24,
		0, 443, 449, 5, 37, 0, 0, 444, 445, 3, 48, 24, 0, 445, 446, 3, 248, 124,
		0, 446, 448, 1, 0, 0, 0, 447, 444, 1, 0, 0, 0, 448, 451, 1, 0, 0, 0, 449,
		447, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 452, 1, 0, 0, 0, 451, 449,
		1, 0, 0, 0, 452, 454, 5, 38, 0, 0, 453, 442, 1, 0, 0, 0, 453, 443, 1, 0,
		0, 0, 454, 47, 1, 0, 0, 0, 455, 458, 5, 47, 0, 0, 456, 458, 3, 42, 21,
		0, 457, 455, 1, 0, 0, 0, 457, 456, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458,
		459, 1, 0, 0, 0, 459, 460, 3, 50, 25, 0, 460, 461, 6, 24, -1, 0, 461, 49,
		1, 0, 0, 0, 462, 463, 3, 232, 116, 0, 463, 51, 1, 0, 0, 0, 464, 468, 3,
		54, 27, 0, 465, 468, 3, 62, 31, 0, 466, 468, 3, 84, 42, 0, 467, 464, 1,
		0, 0, 0, 467, 465, 1, 0, 0, 0, 467, 466, 1, 0, 0, 0, 468, 53, 1, 0, 0,
		0, 469, 481, 5, 4, 0, 0, 470, 482, 3, 56, 28, 0, 471, 477, 5, 37, 0, 0,
		472, 473, 3, 56, 28, 0, 473, 474, 3, 248, 124, 0, 474, 476, 1, 0, 0, 0,
		475, 472, 1, 0, 0, 0, 476, 479, 1, 0, 0, 0, 477, 475, 1, 0, 0, 0, 477,
		478, 1, 0, 0, 0, 478, 480, 1, 0, 0, 0, 479, 477, 1, 0, 0, 0, 480, 482,
		5, 38, 0, 0, 481, 470, 1, 0, 0, 0, 481, 471, 1, 0, 0, 0, 482, 55, 1, 0,
		0, 0, 483, 489, 3, 58, 29, 0, 484, 486, 3, 160, 80, 0, 485, 484, 1, 0,
		0, 0, 485, 486, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 488, 5, 43, 0, 0,
		488, 490, 3, 60, 30, 0, 489, 485, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490,
		57, 1, 0, 0, 0, 491, 496, 5, 36, 0, 0, 492, 493, 5, 44, 0, 0, 493, 495,
		5, 36, 0, 0, 494, 492, 1, 0, 0, 0, 495, 498, 1, 0, 0, 0, 496, 494, 1, 0,
		0, 0, 496, 497, 1, 0, 0, 0, 497, 59, 1, 0, 0, 0, 498, 496, 1, 0, 0, 0,
		499, 504, 3, 196, 98, 0, 500, 501, 5, 44, 0, 0, 501, 503, 3, 196, 98, 0,
		502, 500, 1, 0, 0, 0, 503, 506, 1, 0, 0, 0, 504, 502, 1, 0, 0, 0, 504,
		505, 1, 0, 0, 0, 505, 61, 1, 0, 0, 0, 506, 504, 1, 0, 0, 0, 507, 519, 5,
		25, 0, 0, 508, 520, 3, 64, 32, 0, 509, 515, 5, 37, 0, 0, 510, 511, 3, 64,
		32, 0, 511, 512, 3, 248, 124, 0, 512, 514, 1, 0, 0, 0, 513, 510, 1, 0,
		0, 0, 514, 517, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 515, 516, 1, 0, 0, 0,
		516, 518, 1, 0, 0, 0, 517, 515, 1, 0, 0, 0, 518, 520, 5, 38, 0, 0, 519,
		508, 1, 0, 0, 0, 519, 509, 1, 0, 0, 0, 520, 63, 1, 0, 0, 0, 521, 524, 3,
		66, 33, 0, 522, 524, 3, 68, 34, 0, 523, 521, 1, 0, 0, 0, 523, 522, 1, 0,
		0, 0, 524, 65, 1, 0, 0, 0, 525, 527, 5, 36, 0, 0, 526, 528, 3, 70, 35,
		0, 527, 526, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 529, 1, 0, 0, 0, 529,
		530, 5, 43, 0, 0, 530, 531, 3, 160, 80, 0, 531, 67, 1, 0, 0, 0, 532, 534,
		5, 36, 0, 0, 533, 535, 3, 70, 35, 0, 534, 533, 1, 0, 0, 0, 534, 535, 1,
		0, 0, 0, 535, 536, 1, 0, 0, 0, 536, 537, 3, 160, 80, 0, 537, 69, 1, 0,
		0, 0, 538, 539, 5, 41, 0, 0, 539, 544, 3, 72, 36, 0, 540, 541, 5, 44, 0,
		0, 541, 543, 3, 72, 36, 0, 542, 540, 1, 0, 0, 0, 543, 546, 1, 0, 0, 0,
		544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 547, 1, 0, 0, 0, 546,
		544, 1, 0, 0, 0, 547, 548, 5, 42, 0, 0, 548, 71, 1, 0, 0, 0, 549, 550,
		3, 58, 29, 0, 550, 551, 3, 74, 37, 0, 551, 73, 1, 0, 0, 0, 552, 557, 3,
		76, 38, 0, 553, 554, 5, 60, 0, 0, 554, 556, 3, 76, 38, 0, 555, 553, 1,
		0, 0, 0, 556, 559, 1, 0, 0, 0, 557, 555, 1, 0, 0, 0, 557, 558, 1, 0, 0,
		0, 558, 75, 1, 0, 0, 0, 559, 557, 1, 0, 0, 0, 560, 562, 5, 66, 0, 0, 561,
		560, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 563, 1, 0, 0, 0, 563, 564,
		3, 160, 80, 0, 564, 77, 1, 0, 0, 0, 565, 566, 5, 11, 0, 0, 566, 568, 5,
		36, 0, 0, 567, 569, 3, 70, 35, 0, 568, 567, 1, 0, 0, 0, 568, 569, 1, 0,
		0, 0, 569, 570, 1, 0, 0, 0, 570, 572, 3, 188, 94, 0, 571, 573, 3, 88, 44,
		0, 572, 571, 1, 0, 0, 0, 572, 573, 1, 0, 0, 0, 573, 79, 1, 0, 0, 0, 574,
		575, 5, 11, 0, 0, 575, 576, 3, 82, 41, 0, 576, 577, 5, 36, 0, 0, 577, 579,
		3, 188, 94, 0, 578, 580, 3, 88, 44, 0, 579, 578, 1, 0, 0, 0, 579, 580,
		1, 0, 0, 0, 580, 81, 1, 0, 0, 0, 581, 582, 3, 192, 96, 0, 582, 83, 1, 0,
		0, 0, 583, 595, 5, 26, 0, 0, 584, 596, 3, 86, 43, 0, 585, 591, 5, 37, 0,
		0, 586, 587, 3, 86, 43, 0, 587, 588, 3, 248, 124, 0, 588, 590, 1, 0, 0,
		0, 589, 586, 1, 0, 0, 0, 590, 593, 1, 0, 0, 0, 591, 589, 1, 0, 0, 0, 591,
		592, 1, 0, 0, 0, 592, 594, 1, 0, 0, 0, 593, 591, 1, 0, 0, 0, 594, 596,
		5, 38, 0, 0, 595, 584, 1, 0, 0, 0, 595, 585, 1, 0, 0, 0, 596, 85, 1, 0,
		0, 0, 597, 605, 3, 58, 29, 0, 598, 601, 3, 160, 80, 0, 599, 600, 5, 43,
		0, 0, 600, 602, 3, 60, 30, 0, 601, 599, 1, 0, 0, 0, 601, 602, 1, 0, 0,
		0, 602, 606, 1, 0, 0, 0, 603, 604, 5, 43, 0, 0, 604, 606, 3, 60, 30, 0,
		605, 598, 1, 0, 0, 0, 605, 603, 1, 0, 0, 0, 606, 87, 1, 0, 0, 0, 607, 608,
		5, 39, 0, 0, 608, 609, 3, 90, 45, 0, 609, 610, 5, 40, 0, 0, 610, 89, 1,
		0, 0, 0, 611, 615, 5, 45, 0, 0, 612, 615, 5, 99, 0, 0, 613, 615, 1, 0,
		0, 0, 614, 611, 1, 0, 0, 0, 614, 612, 1, 0, 0, 0, 614, 613, 1, 0, 0, 0,
		615, 616, 1, 0, 0, 0, 616, 617, 3, 92, 46, 0, 617, 618, 3, 248, 124, 0,
		618, 620, 1, 0, 0, 0, 619, 614, 1, 0, 0, 0, 620, 623, 1, 0, 0, 0, 621,
		619, 1, 0, 0, 0, 621, 622, 1, 0, 0, 0, 622, 91, 1, 0, 0, 0, 623, 621, 1,
		0, 0, 0, 624, 640, 3, 52, 26, 0, 625, 640, 3, 108, 54, 0, 626, 640, 3,
		94, 47, 0, 627, 640, 3, 158, 79, 0, 628, 640, 3, 110, 55, 0, 629, 640,
		3, 112, 56, 0, 630, 640, 3, 114, 57, 0, 631, 640, 3, 116, 58, 0, 632, 640,
		3, 118, 59, 0, 633, 640, 3, 88, 44, 0, 634, 640, 3, 122, 61, 0, 635, 640,
		3, 124, 62, 0, 636, 640, 3, 142, 71, 0, 637, 640, 3, 150, 75, 0, 638, 640,
		3, 120, 60, 0, 639, 624, 1, 0, 0, 0, 639, 625, 1, 0, 0, 0, 639, 626, 1,
		0, 0, 0, 639, 627, 1, 0, 0, 0, 639, 628, 1, 0, 0, 0, 639, 629, 1, 0, 0,
		0, 639, 630, 1, 0, 0, 0, 639, 631, 1, 0, 0, 0, 639, 632, 1, 0, 0, 0, 639,
		633, 1, 0, 0, 0, 639, 634, 1, 0, 0, 0, 639, 635, 1, 0, 0, 0, 639, 636,
		1, 0, 0, 0, 639, 637, 1, 0, 0, 0, 639, 638, 1, 0, 0, 0, 640, 93, 1, 0,
		0, 0, 641, 647, 3, 98, 49, 0, 642, 647, 3, 100, 50, 0, 643, 647, 3, 102,
		51, 0, 644, 647, 3, 96, 48, 0, 645, 647, 3, 106, 53, 0, 646, 641, 1, 0,
		0, 0, 646, 642, 1, 0, 0, 0, 646, 643, 1, 0, 0, 0, 646, 644, 1, 0, 0, 0,
		646, 645, 1, 0, 0, 0, 647, 95, 1, 0, 0, 0, 648, 649, 3, 196, 98, 0, 649,
		97, 1, 0, 0, 0, 650, 651, 3, 196, 98, 0, 651, 652, 5, 73, 0, 0, 652, 653,
		3, 196, 98, 0, 653, 99, 1, 0, 0, 0, 654, 655, 3, 196, 98, 0, 655, 656,
		7, 2, 0, 0, 656, 101, 1, 0, 0, 0, 657, 658, 3, 60, 30, 0, 658, 659, 3,
		104, 52, 0, 659, 660, 3, 60, 30, 0, 660, 103, 1, 0, 0, 0, 661, 663, 7,
		3, 0, 0, 662, 661, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 664, 1, 0, 0,
		0, 664, 665, 5, 43, 0, 0, 665, 105, 1, 0, 0, 0, 666, 667, 3, 58, 29, 0,
		667, 668, 5, 50, 0, 0, 668, 669, 3, 60, 30, 0, 669, 107, 1, 0, 0, 0, 670,
		671, 5, 36, 0, 0, 671, 673, 5, 46, 0, 0, 672, 674, 3, 92, 46, 0, 673, 672,
		1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 109, 1, 0, 0, 0, 675, 677, 5, 21,
		0, 0, 676, 678, 3, 60, 30, 0, 677, 676, 1, 0, 0, 0, 677, 678, 1, 0, 0,
		0, 678, 111, 1, 0, 0, 0, 679, 681, 5, 1, 0, 0, 680, 682, 5, 36, 0, 0, 681,
		680, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 113, 1, 0, 0, 0, 683, 685,
		5, 5, 0, 0, 684, 686, 5, 36, 0, 0, 685, 684, 1, 0, 0, 0, 685, 686, 1, 0,
		0, 0, 686, 115, 1, 0, 0, 0, 687, 688, 5, 13, 0, 0, 688, 689, 5, 36, 0,
		0, 689, 117, 1, 0, 0, 0, 690, 691, 5, 9, 0, 0, 691, 119, 1, 0, 0, 0, 692,
		693, 5, 7, 0, 0, 693, 694, 3, 196, 98, 0, 694, 121, 1, 0, 0, 0, 695, 703,
		5, 14, 0, 0, 696, 704, 3, 196, 98, 0, 697, 698, 7, 4, 0, 0, 698, 704, 3,
		196, 98, 0, 699, 700, 3, 94, 47, 0, 700, 701, 7, 4, 0, 0, 701, 702, 3,
		196, 98, 0, 702, 704, 1, 0, 0, 0, 703, 696, 1, 0, 0, 0, 703, 697, 1, 0,
		0, 0, 703, 699, 1, 0, 0, 0, 704, 705, 1, 0, 0, 0, 705, 711, 3, 88, 44,
		0, 706, 709, 5, 8, 0, 0, 707, 710, 3, 122, 61, 0, 708, 710, 3, 88, 44,
		0, 709, 707, 1, 0, 0, 0, 709, 708, 1, 0, 0, 0, 710, 712, 1, 0, 0, 0, 711,
		706, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 123, 1, 0, 0, 0, 713, 716,
		3, 126, 63, 0, 714, 716, 3, 132, 66, 0, 715, 713, 1, 0, 0, 0, 715, 714,
		1, 0, 0, 0, 716, 125, 1, 0, 0, 0, 717, 728, 5, 24, 0, 0, 718, 720, 3, 196,
		98, 0, 719, 718, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 729, 1, 0, 0, 0,
		721, 723, 3, 94, 47, 0, 722, 721, 1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723,
		724, 1, 0, 0, 0, 724, 726, 3, 248, 124, 0, 725, 727, 3, 196, 98, 0, 726,
		725, 1, 0, 0, 0, 726, 727, 1, 0, 0, 0, 727, 729, 1, 0, 0, 0, 728, 719,
		1, 0, 0, 0, 728, 722, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0, 730, 734, 5, 39,
		0, 0, 731, 733, 3, 128, 64, 0, 732, 731, 1, 0, 0, 0, 733, 736, 1, 0, 0,
		0, 734, 732, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 737, 1, 0, 0, 0, 736,
		734, 1, 0, 0, 0, 737, 738, 5, 40, 0, 0, 738, 127, 1, 0, 0, 0, 739, 740,
		3, 130, 65, 0, 740, 741, 5, 46, 0, 0, 741, 742, 3, 90, 45, 0, 742, 129,
		1, 0, 0, 0, 743, 744, 5, 2, 0, 0, 744, 747, 3, 60, 30, 0, 745, 747, 5,
		6, 0, 0, 746, 743, 1, 0, 0, 0, 746, 745, 1, 0, 0, 0, 747, 131, 1, 0, 0,
		0, 748, 757, 5, 24, 0, 0, 749, 758, 3, 134, 67, 0, 750, 751, 3, 248, 124,
		0, 751, 752, 3, 134, 67, 0, 752, 758, 1, 0, 0, 0, 753, 754, 3, 94, 47,
		0, 754, 755, 3, 248, 124, 0, 755, 756, 3, 134, 67, 0, 756, 758, 1, 0, 0,
		0, 757, 749, 1, 0, 0, 0, 757, 750, 1, 0, 0, 0, 757, 753, 1, 0, 0, 0, 758,
		759, 1, 0, 0, 0, 759, 763, 5, 39, 0, 0, 760, 762, 3, 136, 68, 0, 761, 760,
		1, 0, 0, 0, 762, 765, 1, 0, 0, 0, 763, 761, 1, 0, 0, 0, 763, 764, 1, 0,
		0, 0, 764, 766, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 766, 767, 5, 40, 0, 0,
		767, 133, 1, 0, 0, 0, 768, 769, 5, 36, 0, 0, 769, 771, 5, 50, 0, 0, 770,
		768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 772, 1, 0, 0, 0, 772, 773,
		3, 198, 99, 0, 773, 774, 5, 47, 0, 0, 774, 775, 5, 37, 0, 0, 775, 776,
		5, 25, 0, 0, 776, 777, 5, 38, 0, 0, 777, 135, 1, 0, 0, 0, 778, 779, 3,
		138, 69, 0, 779, 780, 5, 46, 0, 0, 780, 781, 3, 90, 45, 0, 781, 137, 1,
		0, 0, 0, 782, 783, 5, 2, 0, 0, 783, 786, 3, 140, 70, 0, 784, 786, 5, 6,
		0, 0, 785, 782, 1, 0, 0, 0, 785, 784, 1, 0, 0, 0, 786, 139, 1, 0, 0, 0,
		787, 790, 3, 160, 80, 0, 788, 790, 5, 18, 0, 0, 789, 787, 1, 0, 0, 0, 789,
		788, 1, 0, 0, 0, 790, 798, 1, 0, 0, 0, 791, 794, 5, 44, 0, 0, 792, 795,
		3, 160, 80, 0, 793, 795, 5, 18, 0, 0, 794, 792, 1, 0, 0, 0, 794, 793, 1,
		0, 0, 0, 795, 797, 1, 0, 0, 0, 796, 791, 1, 0, 0, 0, 797, 800, 1, 0, 0,
		0, 798, 796, 1, 0, 0, 0, 798, 799, 1, 0, 0, 0, 799, 141, 1, 0, 0, 0, 800,
		798, 1, 0, 0, 0, 801, 802, 5, 22, 0, 0, 802, 806, 5, 39, 0, 0, 803, 805,
		3, 144, 72, 0, 804, 803, 1, 0, 0, 0, 805, 808, 1, 0, 0, 0, 806, 804, 1,
		0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 809, 1, 0, 0, 0, 808, 806, 1, 0, 0,
		0, 809, 810, 5, 40, 0, 0, 810, 143, 1, 0, 0, 0, 811, 812, 3, 146, 73, 0,
		812, 813, 5, 46, 0, 0, 813, 814, 3, 90, 45, 0, 814, 145, 1, 0, 0, 0, 815,
		818, 5, 2, 0, 0, 816, 819, 3, 98, 49, 0, 817, 819, 3, 148, 74, 0, 818,
		816, 1, 0, 0, 0, 818, 817, 1, 0, 0, 0, 819, 822, 1, 0, 0, 0, 820, 822,
		5, 6, 0, 0, 821, 815, 1, 0, 0, 0, 821, 820, 1, 0, 0, 0, 822, 147, 1, 0,
		0, 0, 823, 824, 3, 60, 30, 0, 824, 825, 5, 43, 0, 0, 825, 830, 1, 0, 0,
		0, 826, 827, 3, 58, 29, 0, 827, 828, 5, 50, 0, 0, 828, 830, 1, 0, 0, 0,
		829, 823, 1, 0, 0, 0, 829, 826, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0, 830,
		831, 1, 0, 0, 0, 831, 832, 3, 196, 98, 0, 832, 149, 1, 0, 0, 0, 833, 837,
		5, 10, 0, 0, 834, 838, 3, 152, 76, 0, 835, 838, 3, 154, 77, 0, 836, 838,
		3, 156, 78, 0, 837, 834, 1, 0, 0, 0, 837, 835, 1, 0, 0, 0, 837, 836, 1,
		0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 840, 3, 88, 44,
		0, 840, 151, 1, 0, 0, 0, 841, 842, 3, 196, 98, 0, 842, 153, 1, 0, 0, 0,
		843, 845, 3, 94, 47, 0, 844, 843, 1, 0, 0, 0, 844, 845, 1, 0, 0, 0, 845,
		846, 1, 0, 0, 0, 846, 848, 3, 248, 124, 0, 847, 849, 3, 196, 98, 0, 848,
		847, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 850, 1, 0, 0, 0, 850, 852,
		3, 248, 124, 0, 851, 853, 3, 94, 47, 0, 852, 851, 1, 0, 0, 0, 852, 853,
		1, 0, 0, 0, 853, 155, 1, 0, 0, 0, 854, 855, 3, 60, 30, 0, 855, 856, 5,
		43, 0, 0, 856, 861, 1, 0, 0, 0, 857, 858, 3, 58, 29, 0, 858, 859, 5, 50,
		0, 0, 859, 861, 1, 0, 0, 0, 860, 854, 1, 0, 0, 0, 860, 857, 1, 0, 0, 0,
		860, 861, 1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 863, 5, 20, 0, 0, 863,
		864, 3, 196, 98, 0, 864, 157, 1, 0, 0, 0, 865, 866, 5, 12, 0, 0, 866, 867,
		3, 196, 98, 0, 867, 159, 1, 0, 0, 0, 868, 870, 3, 164, 82, 0, 869, 871,
		3, 162, 81, 0, 870, 869, 1, 0, 0, 0, 870, 871, 1, 0, 0, 0, 871, 878, 1,
		0, 0, 0, 872, 878, 3, 166, 83, 0, 873, 874, 5, 37, 0, 0, 874, 875, 3, 160,
		80, 0, 875, 876, 5, 38, 0, 0, 876, 878, 1, 0, 0, 0, 877, 868, 1, 0, 0,
		0, 877, 872, 1, 0, 0, 0, 877, 873, 1, 0, 0, 0, 878, 161, 1, 0, 0, 0, 879,
		880, 5, 41, 0, 0, 880, 882, 3, 140, 70, 0, 881, 883, 5, 44, 0, 0, 882,
		881, 1, 0, 0, 0, 882, 883, 1, 0, 0, 0, 883, 884, 1, 0, 0, 0, 884, 885,
		5, 42, 0, 0, 885, 163, 1, 0, 0, 0, 886, 889, 3, 212, 106, 0, 887, 889,
		5, 36, 0, 0, 888, 886, 1, 0, 0, 0, 888, 887, 1, 0, 0, 0, 889, 165, 1, 0,
		0, 0, 890, 899, 3, 168, 84, 0, 891, 899, 3, 228, 114, 0, 892, 899, 3, 174,
		87, 0, 893, 899, 3, 186, 93, 0, 894, 899, 3, 176, 88, 0, 895, 899, 3, 178,
		89, 0, 896, 899, 3, 180, 90, 0, 897, 899, 3, 182, 91, 0, 898, 890, 1, 0,
		0, 0, 898, 891, 1, 0, 0, 0, 898, 892, 1, 0, 0, 0, 898, 893, 1, 0, 0, 0,
		898, 894, 1, 0, 0, 0, 898, 895, 1, 0, 0, 0, 898, 896, 1, 0, 0, 0, 898,
		897, 1, 0, 0, 0, 899, 167, 1, 0, 0, 0, 900, 901, 5, 41, 0, 0, 901, 902,
		3, 170, 85, 0, 902, 903, 5, 42, 0, 0, 903, 904, 3, 172, 86, 0, 904, 169,
		1, 0, 0, 0, 905, 906, 3, 196, 98, 0, 906, 171, 1, 0, 0, 0, 907, 908, 3,
		160, 80, 0, 908, 173, 1, 0, 0, 0, 909, 910, 5, 71, 0, 0, 910, 911, 3, 160,
		80, 0, 911, 175, 1, 0, 0, 0, 912, 913, 5, 16, 0, 0, 913, 922, 5, 39, 0,
		0, 914, 917, 3, 184, 92, 0, 915, 917, 3, 74, 37, 0, 916, 914, 1, 0, 0,
		0, 916, 915, 1, 0, 0, 0, 917, 918, 1, 0, 0, 0, 918, 919, 3, 248, 124, 0,
		919, 921, 1, 0, 0, 0, 920, 916, 1, 0, 0, 0, 921, 924, 1, 0, 0, 0, 922,
		920, 1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 925, 1, 0, 0, 0, 924, 922,
		1, 0, 0, 0, 925, 926, 5, 40, 0, 0, 926, 177, 1, 0, 0, 0, 927, 928, 5, 41,
		0, 0, 928, 929, 5, 42, 0, 0, 929, 930, 3, 172, 86, 0, 930, 179, 1, 0, 0,
		0, 931, 932, 5, 17, 0, 0, 932, 933, 5, 41, 0, 0, 933, 934, 3, 160, 80,
		0, 934, 935, 5, 42, 0, 0, 935, 936, 3, 172, 86, 0, 936, 181, 1, 0, 0, 0,
		937, 938, 4, 91, 0, 0, 938, 944, 5, 3, 0, 0, 939, 940, 5, 3, 0, 0, 940,
		944, 5, 73, 0, 0, 941, 942, 5, 73, 0, 0, 942, 944, 5, 3, 0, 0, 943, 937,
		1, 0, 0, 0, 943, 939, 1, 0, 0, 0, 943, 941, 1, 0, 0, 0, 944, 945, 1, 0,
		0, 0, 945, 946, 3, 172, 86, 0, 946, 183, 1, 0, 0, 0, 947, 948, 5, 36, 0,
		0, 948, 949, 3, 192, 96, 0, 949, 950, 3, 190, 95, 0, 950, 954, 1, 0, 0,
		0, 951, 952, 5, 36, 0, 0, 952, 954, 3, 192, 96, 0, 953, 947, 1, 0, 0, 0,
		953, 951, 1, 0, 0, 0, 954, 185, 1, 0, 0, 0, 955, 956, 5, 11, 0, 0, 956,
		957, 3, 188, 94, 0, 957, 187, 1, 0, 0, 0, 958, 960, 3, 192, 96, 0, 959,
		961, 3, 190, 95, 0, 960, 959, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 189,
		1, 0, 0, 0, 962, 965, 3, 192, 96, 0, 963, 965, 3, 160, 80, 0, 964, 962,
		1, 0, 0, 0, 964, 963, 1, 0, 0, 0, 965, 191, 1, 0, 0, 0, 966, 978, 5, 37,
		0, 0, 967, 972, 3, 194, 97, 0, 968, 969, 5, 44, 0, 0, 969, 971, 3, 194,
		97, 0, 970, 968, 1, 0, 0, 0, 971, 974, 1, 0, 0, 0, 972, 970, 1, 0, 0, 0,
		972, 973, 1, 0, 0, 0, 973, 976, 1, 0, 0, 0, 974, 972, 1, 0, 0, 0, 975,
		977, 5, 44, 0, 0, 976, 975, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977, 979,
		1, 0, 0, 0, 978, 967, 1, 0, 0, 0, 978, 979, 1, 0, 0, 0, 979, 980, 1, 0,
		0, 0, 980, 981, 5, 38, 0, 0, 981, 193, 1, 0, 0, 0, 982, 984, 3, 58, 29,
		0, 983, 982, 1, 0, 0, 0, 983, 984, 1, 0, 0, 0, 984, 986, 1, 0, 0, 0, 985,
		987, 5, 51, 0, 0, 986, 985, 1, 0, 0, 0, 986, 987, 1, 0, 0, 0, 987, 988,
		1, 0, 0, 0, 988, 989, 3, 160, 80, 0, 989, 195, 1, 0, 0, 0, 990, 991, 6,
		98, -1, 0, 991, 995, 3, 198, 99, 0, 992, 993, 7, 5, 0, 0, 993, 995, 3,
		196, 98, 6, 994, 990, 1, 0, 0, 0, 994, 992, 1, 0, 0, 0, 995, 1013, 1, 0,
		0, 0, 996, 997, 10, 5, 0, 0, 997, 998, 7, 6, 0, 0, 998, 1012, 3, 196, 98,
		6, 999, 1000, 10, 4, 0, 0, 1000, 1001, 7, 7, 0, 0, 1001, 1012, 3, 196,
		98, 5, 1002, 1003, 10, 3, 0, 0, 1003, 1004, 7, 8, 0, 0, 1004, 1012, 3,
		196, 98, 4, 1005, 1006, 10, 2, 0, 0, 1006, 1007, 5, 53, 0, 0, 1007, 1012,
		3, 196, 98, 3, 1008, 1009, 10, 1, 0, 0, 1009, 1010, 5, 52, 0, 0, 1010,
		1012, 3, 196, 98, 2, 1011, 996, 1, 0, 0, 0, 1011, 999, 1, 0, 0, 0, 1011,
		1002, 1, 0, 0, 0, 1011, 1005, 1, 0, 0, 0, 1011, 1008, 1, 0, 0, 0, 1012,
		1015, 1, 0, 0, 0, 1013, 1011, 1, 0, 0, 0, 1013, 1014, 1, 0, 0, 0, 1014,
		197, 1, 0, 0, 0, 1015, 1013, 1, 0, 0, 0, 1016, 1017, 4, 99, 6, 0, 1017,
		1023, 3, 202, 101, 0, 1018, 1019, 4, 99, 7, 0, 1019, 1023, 3, 200, 100,
		0, 1020, 1021, 4, 99, 8, 0, 1021, 1023, 3, 246, 123, 0, 1022, 1016, 1,
		0, 0, 0, 1022, 1018, 1, 0, 0, 0, 1022, 1020, 1, 0, 0, 0, 1023, 1032, 1,
		0, 0, 0, 1024, 1025, 5, 47, 0, 0, 1025, 1031, 5, 36, 0, 0, 1026, 1031,
		3, 238, 119, 0, 1027, 1031, 3, 240, 120, 0, 1028, 1031, 3, 242, 121, 0,
		1029, 1031, 3, 244, 122, 0, 1030, 1024, 1, 0, 0, 0, 1030, 1026, 1, 0, 0,
		0, 1030, 1027, 1, 0, 0, 0, 1030, 1028, 1, 0, 0, 0, 1030, 1029, 1, 0, 0,
		0, 1031, 1034, 1, 0, 0, 0, 1032, 1030, 1, 0, 0, 0, 1032, 1033, 1, 0, 0,
		0, 1033, 199, 1, 0, 0, 0, 1034, 1032, 1, 0, 0, 0, 1035, 1036, 3, 160, 80,
		0, 1036, 1037, 5, 37, 0, 0, 1037, 1039, 3, 196, 98, 0, 1038, 1040, 5, 44,
		0, 0, 1039, 1038, 1, 0, 0, 0, 1039, 1040, 1, 0, 0, 0, 1040, 1041, 1, 0,
		0, 0, 1041, 1042, 5, 38, 0, 0, 1042, 201, 1, 0, 0, 0, 1043, 1053, 3, 204,
		102, 0, 1044, 1046, 3, 210, 105, 0, 1045, 1047, 3, 162, 81, 0, 1046, 1045,
		1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1053, 1, 0, 0, 0, 1048, 1049,
		5, 37, 0, 0, 1049, 1050, 3, 196, 98, 0, 1050, 1051, 5, 38, 0, 0, 1051,
		1053, 1, 0, 0, 0, 1052, 1043, 1, 0, 0, 0, 1052, 1044, 1, 0, 0, 0, 1052,
		1048, 1, 0, 0, 0, 1053, 203, 1, 0, 0, 0, 1054, 1058, 3, 206, 103, 0, 1055,
		1058, 3, 214, 107, 0, 1056, 1058, 3, 236, 118, 0, 1057, 1054, 1, 0, 0,
		0, 1057, 1055, 1, 0, 0, 0, 1057, 1056, 1, 0, 0, 0, 1058, 205, 1, 0, 0,
		0, 1059, 1064, 5, 18, 0, 0, 1060, 1064, 3, 208, 104, 0, 1061, 1064, 3,
		232, 116, 0, 1062, 1064, 5, 80, 0, 0, 1063, 1059, 1, 0, 0, 0, 1063, 1060,
		1, 0, 0, 0, 1063, 1061, 1, 0, 0, 0, 1063, 1062, 1, 0, 0, 0, 1064, 207,
		1, 0, 0, 0, 1065, 1066, 7, 9, 0, 0, 1066, 209, 1, 0, 0, 0, 1067, 1070,
		5, 36, 0, 0, 1068, 1070, 3, 212, 106, 0, 1069, 1067, 1, 0, 0, 0, 1069,
		1068, 1, 0, 0, 0, 1070, 211, 1, 0, 0, 0, 1071, 1072, 5, 36, 0, 0, 1072,
		1073, 5, 47, 0, 0, 1073, 1074, 5, 36, 0, 0, 1074, 213, 1, 0, 0, 0, 1075,
		1076, 3, 216, 108, 0, 1076, 1077, 3, 218, 109, 0, 1077, 215, 1, 0, 0, 0,
		1078, 1091, 3, 228, 114, 0, 1079, 1091, 3, 168, 84, 0, 1080, 1081, 5, 41,
		0, 0, 1081, 1082, 5, 51, 0, 0, 1082, 1083, 5, 42, 0, 0, 1083, 1091, 3,
		172, 86, 0, 1084, 1091, 3, 178, 89, 0, 1085, 1091, 3, 180, 90, 0, 1086,
		1088, 3, 164, 82, 0, 1087, 1089, 3, 162, 81, 0, 1088, 1087, 1, 0, 0, 0,
		1088, 1089, 1, 0, 0, 0, 1089, 1091, 1, 0, 0, 0, 1090, 1078, 1, 0, 0, 0,
		1090, 1079, 1, 0, 0, 0, 1090, 1080, 1, 0, 0, 0, 1090, 1084, 1, 0, 0, 0,
		1090, 1085, 1, 0, 0, 0, 1090, 1086, 1, 0, 0, 0, 1091, 217, 1, 0, 0, 0,
		1092, 1097, 5, 39, 0, 0, 1093, 1095, 3, 220, 110, 0, 1094, 1096, 5, 44,
		0, 0, 1095, 1094, 1, 0, 0, 0, 1095, 1096, 1, 0, 0, 0, 1096, 1098, 1, 0,
		0, 0, 1097, 1093, 1, 0, 0, 0, 1097, 1098, 1, 0, 0, 0, 1098, 1099, 1, 0,
		0, 0, 1099, 1100, 5, 40, 0, 0, 1100, 219, 1, 0, 0, 0, 1101, 1106, 3, 222,
		111, 0, 1102, 1103, 5, 44, 0, 0, 1103, 1105, 3, 222, 111, 0, 1104, 1102,
		1, 0, 0, 0, 1105, 1108, 1, 0, 0, 0, 1106, 1104, 1, 0, 0, 0, 1106, 1107,
		1, 0, 0, 0, 1107, 221, 1, 0, 0, 0, 1108, 1106, 1, 0, 0, 0, 1109, 1110,
		3, 224, 112, 0, 1110, 1111, 5, 46, 0, 0, 1111, 1113, 1, 0, 0, 0, 1112,
		1109, 1, 0, 0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0, 1114,
		1115, 3, 226, 113, 0, 1115, 223, 1, 0, 0, 0, 1116, 1119, 3, 196, 98, 0,
		1117, 1119, 3, 218, 109, 0, 1118, 1116, 1, 0, 0, 0, 1118, 1117, 1, 0, 0,
		0, 1119, 225, 1, 0, 0, 0, 1120, 1123, 3, 196, 98, 0, 1121, 1123, 3, 218,
		109, 0, 1122, 1120, 1, 0, 0, 0, 1122, 1121, 1, 0, 0, 0, 1123, 227, 1, 0,
		0, 0, 1124, 1125, 5, 23, 0, 0, 1125, 1131, 5, 39, 0, 0, 1126, 1127, 3,
		230, 115, 0, 1127, 1128, 3, 248, 124, 0, 1128, 1130, 1, 0, 0, 0, 1129,
		1126, 1, 0, 0, 0, 1130, 1133, 1, 0, 0, 0, 1131, 1129, 1, 0, 0, 0, 1131,
		1132, 1, 0, 0, 0, 1132, 1134, 1, 0, 0, 0, 1133, 1131, 1, 0, 0, 0, 1134,
		1135, 5, 40, 0, 0, 1135, 229, 1, 0, 0, 0, 1136, 1137, 3, 58, 29, 0, 1137,
		1138, 3, 160, 80, 0, 1138, 1141, 1, 0, 0, 0, 1139, 1141, 3, 234, 117, 0,
		1140, 1136, 1, 0, 0, 0, 1140, 1139, 1, 0, 0, 0, 1141, 1143, 1, 0, 0, 0,
		1142, 1144, 3, 232, 116, 0, 1143, 1142, 1, 0, 0, 0, 1143, 1144, 1, 0, 0,
		0, 1144, 231, 1, 0, 0, 0, 1145, 1146, 7, 10, 0, 0, 1146, 233, 1, 0, 0,
		0, 1147, 1149, 5, 71, 0, 0, 1148, 1147, 1, 0, 0, 0, 1148, 1149, 1, 0, 0,
		0, 1149, 1150, 1, 0, 0, 0, 1150, 1152, 3, 164, 82, 0, 1151, 1153, 3, 162,
		81, 0, 1152, 1151, 1, 0, 0, 0, 1152, 1153, 1, 0, 0, 0, 1153, 235, 1, 0,
		0, 0, 1154, 1155, 5, 11, 0, 0, 1155, 1156, 3, 188, 94, 0, 1156, 1157, 3,
		88, 44, 0, 1157, 237, 1, 0, 0, 0, 1158, 1159, 5, 41, 0, 0, 1159, 1160,
		3, 196, 98, 0, 1160, 1161, 5, 42, 0, 0, 1161, 239, 1, 0, 0, 0, 1162, 1178,
		5, 41, 0, 0, 1163, 1165, 3, 196, 98, 0, 1164, 1163, 1, 0, 0, 0, 1164, 1165,
		1, 0, 0, 0, 1165, 1166, 1, 0, 0, 0, 1166, 1168, 5, 46, 0, 0, 1167, 1169,
		3, 196, 98, 0, 1168, 1167, 1, 0, 0, 0, 1168, 1169, 1, 0, 0, 0, 1169, 1179,
		1, 0, 0, 0, 1170, 1172, 3, 196, 98, 0, 1171, 1170, 1, 0, 0, 0, 1171, 1172,
		1, 0, 0, 0, 1172, 1173, 1, 0, 0, 0, 1173, 1174, 5, 46, 0, 0, 1174, 1175,
		3, 196, 98, 0, 1175, 1176, 5, 46, 0, 0, 1176, 1177, 3, 196, 98, 0, 1177,
		1179, 1, 0, 0, 0, 1178, 1164, 1, 0, 0, 0, 1178, 1171, 1, 0, 0, 0, 1179,
		1180, 1, 0, 0, 0, 1180, 1181, 5, 42, 0, 0, 1181, 241, 1, 0, 0, 0, 1182,
		1183, 5, 47, 0, 0, 1183, 1184, 5, 37, 0, 0, 1184, 1185, 3, 160, 80, 0,
		1185, 1186, 5, 38, 0, 0, 1186, 243, 1, 0, 0, 0, 1187, 1202, 5, 37, 0, 0,
		1188, 1195, 3, 60, 30, 0, 1189, 1192, 3, 160, 80, 0, 1190, 1191, 5, 44,
		0, 0, 1191, 1193, 3, 60, 30, 0, 1192, 1190, 1, 0, 0, 0, 1192, 1193, 1,
		0, 0, 0, 1193, 1195, 1, 0, 0, 0, 1194, 1188, 1, 0, 0, 0, 1194, 1189, 1,
		0, 0, 0, 1195, 1197, 1, 0, 0, 0, 1196, 1198, 5, 51, 0, 0, 1197, 1196, 1,
		0, 0, 0, 1197, 1198, 1, 0, 0, 0, 1198, 1200, 1, 0, 0, 0, 1199, 1201, 5,
		44, 0, 0, 1200, 1199, 1, 0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201, 1203, 1,
		0, 0, 0, 1202, 1194, 1, 0, 0, 0, 1202, 1203, 1, 0, 0, 0, 1203, 1204, 1,
		0, 0, 0, 1204, 1205, 5, 38, 0, 0, 1205, 245, 1, 0, 0, 0, 1206, 1207, 3,
		160, 80, 0, 1207, 1208, 5, 47, 0, 0, 1208, 1209, 5, 36, 0, 0, 1209, 247,
		1, 0, 0, 0, 1210, 1214, 5, 45, 0, 0, 1211, 1214, 5, 99, 0, 0, 1212, 1214,
		4, 124, 9, 0, 1213, 1210, 1, 0, 0, 0, 1213, 1211, 1, 0, 0, 0, 1213, 1212,
		1, 0, 0, 0, 1214, 249, 1, 0, 0, 0, 134, 257, 265, 281, 293, 297, 299, 306,
		316, 322, 329, 346, 355, 361, 370, 376, 380, 386, 390, 396, 400, 406, 410,
		417, 449, 453, 457, 467, 477, 481, 485, 489, 496, 504, 515, 519, 523, 527,
		534, 544, 557, 561, 568, 572, 579, 591, 595, 601, 605, 614, 621, 639, 646,
		662, 673, 677, 681, 685, 703, 709, 711, 715, 719, 722, 726, 728, 734, 746,
		757, 763, 770, 785, 789, 794, 798, 806, 818, 821, 829, 837, 844, 848, 852,
		860, 870, 877, 882, 888, 898, 916, 922, 943, 953, 960, 964, 972, 976, 978,
		983, 986, 994, 1011, 1013, 1022, 1030, 1032, 1039, 1046, 1052, 1057, 1063,
		1069, 1088, 1090, 1095, 1097, 1106, 1112, 1118, 1122, 1131, 1140, 1143,
		1148, 1152, 1164, 1168, 1171, 1178, 1192, 1194, 1197, 1200, 1202, 1213,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ChainParserInit initializes any static state used to implement ChainParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewChainParser(). You can call p function if you wish to initialize the static state ahead
// of time.
func ChainParserInit() {
	staticData := &ChainParserParserStaticData
	staticData.once.Do(chainparserParserInit)
}

// NewChainParser produces a new parser instance for the optional input antlr.TokenStream.
func NewChainParser(input antlr.TokenStream) *ChainParser {
	ChainParserInit()
	p := new(ChainParser)
	p.BaseParser = antlr.NewBaseParser(input)
	staticData := &ChainParserParserStaticData
	p.Interpreter = antlr.NewParserATNSimulator(p, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	p.RuleNames = staticData.RuleNames
	p.LiteralNames = staticData.LiteralNames
	p.SymbolicNames = staticData.SymbolicNames
	p.GrammarFileName = "ChainParser.g4"

	return p
}

// ChainParser tokens.
const (
	ChainParserEOF                    = antlr.TokenEOF
	ChainParserBREAK                  = 1
	ChainParserCASE                   = 2
	ChainParserCHAN                   = 3
	ChainParserCONST                  = 4
	ChainParserCONTINUE               = 5
	ChainParserDEFAULT                = 6
	ChainParserDEFER                  = 7
	ChainParserELSE                   = 8
	ChainParserFALLTHROUGH            = 9
	ChainParserFOR                    = 10
	ChainParserFUNC                   = 11
	ChainParserGO                     = 12
	ChainParserGOTO                   = 13
	ChainParserIF                     = 14
	ChainParserIMPORT                 = 15
	ChainParserINTERFACE              = 16
	ChainParserMAP                    = 17
	ChainParserNIL_LIT                = 18
	ChainParserPACKAGE                = 19
	ChainParserRANGE                  = 20
	ChainParserRETURN                 = 21
	ChainParserSELECT                 = 22
	ChainParserSTRUCT                 = 23
	ChainParserSWITCH                 = 24
	ChainParserTYPE                   = 25
	ChainParserVAR                    = 26
	ChainParserWORKFLOW               = 27
	ChainParserGENERATES              = 28
	ChainParserPREREQUISITE           = 29
	ChainParserNODES                  = 30
	ChainParserBRANCHES               = 31
	ChainParserSUCCESS                = 32
	ChainParserERROR                  = 33
	ChainParserABORT                  = 34
	ChainParserEND                    = 35
	ChainParserIDENTIFIER             = 36
	ChainParserL_PAREN                = 37
	ChainParserR_PAREN                = 38
	ChainParserL_CURLY                = 39
	ChainParserR_CURLY                = 40
	ChainParserL_BRACKET              = 41
	ChainParserR_BRACKET              = 42
	ChainParserASSIGN                 = 43
	ChainParserCOMMA                  = 44
	ChainParserSEMI                   = 45
	ChainParserCOLON                  = 46
	ChainParserDOT                    = 47
	ChainParserPLUS_PLUS              = 48
	ChainParserMINUS_MINUS            = 49
	ChainParserDECLARE_ASSIGN         = 50
	ChainParserELLIPSIS               = 51
	ChainParserLOGICAL_OR             = 52
	ChainParserLOGICAL_AND            = 53
	ChainParserEQUALS                 = 54
	ChainParserNOT_EQUALS             = 55
	ChainParserLESS                   = 56
	ChainParserLESS_OR_EQUALS         = 57
	ChainParserGREATER                = 58
	ChainParserGREATER_OR_EQUALS      = 59
	ChainParserOR                     = 60
	ChainParserDIV                    = 61
	ChainParserMOD                    = 62
	ChainParserLSHIFT                 = 63
	ChainParserRSHIFT                 = 64
	ChainParserBIT_CLEAR              = 65
	ChainParserUNDERLYING             = 66
	ChainParserEXCLAMATION            = 67
	ChainParserPLUS                   = 68
	ChainParserMINUS                  = 69
	ChainParserCARET                  = 70
	ChainParserSTAR                   = 71
	ChainParserAMPERSAND              = 72
	ChainParserRECEIVE                = 73
	ChainParserL_TO_R                 = 74
	ChainParserR_TO_L                 = 75
	ChainParserDECIMAL_LIT            = 76
	ChainParserBINARY_LIT             = 77
	ChainParserOCTAL_LIT              = 78
	ChainParserHEX_LIT                = 79
	ChainParserFLOAT_LIT              = 80
	ChainParserDECIMAL_FLOAT_LIT      = 81
	ChainParserHEX_FLOAT_LIT          = 82
	ChainParserIMAGINARY_LIT          = 83
	ChainParserRUNE_LIT               = 84
	ChainParserBYTE_VALUE             = 85
	ChainParserOCTAL_BYTE_VALUE       = 86
	ChainParserHEX_BYTE_VALUE         = 87
	ChainParserLITTLE_U_VALUE         = 88
	ChainParserBIG_U_VALUE            = 89
	ChainParserRAW_STRING_LIT         = 90
	ChainParserINTERPRETED_STRING_LIT = 91
	ChainParserWS                     = 92
	ChainParserCOMMENT                = 93
	ChainParserTERMINATOR             = 94
	ChainParserLINE_COMMENT           = 95
	ChainParserWS_NLSEMI              = 96
	ChainParserCOMMENT_NLSEMI         = 97
	ChainParserLINE_COMMENT_NLSEMI    = 98
	ChainParserEOS                    = 99
	ChainParserOTHER                  = 100
)

// ChainParser rules.
const (
	ChainParserRULE_sourceFile            = 0
	ChainParserRULE_workflowDefine        = 1
	ChainParserRULE_workflowDeclare       = 2
	ChainParserRULE_workflowParameters    = 3
	ChainParserRULE_workflowBlock         = 4
	ChainParserRULE_prerequisteStatements = 5
	ChainParserRULE_prerequisiteStmt      = 6
	ChainParserRULE_golangEmbedStatement  = 7
	ChainParserRULE_nodesStatements       = 8
	ChainParserRULE_nodeStmt              = 9
	ChainParserRULE_directionStatements   = 10
	ChainParserRULE_successStatements     = 11
	ChainParserRULE_errorStatements       = 12
	ChainParserRULE_abortStatements       = 13
	ChainParserRULE_branchesStatements    = 14
	ChainParserRULE_directionStmt         = 15
	ChainParserRULE_nodeName              = 16
	ChainParserRULE_branchStmt            = 17
	ChainParserRULE_branchDirection       = 18
	ChainParserRULE_chain_eos             = 19
	ChainParserRULE_packageClause         = 20
	ChainParserRULE_packageName           = 21
	ChainParserRULE_identifier            = 22
	ChainParserRULE_importDecl            = 23
	ChainParserRULE_importSpec            = 24
	ChainParserRULE_importPath            = 25
	ChainParserRULE_declaration           = 26
	ChainParserRULE_constDecl             = 27
	ChainParserRULE_constSpec             = 28
	ChainParserRULE_identifierList        = 29
	ChainParserRULE_expressionList        = 30
	ChainParserRULE_typeDecl              = 31
	ChainParserRULE_typeSpec              = 32
	ChainParserRULE_aliasDecl             = 33
	ChainParserRULE_typeDef               = 34
	ChainParserRULE_typeParameters        = 35
	ChainParserRULE_typeParameterDecl     = 36
	ChainParserRULE_typeElement           = 37
	ChainParserRULE_typeTerm              = 38
	ChainParserRULE_functionDecl          = 39
	ChainParserRULE_methodDecl            = 40
	ChainParserRULE_receiver              = 41
	ChainParserRULE_varDecl               = 42
	ChainParserRULE_varSpec               = 43
	ChainParserRULE_block                 = 44
	ChainParserRULE_statementList         = 45
	ChainParserRULE_statement             = 46
	ChainParserRULE_simpleStmt            = 47
	ChainParserRULE_expressionStmt        = 48
	ChainParserRULE_sendStmt              = 49
	ChainParserRULE_incDecStmt            = 50
	ChainParserRULE_assignment            = 51
	ChainParserRULE_assign_op             = 52
	ChainParserRULE_shortVarDecl          = 53
	ChainParserRULE_labeledStmt           = 54
	ChainParserRULE_returnStmt            = 55
	ChainParserRULE_breakStmt             = 56
	ChainParserRULE_continueStmt          = 57
	ChainParserRULE_gotoStmt              = 58
	ChainParserRULE_fallthroughStmt       = 59
	ChainParserRULE_deferStmt             = 60
	ChainParserRULE_ifStmt                = 61
	ChainParserRULE_switchStmt            = 62
	ChainParserRULE_exprSwitchStmt        = 63
	ChainParserRULE_exprCaseClause        = 64
	ChainParserRULE_exprSwitchCase        = 65
	ChainParserRULE_typeSwitchStmt        = 66
	ChainParserRULE_typeSwitchGuard       = 67
	ChainParserRULE_typeCaseClause        = 68
	ChainParserRULE_typeSwitchCase        = 69
	ChainParserRULE_typeList              = 70
	ChainParserRULE_selectStmt            = 71
	ChainParserRULE_commClause            = 72
	ChainParserRULE_commCase              = 73
	ChainParserRULE_recvStmt              = 74
	ChainParserRULE_forStmt               = 75
	ChainParserRULE_condition             = 76
	ChainParserRULE_forClause             = 77
	ChainParserRULE_rangeClause           = 78
	ChainParserRULE_goStmt                = 79
	ChainParserRULE_type_                 = 80
	ChainParserRULE_typeArgs              = 81
	ChainParserRULE_typeName              = 82
	ChainParserRULE_typeLit               = 83
	ChainParserRULE_arrayType             = 84
	ChainParserRULE_arrayLength           = 85
	ChainParserRULE_elementType           = 86
	ChainParserRULE_pointerType           = 87
	ChainParserRULE_interfaceType         = 88
	ChainParserRULE_sliceType             = 89
	ChainParserRULE_mapType               = 90
	ChainParserRULE_channelType           = 91
	ChainParserRULE_methodSpec            = 92
	ChainParserRULE_functionType          = 93
	ChainParserRULE_signature             = 94
	ChainParserRULE_result                = 95
	ChainParserRULE_parameters            = 96
	ChainParserRULE_parameterDecl         = 97
	ChainParserRULE_expression            = 98
	ChainParserRULE_primaryExpr           = 99
	ChainParserRULE_conversion            = 100
	ChainParserRULE_operand               = 101
	ChainParserRULE_literal               = 102
	ChainParserRULE_basicLit              = 103
	ChainParserRULE_integer               = 104
	ChainParserRULE_operandName           = 105
	ChainParserRULE_qualifiedIdent        = 106
	ChainParserRULE_compositeLit          = 107
	ChainParserRULE_literalType           = 108
	ChainParserRULE_literalValue          = 109
	ChainParserRULE_elementList           = 110
	ChainParserRULE_keyedElement          = 111
	ChainParserRULE_key                   = 112
	ChainParserRULE_element               = 113
	ChainParserRULE_structType            = 114
	ChainParserRULE_fieldDecl             = 115
	ChainParserRULE_string_               = 116
	ChainParserRULE_embeddedField         = 117
	ChainParserRULE_functionLit           = 118
	ChainParserRULE_index                 = 119
	ChainParserRULE_slice_                = 120
	ChainParserRULE_typeAssertion         = 121
	ChainParserRULE_arguments             = 122
	ChainParserRULE_methodExpr            = 123
	ChainParserRULE_eos                   = 124
)

// ISourceFileContext is an interface to support dynamic dispatch.
type ISourceFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PackageClause() IPackageClauseContext
	AllEos() []IEosContext
	Eos(i int) IEosContext
	EOF() antlr.TerminalNode
	AllImportDecl() []IImportDeclContext
	ImportDecl(i int) IImportDeclContext
	AllWorkflowDefine() []IWorkflowDefineContext
	WorkflowDefine(i int) IWorkflowDefineContext

	// IsSourceFileContext differentiates from other interfaces.
	IsSourceFileContext()
}

type SourceFileContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceFileContext() *SourceFileContext {
	var p = new(SourceFileContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sourceFile
	return p
}

func InitEmptySourceFileContext(p *SourceFileContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sourceFile
}

func (*SourceFileContext) IsSourceFileContext() {}

func NewSourceFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceFileContext {
	var p = new(SourceFileContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_sourceFile

	return p
}

func (s *SourceFileContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceFileContext) PackageClause() IPackageClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageClauseContext)
}

func (s *SourceFileContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *SourceFileContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *SourceFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(ChainParserEOF, 0)
}

func (s *SourceFileContext) AllImportDecl() []IImportDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportDeclContext); ok {
			len++
		}
	}

	tst := make([]IImportDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportDeclContext); ok {
			tst[i] = t.(IImportDeclContext)
			i++
		}
	}

	return tst
}

func (s *SourceFileContext) ImportDecl(i int) IImportDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportDeclContext)
}

func (s *SourceFileContext) AllWorkflowDefine() []IWorkflowDefineContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWorkflowDefineContext); ok {
			len++
		}
	}

	tst := make([]IWorkflowDefineContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWorkflowDefineContext); ok {
			tst[i] = t.(IWorkflowDefineContext)
			i++
		}
	}

	return tst
}

func (s *SourceFileContext) WorkflowDefine(i int) IWorkflowDefineContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflowDefineContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflowDefineContext)
}

func (s *SourceFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSourceFile(s)
	}
}

func (s *SourceFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSourceFile(s)
	}
}

func (p *ChainParser) SourceFile() (localctx ISourceFileContext) {
	localctx = NewSourceFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ChainParserRULE_sourceFile)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(250)
		p.PackageClause()
	}
	{
		p.SetState(251)
		p.Eos()
	}
	p.SetState(257)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserIMPORT {
		{
			p.SetState(252)
			p.ImportDecl()
		}
		{
			p.SetState(253)
			p.Eos()
		}

		p.SetState(259)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(265)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserWORKFLOW {
		{
			p.SetState(260)
			p.WorkflowDefine()
		}
		{
			p.SetState(261)
			p.Eos()
		}

		p.SetState(267)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(268)
		p.Match(ChainParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWorkflowDefineContext is an interface to support dynamic dispatch.
type IWorkflowDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WORKFLOW() antlr.TerminalNode
	WorkflowDeclare() IWorkflowDeclareContext
	L_CURLY() antlr.TerminalNode
	WorkflowBlock() IWorkflowBlockContext
	R_CURLY() antlr.TerminalNode

	// IsWorkflowDefineContext differentiates from other interfaces.
	IsWorkflowDefineContext()
}

type WorkflowDefineContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflowDefineContext() *WorkflowDefineContext {
	var p = new(WorkflowDefineContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowDefine
	return p
}

func InitEmptyWorkflowDefineContext(p *WorkflowDefineContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowDefine
}

func (*WorkflowDefineContext) IsWorkflowDefineContext() {}

func NewWorkflowDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowDefineContext {
	var p = new(WorkflowDefineContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_workflowDefine

	return p
}

func (s *WorkflowDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowDefineContext) WORKFLOW() antlr.TerminalNode {
	return s.GetToken(ChainParserWORKFLOW, 0)
}

func (s *WorkflowDefineContext) WorkflowDeclare() IWorkflowDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflowDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflowDeclareContext)
}

func (s *WorkflowDefineContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *WorkflowDefineContext) WorkflowBlock() IWorkflowBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflowBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflowBlockContext)
}

func (s *WorkflowDefineContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *WorkflowDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowDefineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterWorkflowDefine(s)
	}
}

func (s *WorkflowDefineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitWorkflowDefine(s)
	}
}

func (p *ChainParser) WorkflowDefine() (localctx IWorkflowDefineContext) {
	localctx = NewWorkflowDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ChainParserRULE_workflowDefine)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(270)
		p.Match(ChainParserWORKFLOW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(271)
		p.WorkflowDeclare()
	}
	{
		p.SetState(272)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(273)
		p.WorkflowBlock()
	}
	{
		p.SetState(274)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWorkflowDeclareContext is an interface to support dynamic dispatch.
type IWorkflowDeclareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWorkflowConstruct returns the workflowConstruct token.
	GetWorkflowConstruct() antlr.Token

	// GetWorkflowName returns the workflowName token.
	GetWorkflowName() antlr.Token

	// SetWorkflowConstruct sets the workflowConstruct token.
	SetWorkflowConstruct(antlr.Token)

	// SetWorkflowName sets the workflowName token.
	SetWorkflowName(antlr.Token)

	// GetWorkflowType returns the workflowType rule contexts.
	GetWorkflowType() ITypeElementContext

	// SetWorkflowType sets the workflowType rule contexts.
	SetWorkflowType(ITypeElementContext)

	// Getter signatures
	L_PAREN() antlr.TerminalNode
	WorkflowParameters() IWorkflowParametersContext
	R_PAREN() antlr.TerminalNode
	L_BRACKET() antlr.TerminalNode
	R_BRACKET() antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	TypeElement() ITypeElementContext
	GENERATES() antlr.TerminalNode

	// IsWorkflowDeclareContext differentiates from other interfaces.
	IsWorkflowDeclareContext()
}

type WorkflowDeclareContext struct {
	antlr.BaseParserRuleContext
	parser            antlr.Parser
	workflowConstruct antlr.Token
	workflowName      antlr.Token
	workflowType      ITypeElementContext
}

func NewEmptyWorkflowDeclareContext() *WorkflowDeclareContext {
	var p = new(WorkflowDeclareContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowDeclare
	return p
}

func InitEmptyWorkflowDeclareContext(p *WorkflowDeclareContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowDeclare
}

func (*WorkflowDeclareContext) IsWorkflowDeclareContext() {}

func NewWorkflowDeclareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowDeclareContext {
	var p = new(WorkflowDeclareContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_workflowDeclare

	return p
}

func (s *WorkflowDeclareContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowDeclareContext) GetWorkflowConstruct() antlr.Token { return s.workflowConstruct }

func (s *WorkflowDeclareContext) GetWorkflowName() antlr.Token { return s.workflowName }

func (s *WorkflowDeclareContext) SetWorkflowConstruct(v antlr.Token) { s.workflowConstruct = v }

func (s *WorkflowDeclareContext) SetWorkflowName(v antlr.Token) { s.workflowName = v }

func (s *WorkflowDeclareContext) GetWorkflowType() ITypeElementContext { return s.workflowType }

func (s *WorkflowDeclareContext) SetWorkflowType(v ITypeElementContext) { s.workflowType = v }

func (s *WorkflowDeclareContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *WorkflowDeclareContext) WorkflowParameters() IWorkflowParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflowParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflowParametersContext)
}

func (s *WorkflowDeclareContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *WorkflowDeclareContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *WorkflowDeclareContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *WorkflowDeclareContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ChainParserIDENTIFIER)
}

func (s *WorkflowDeclareContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, i)
}

func (s *WorkflowDeclareContext) TypeElement() ITypeElementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeElementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeElementContext)
}

func (s *WorkflowDeclareContext) GENERATES() antlr.TerminalNode {
	return s.GetToken(ChainParserGENERATES, 0)
}

func (s *WorkflowDeclareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowDeclareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowDeclareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterWorkflowDeclare(s)
	}
}

func (s *WorkflowDeclareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitWorkflowDeclare(s)
	}
}

func (p *ChainParser) WorkflowDeclare() (localctx IWorkflowDeclareContext) {
	localctx = NewWorkflowDeclareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ChainParserRULE_workflowDeclare)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(276)

		var _m = p.Match(ChainParserIDENTIFIER)

		localctx.(*WorkflowDeclareContext).workflowConstruct = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(277)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(278)
		p.WorkflowParameters()
	}
	{
		p.SetState(279)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserGENERATES {
		{
			p.SetState(280)
			p.Match(ChainParserGENERATES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(283)

		var _m = p.Match(ChainParserIDENTIFIER)

		localctx.(*WorkflowDeclareContext).workflowName = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(284)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(285)

		var _x = p.TypeElement()

		localctx.(*WorkflowDeclareContext).workflowType = _x
	}
	{
		p.SetState(286)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWorkflowParametersContext is an interface to support dynamic dispatch.
type IWorkflowParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllParameterDecl() []IParameterDeclContext
	ParameterDecl(i int) IParameterDeclContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWorkflowParametersContext differentiates from other interfaces.
	IsWorkflowParametersContext()
}

type WorkflowParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflowParametersContext() *WorkflowParametersContext {
	var p = new(WorkflowParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowParameters
	return p
}

func InitEmptyWorkflowParametersContext(p *WorkflowParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowParameters
}

func (*WorkflowParametersContext) IsWorkflowParametersContext() {}

func NewWorkflowParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowParametersContext {
	var p = new(WorkflowParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_workflowParameters

	return p
}

func (s *WorkflowParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowParametersContext) AllParameterDecl() []IParameterDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParameterDeclContext); ok {
			len++
		}
	}

	tst := make([]IParameterDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParameterDeclContext); ok {
			tst[i] = t.(IParameterDeclContext)
			i++
		}
	}

	return tst
}

func (s *WorkflowParametersContext) ParameterDecl(i int) IParameterDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclContext)
}

func (s *WorkflowParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *WorkflowParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *WorkflowParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterWorkflowParameters(s)
	}
}

func (s *WorkflowParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitWorkflowParameters(s)
	}
}

func (p *ChainParser) WorkflowParameters() (localctx IWorkflowParametersContext) {
	localctx = NewWorkflowParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ChainParserRULE_workflowParameters)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(299)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(288)
			p.ParameterDecl()
		}
		p.SetState(293)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(289)
					p.Match(ChainParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(290)
					p.ParameterDecl()
				}

			}
			p.SetState(295)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(297)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserCOMMA {
			{
				p.SetState(296)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWorkflowBlockContext is an interface to support dynamic dispatch.
type IWorkflowBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrerequisteStatements() IPrerequisteStatementsContext
	NodesStatements() INodesStatementsContext
	AllDirectionStatements() []IDirectionStatementsContext
	DirectionStatements(i int) IDirectionStatementsContext

	// IsWorkflowBlockContext differentiates from other interfaces.
	IsWorkflowBlockContext()
}

type WorkflowBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflowBlockContext() *WorkflowBlockContext {
	var p = new(WorkflowBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowBlock
	return p
}

func InitEmptyWorkflowBlockContext(p *WorkflowBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_workflowBlock
}

func (*WorkflowBlockContext) IsWorkflowBlockContext() {}

func NewWorkflowBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowBlockContext {
	var p = new(WorkflowBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_workflowBlock

	return p
}

func (s *WorkflowBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowBlockContext) PrerequisteStatements() IPrerequisteStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrerequisteStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrerequisteStatementsContext)
}

func (s *WorkflowBlockContext) NodesStatements() INodesStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INodesStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INodesStatementsContext)
}

func (s *WorkflowBlockContext) AllDirectionStatements() []IDirectionStatementsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDirectionStatementsContext); ok {
			len++
		}
	}

	tst := make([]IDirectionStatementsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDirectionStatementsContext); ok {
			tst[i] = t.(IDirectionStatementsContext)
			i++
		}
	}

	return tst
}

func (s *WorkflowBlockContext) DirectionStatements(i int) IDirectionStatementsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectionStatementsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectionStatementsContext)
}

func (s *WorkflowBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterWorkflowBlock(s)
	}
}

func (s *WorkflowBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitWorkflowBlock(s)
	}
}

func (p *ChainParser) WorkflowBlock() (localctx IWorkflowBlockContext) {
	localctx = NewWorkflowBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ChainParserRULE_workflowBlock)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(301)
		p.PrerequisteStatements()
	}
	{
		p.SetState(302)
		p.NodesStatements()
	}
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&32212254720) != 0 {
		{
			p.SetState(303)
			p.DirectionStatements()
		}

		p.SetState(308)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrerequisteStatementsContext is an interface to support dynamic dispatch.
type IPrerequisteStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PREREQUISITE() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	PrerequisiteStmt() IPrerequisiteStmtContext
	R_CURLY() antlr.TerminalNode
	AllEOS() []antlr.TerminalNode
	EOS(i int) antlr.TerminalNode

	// IsPrerequisteStatementsContext differentiates from other interfaces.
	IsPrerequisteStatementsContext()
}

type PrerequisteStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrerequisteStatementsContext() *PrerequisteStatementsContext {
	var p = new(PrerequisteStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_prerequisteStatements
	return p
}

func InitEmptyPrerequisteStatementsContext(p *PrerequisteStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_prerequisteStatements
}

func (*PrerequisteStatementsContext) IsPrerequisteStatementsContext() {}

func NewPrerequisteStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrerequisteStatementsContext {
	var p = new(PrerequisteStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_prerequisteStatements

	return p
}

func (s *PrerequisteStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *PrerequisteStatementsContext) PREREQUISITE() antlr.TerminalNode {
	return s.GetToken(ChainParserPREREQUISITE, 0)
}

func (s *PrerequisteStatementsContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *PrerequisteStatementsContext) PrerequisiteStmt() IPrerequisiteStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrerequisiteStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrerequisiteStmtContext)
}

func (s *PrerequisteStatementsContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *PrerequisteStatementsContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(ChainParserEOS)
}

func (s *PrerequisteStatementsContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, i)
}

func (s *PrerequisteStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrerequisteStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrerequisteStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPrerequisteStatements(s)
	}
}

func (s *PrerequisteStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPrerequisteStatements(s)
	}
}

func (p *ChainParser) PrerequisteStatements() (localctx IPrerequisteStatementsContext) {
	localctx = NewPrerequisteStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ChainParserRULE_prerequisteStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(309)
		p.Match(ChainParserPREREQUISITE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(310)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(311)
		p.PrerequisiteStmt()
	}
	{
		p.SetState(312)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserEOS {
		{
			p.SetState(313)
			p.Match(ChainParserEOS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(318)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrerequisiteStmtContext is an interface to support dynamic dispatch.
type IPrerequisiteStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllGolangEmbedStatement() []IGolangEmbedStatementContext
	GolangEmbedStatement(i int) IGolangEmbedStatementContext
	AllEos() []IEosContext
	Eos(i int) IEosContext
	AllSEMI() []antlr.TerminalNode
	SEMI(i int) antlr.TerminalNode
	AllEOS() []antlr.TerminalNode
	EOS(i int) antlr.TerminalNode

	// IsPrerequisiteStmtContext differentiates from other interfaces.
	IsPrerequisiteStmtContext()
}

type PrerequisiteStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrerequisiteStmtContext() *PrerequisiteStmtContext {
	var p = new(PrerequisiteStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_prerequisiteStmt
	return p
}

func InitEmptyPrerequisiteStmtContext(p *PrerequisiteStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_prerequisiteStmt
}

func (*PrerequisiteStmtContext) IsPrerequisiteStmtContext() {}

func NewPrerequisiteStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrerequisiteStmtContext {
	var p = new(PrerequisiteStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_prerequisiteStmt

	return p
}

func (s *PrerequisiteStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *PrerequisiteStmtContext) AllGolangEmbedStatement() []IGolangEmbedStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGolangEmbedStatementContext); ok {
			len++
		}
	}

	tst := make([]IGolangEmbedStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGolangEmbedStatementContext); ok {
			tst[i] = t.(IGolangEmbedStatementContext)
			i++
		}
	}

	return tst
}

func (s *PrerequisiteStmtContext) GolangEmbedStatement(i int) IGolangEmbedStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGolangEmbedStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGolangEmbedStatementContext)
}

func (s *PrerequisiteStmtContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *PrerequisiteStmtContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *PrerequisiteStmtContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(ChainParserSEMI)
}

func (s *PrerequisiteStmtContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserSEMI, i)
}

func (s *PrerequisiteStmtContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(ChainParserEOS)
}

func (s *PrerequisiteStmtContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, i)
}

func (s *PrerequisiteStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrerequisiteStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrerequisiteStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPrerequisiteStmt(s)
	}
}

func (s *PrerequisiteStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPrerequisiteStmt(s)
	}
}

func (p *ChainParser) PrerequisiteStmt() (localctx IPrerequisiteStmtContext) {
	localctx = NewPrerequisiteStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ChainParserRULE_prerequisiteStmt)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(322)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(319)
					p.Match(ChainParserSEMI)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				{
					p.SetState(320)
					p.Match(ChainParserEOS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(324)
				p.GolangEmbedStatement()
			}
			{
				p.SetState(325)
				p.Eos()
			}

		}
		p.SetState(331)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGolangEmbedStatementContext is an interface to support dynamic dispatch.
type IGolangEmbedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declaration() IDeclarationContext
	LabeledStmt() ILabeledStmtContext
	SimpleStmt() ISimpleStmtContext
	GoStmt() IGoStmtContext
	BreakStmt() IBreakStmtContext
	ContinueStmt() IContinueStmtContext
	GotoStmt() IGotoStmtContext
	FallthroughStmt() IFallthroughStmtContext
	Block() IBlockContext
	IfStmt() IIfStmtContext
	SwitchStmt() ISwitchStmtContext
	SelectStmt() ISelectStmtContext
	ForStmt() IForStmtContext
	DeferStmt() IDeferStmtContext

	// IsGolangEmbedStatementContext differentiates from other interfaces.
	IsGolangEmbedStatementContext()
}

type GolangEmbedStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGolangEmbedStatementContext() *GolangEmbedStatementContext {
	var p = new(GolangEmbedStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_golangEmbedStatement
	return p
}

func InitEmptyGolangEmbedStatementContext(p *GolangEmbedStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_golangEmbedStatement
}

func (*GolangEmbedStatementContext) IsGolangEmbedStatementContext() {}

func NewGolangEmbedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GolangEmbedStatementContext {
	var p = new(GolangEmbedStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_golangEmbedStatement

	return p
}

func (s *GolangEmbedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GolangEmbedStatementContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *GolangEmbedStatementContext) LabeledStmt() ILabeledStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledStmtContext)
}

func (s *GolangEmbedStatementContext) SimpleStmt() ISimpleStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *GolangEmbedStatementContext) GoStmt() IGoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *GolangEmbedStatementContext) BreakStmt() IBreakStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *GolangEmbedStatementContext) ContinueStmt() IContinueStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *GolangEmbedStatementContext) GotoStmt() IGotoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGotoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGotoStmtContext)
}

func (s *GolangEmbedStatementContext) FallthroughStmt() IFallthroughStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFallthroughStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *GolangEmbedStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *GolangEmbedStatementContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *GolangEmbedStatementContext) SwitchStmt() ISwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *GolangEmbedStatementContext) SelectStmt() ISelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *GolangEmbedStatementContext) ForStmt() IForStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *GolangEmbedStatementContext) DeferStmt() IDeferStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeferStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *GolangEmbedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GolangEmbedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GolangEmbedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterGolangEmbedStatement(s)
	}
}

func (s *GolangEmbedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitGolangEmbedStatement(s)
	}
}

func (p *ChainParser) GolangEmbedStatement() (localctx IGolangEmbedStatementContext) {
	localctx = NewGolangEmbedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ChainParserRULE_golangEmbedStatement)
	p.SetState(346)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(332)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(333)
			p.LabeledStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(334)
			p.SimpleStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(335)
			p.GoStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(336)
			p.BreakStmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(337)
			p.ContinueStmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(338)
			p.GotoStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(339)
			p.FallthroughStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(340)
			p.Block()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(341)
			p.IfStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(342)
			p.SwitchStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(343)
			p.SelectStmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(344)
			p.ForStmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(345)
			p.DeferStmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INodesStatementsContext is an interface to support dynamic dispatch.
type INodesStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NODES() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllNodeStmt() []INodeStmtContext
	NodeStmt(i int) INodeStmtContext
	AllEos() []IEosContext
	Eos(i int) IEosContext
	AllEOS() []antlr.TerminalNode
	EOS(i int) antlr.TerminalNode

	// IsNodesStatementsContext differentiates from other interfaces.
	IsNodesStatementsContext()
}

type NodesStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNodesStatementsContext() *NodesStatementsContext {
	var p = new(NodesStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodesStatements
	return p
}

func InitEmptyNodesStatementsContext(p *NodesStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodesStatements
}

func (*NodesStatementsContext) IsNodesStatementsContext() {}

func NewNodesStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NodesStatementsContext {
	var p = new(NodesStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_nodesStatements

	return p
}

func (s *NodesStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *NodesStatementsContext) NODES() antlr.TerminalNode {
	return s.GetToken(ChainParserNODES, 0)
}

func (s *NodesStatementsContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *NodesStatementsContext) AllNodeStmt() []INodeStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INodeStmtContext); ok {
			len++
		}
	}

	tst := make([]INodeStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INodeStmtContext); ok {
			tst[i] = t.(INodeStmtContext)
			i++
		}
	}

	return tst
}

func (s *NodesStatementsContext) NodeStmt(i int) INodeStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INodeStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INodeStmtContext)
}

func (s *NodesStatementsContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *NodesStatementsContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *NodesStatementsContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(ChainParserEOS)
}

func (s *NodesStatementsContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, i)
}

func (s *NodesStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NodesStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NodesStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterNodesStatements(s)
	}
}

func (s *NodesStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitNodesStatements(s)
	}
}

func (p *ChainParser) NodesStatements() (localctx INodesStatementsContext) {
	localctx = NewNodesStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ChainParserRULE_nodesStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(348)
		p.Match(ChainParserNODES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(349)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserIDENTIFIER {
		{
			p.SetState(350)
			p.NodeStmt()
		}
		{
			p.SetState(351)
			p.Eos()
		}

		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserEOS {
		{
			p.SetState(358)
			p.Match(ChainParserEOS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(363)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INodeStmtContext is an interface to support dynamic dispatch.
type INodeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdentifierList() IIdentifierListContext

	// IsNodeStmtContext differentiates from other interfaces.
	IsNodeStmtContext()
}

type NodeStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNodeStmtContext() *NodeStmtContext {
	var p = new(NodeStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodeStmt
	return p
}

func InitEmptyNodeStmtContext(p *NodeStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodeStmt
}

func (*NodeStmtContext) IsNodeStmtContext() {}

func NewNodeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NodeStmtContext {
	var p = new(NodeStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_nodeStmt

	return p
}

func (s *NodeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *NodeStmtContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *NodeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NodeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NodeStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterNodeStmt(s)
	}
}

func (s *NodeStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitNodeStmt(s)
	}
}

func (p *ChainParser) NodeStmt() (localctx INodeStmtContext) {
	localctx = NewNodeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ChainParserRULE_nodeStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)
		p.IdentifierList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDirectionStatementsContext is an interface to support dynamic dispatch.
type IDirectionStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SuccessStatements() ISuccessStatementsContext
	ErrorStatements() IErrorStatementsContext
	AbortStatements() IAbortStatementsContext
	BranchesStatements() IBranchesStatementsContext

	// IsDirectionStatementsContext differentiates from other interfaces.
	IsDirectionStatementsContext()
}

type DirectionStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectionStatementsContext() *DirectionStatementsContext {
	var p = new(DirectionStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_directionStatements
	return p
}

func InitEmptyDirectionStatementsContext(p *DirectionStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_directionStatements
}

func (*DirectionStatementsContext) IsDirectionStatementsContext() {}

func NewDirectionStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectionStatementsContext {
	var p = new(DirectionStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_directionStatements

	return p
}

func (s *DirectionStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectionStatementsContext) SuccessStatements() ISuccessStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuccessStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuccessStatementsContext)
}

func (s *DirectionStatementsContext) ErrorStatements() IErrorStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IErrorStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IErrorStatementsContext)
}

func (s *DirectionStatementsContext) AbortStatements() IAbortStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbortStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbortStatementsContext)
}

func (s *DirectionStatementsContext) BranchesStatements() IBranchesStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBranchesStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBranchesStatementsContext)
}

func (s *DirectionStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectionStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectionStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterDirectionStatements(s)
	}
}

func (s *DirectionStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitDirectionStatements(s)
	}
}

func (p *ChainParser) DirectionStatements() (localctx IDirectionStatementsContext) {
	localctx = NewDirectionStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ChainParserRULE_directionStatements)
	p.SetState(370)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserSUCCESS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(366)
			p.SuccessStatements()
		}

	case ChainParserERROR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(367)
			p.ErrorStatements()
		}

	case ChainParserABORT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(368)
			p.AbortStatements()
		}

	case ChainParserBRANCHES:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(369)
			p.BranchesStatements()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISuccessStatementsContext is an interface to support dynamic dispatch.
type ISuccessStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SUCCESS() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllDirectionStmt() []IDirectionStmtContext
	DirectionStmt(i int) IDirectionStmtContext
	AllChain_eos() []IChain_eosContext
	Chain_eos(i int) IChain_eosContext

	// IsSuccessStatementsContext differentiates from other interfaces.
	IsSuccessStatementsContext()
}

type SuccessStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuccessStatementsContext() *SuccessStatementsContext {
	var p = new(SuccessStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_successStatements
	return p
}

func InitEmptySuccessStatementsContext(p *SuccessStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_successStatements
}

func (*SuccessStatementsContext) IsSuccessStatementsContext() {}

func NewSuccessStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuccessStatementsContext {
	var p = new(SuccessStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_successStatements

	return p
}

func (s *SuccessStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *SuccessStatementsContext) SUCCESS() antlr.TerminalNode {
	return s.GetToken(ChainParserSUCCESS, 0)
}

func (s *SuccessStatementsContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *SuccessStatementsContext) AllDirectionStmt() []IDirectionStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			len++
		}
	}

	tst := make([]IDirectionStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDirectionStmtContext); ok {
			tst[i] = t.(IDirectionStmtContext)
			i++
		}
	}

	return tst
}

func (s *SuccessStatementsContext) DirectionStmt(i int) IDirectionStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectionStmtContext)
}

func (s *SuccessStatementsContext) AllChain_eos() []IChain_eosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChain_eosContext); ok {
			len++
		}
	}

	tst := make([]IChain_eosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChain_eosContext); ok {
			tst[i] = t.(IChain_eosContext)
			i++
		}
	}

	return tst
}

func (s *SuccessStatementsContext) Chain_eos(i int) IChain_eosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChain_eosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChain_eosContext)
}

func (s *SuccessStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuccessStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuccessStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSuccessStatements(s)
	}
}

func (s *SuccessStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSuccessStatements(s)
	}
}

func (p *ChainParser) SuccessStatements() (localctx ISuccessStatementsContext) {
	localctx = NewSuccessStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ChainParserRULE_successStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(372)
		p.Match(ChainParserSUCCESS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(373)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ChainParserEND || _la == ChainParserIDENTIFIER {
		{
			p.SetState(374)
			p.DirectionStmt()
		}
		p.SetState(376)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserEOS {
			{
				p.SetState(375)
				p.Chain_eos()
			}

		}

		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IErrorStatementsContext is an interface to support dynamic dispatch.
type IErrorStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ERROR() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllDirectionStmt() []IDirectionStmtContext
	DirectionStmt(i int) IDirectionStmtContext
	AllChain_eos() []IChain_eosContext
	Chain_eos(i int) IChain_eosContext

	// IsErrorStatementsContext differentiates from other interfaces.
	IsErrorStatementsContext()
}

type ErrorStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyErrorStatementsContext() *ErrorStatementsContext {
	var p = new(ErrorStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_errorStatements
	return p
}

func InitEmptyErrorStatementsContext(p *ErrorStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_errorStatements
}

func (*ErrorStatementsContext) IsErrorStatementsContext() {}

func NewErrorStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ErrorStatementsContext {
	var p = new(ErrorStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_errorStatements

	return p
}

func (s *ErrorStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *ErrorStatementsContext) ERROR() antlr.TerminalNode {
	return s.GetToken(ChainParserERROR, 0)
}

func (s *ErrorStatementsContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *ErrorStatementsContext) AllDirectionStmt() []IDirectionStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			len++
		}
	}

	tst := make([]IDirectionStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDirectionStmtContext); ok {
			tst[i] = t.(IDirectionStmtContext)
			i++
		}
	}

	return tst
}

func (s *ErrorStatementsContext) DirectionStmt(i int) IDirectionStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectionStmtContext)
}

func (s *ErrorStatementsContext) AllChain_eos() []IChain_eosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChain_eosContext); ok {
			len++
		}
	}

	tst := make([]IChain_eosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChain_eosContext); ok {
			tst[i] = t.(IChain_eosContext)
			i++
		}
	}

	return tst
}

func (s *ErrorStatementsContext) Chain_eos(i int) IChain_eosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChain_eosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChain_eosContext)
}

func (s *ErrorStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ErrorStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ErrorStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterErrorStatements(s)
	}
}

func (s *ErrorStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitErrorStatements(s)
	}
}

func (p *ChainParser) ErrorStatements() (localctx IErrorStatementsContext) {
	localctx = NewErrorStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ChainParserRULE_errorStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(382)
		p.Match(ChainParserERROR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(383)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ChainParserEND || _la == ChainParserIDENTIFIER {
		{
			p.SetState(384)
			p.DirectionStmt()
		}
		p.SetState(386)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserEOS {
			{
				p.SetState(385)
				p.Chain_eos()
			}

		}

		p.SetState(390)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbortStatementsContext is an interface to support dynamic dispatch.
type IAbortStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllDirectionStmt() []IDirectionStmtContext
	DirectionStmt(i int) IDirectionStmtContext
	AllChain_eos() []IChain_eosContext
	Chain_eos(i int) IChain_eosContext

	// IsAbortStatementsContext differentiates from other interfaces.
	IsAbortStatementsContext()
}

type AbortStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbortStatementsContext() *AbortStatementsContext {
	var p = new(AbortStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_abortStatements
	return p
}

func InitEmptyAbortStatementsContext(p *AbortStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_abortStatements
}

func (*AbortStatementsContext) IsAbortStatementsContext() {}

func NewAbortStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbortStatementsContext {
	var p = new(AbortStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_abortStatements

	return p
}

func (s *AbortStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *AbortStatementsContext) ABORT() antlr.TerminalNode {
	return s.GetToken(ChainParserABORT, 0)
}

func (s *AbortStatementsContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *AbortStatementsContext) AllDirectionStmt() []IDirectionStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			len++
		}
	}

	tst := make([]IDirectionStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDirectionStmtContext); ok {
			tst[i] = t.(IDirectionStmtContext)
			i++
		}
	}

	return tst
}

func (s *AbortStatementsContext) DirectionStmt(i int) IDirectionStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDirectionStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDirectionStmtContext)
}

func (s *AbortStatementsContext) AllChain_eos() []IChain_eosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChain_eosContext); ok {
			len++
		}
	}

	tst := make([]IChain_eosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChain_eosContext); ok {
			tst[i] = t.(IChain_eosContext)
			i++
		}
	}

	return tst
}

func (s *AbortStatementsContext) Chain_eos(i int) IChain_eosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChain_eosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChain_eosContext)
}

func (s *AbortStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbortStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbortStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterAbortStatements(s)
	}
}

func (s *AbortStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitAbortStatements(s)
	}
}

func (p *ChainParser) AbortStatements() (localctx IAbortStatementsContext) {
	localctx = NewAbortStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ChainParserRULE_abortStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(392)
		p.Match(ChainParserABORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(393)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ChainParserEND || _la == ChainParserIDENTIFIER {
		{
			p.SetState(394)
			p.DirectionStmt()
		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserEOS {
			{
				p.SetState(395)
				p.Chain_eos()
			}

		}

		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBranchesStatementsContext is an interface to support dynamic dispatch.
type IBranchesStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BRANCHES() antlr.TerminalNode
	COLON() antlr.TerminalNode
	AllBranchStmt() []IBranchStmtContext
	BranchStmt(i int) IBranchStmtContext
	AllChain_eos() []IChain_eosContext
	Chain_eos(i int) IChain_eosContext

	// IsBranchesStatementsContext differentiates from other interfaces.
	IsBranchesStatementsContext()
}

type BranchesStatementsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchesStatementsContext() *BranchesStatementsContext {
	var p = new(BranchesStatementsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchesStatements
	return p
}

func InitEmptyBranchesStatementsContext(p *BranchesStatementsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchesStatements
}

func (*BranchesStatementsContext) IsBranchesStatementsContext() {}

func NewBranchesStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchesStatementsContext {
	var p = new(BranchesStatementsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_branchesStatements

	return p
}

func (s *BranchesStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchesStatementsContext) BRANCHES() antlr.TerminalNode {
	return s.GetToken(ChainParserBRANCHES, 0)
}

func (s *BranchesStatementsContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *BranchesStatementsContext) AllBranchStmt() []IBranchStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBranchStmtContext); ok {
			len++
		}
	}

	tst := make([]IBranchStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBranchStmtContext); ok {
			tst[i] = t.(IBranchStmtContext)
			i++
		}
	}

	return tst
}

func (s *BranchesStatementsContext) BranchStmt(i int) IBranchStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBranchStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBranchStmtContext)
}

func (s *BranchesStatementsContext) AllChain_eos() []IChain_eosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChain_eosContext); ok {
			len++
		}
	}

	tst := make([]IChain_eosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChain_eosContext); ok {
			tst[i] = t.(IChain_eosContext)
			i++
		}
	}

	return tst
}

func (s *BranchesStatementsContext) Chain_eos(i int) IChain_eosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChain_eosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChain_eosContext)
}

func (s *BranchesStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchesStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchesStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBranchesStatements(s)
	}
}

func (s *BranchesStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBranchesStatements(s)
	}
}

func (p *ChainParser) BranchesStatements() (localctx IBranchesStatementsContext) {
	localctx = NewBranchesStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ChainParserRULE_branchesStatements)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)
		p.Match(ChainParserBRANCHES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(403)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(408)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ChainParserIDENTIFIER {
		{
			p.SetState(404)
			p.BranchStmt()
		}
		p.SetState(406)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserEOS {
			{
				p.SetState(405)
				p.Chain_eos()
			}

		}

		p.SetState(410)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDirectionStmtContext is an interface to support dynamic dispatch.
type IDirectionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDirection returns the direction token.
	GetDirection() antlr.Token

	// SetDirection sets the direction token.
	SetDirection(antlr.Token)

	// Getter signatures
	AllNodeName() []INodeNameContext
	NodeName(i int) INodeNameContext
	AllL_TO_R() []antlr.TerminalNode
	L_TO_R(i int) antlr.TerminalNode
	AllR_TO_L() []antlr.TerminalNode
	R_TO_L(i int) antlr.TerminalNode

	// IsDirectionStmtContext differentiates from other interfaces.
	IsDirectionStmtContext()
}

type DirectionStmtContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	direction antlr.Token
}

func NewEmptyDirectionStmtContext() *DirectionStmtContext {
	var p = new(DirectionStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_directionStmt
	return p
}

func InitEmptyDirectionStmtContext(p *DirectionStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_directionStmt
}

func (*DirectionStmtContext) IsDirectionStmtContext() {}

func NewDirectionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectionStmtContext {
	var p = new(DirectionStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_directionStmt

	return p
}

func (s *DirectionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectionStmtContext) GetDirection() antlr.Token { return s.direction }

func (s *DirectionStmtContext) SetDirection(v antlr.Token) { s.direction = v }

func (s *DirectionStmtContext) AllNodeName() []INodeNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INodeNameContext); ok {
			len++
		}
	}

	tst := make([]INodeNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INodeNameContext); ok {
			tst[i] = t.(INodeNameContext)
			i++
		}
	}

	return tst
}

func (s *DirectionStmtContext) NodeName(i int) INodeNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INodeNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INodeNameContext)
}

func (s *DirectionStmtContext) AllL_TO_R() []antlr.TerminalNode {
	return s.GetTokens(ChainParserL_TO_R)
}

func (s *DirectionStmtContext) L_TO_R(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserL_TO_R, i)
}

func (s *DirectionStmtContext) AllR_TO_L() []antlr.TerminalNode {
	return s.GetTokens(ChainParserR_TO_L)
}

func (s *DirectionStmtContext) R_TO_L(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserR_TO_L, i)
}

func (s *DirectionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectionStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterDirectionStmt(s)
	}
}

func (s *DirectionStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitDirectionStmt(s)
	}
}

func (p *ChainParser) DirectionStmt() (localctx IDirectionStmtContext) {
	localctx = NewDirectionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ChainParserRULE_directionStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(412)
		p.NodeName()
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserL_TO_R || _la == ChainParserR_TO_L {
		{
			p.SetState(413)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DirectionStmtContext).direction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ChainParserL_TO_R || _la == ChainParserR_TO_L) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DirectionStmtContext).direction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(414)
			p.NodeName()
		}

		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INodeNameContext is an interface to support dynamic dispatch.
type INodeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	END() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsNodeNameContext differentiates from other interfaces.
	IsNodeNameContext()
}

type NodeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNodeNameContext() *NodeNameContext {
	var p = new(NodeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodeName
	return p
}

func InitEmptyNodeNameContext(p *NodeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_nodeName
}

func (*NodeNameContext) IsNodeNameContext() {}

func NewNodeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NodeNameContext {
	var p = new(NodeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_nodeName

	return p
}

func (s *NodeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NodeNameContext) END() antlr.TerminalNode {
	return s.GetToken(ChainParserEND, 0)
}

func (s *NodeNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *NodeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NodeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NodeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterNodeName(s)
	}
}

func (s *NodeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitNodeName(s)
	}
}

func (p *ChainParser) NodeName() (localctx INodeNameContext) {
	localctx = NewNodeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ChainParserRULE_nodeName)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ChainParserEND || _la == ChainParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBranchStmtContext is an interface to support dynamic dispatch.
type IBranchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	BranchDirection() IBranchDirectionContext
	NodeName() INodeNameContext

	// IsBranchStmtContext differentiates from other interfaces.
	IsBranchStmtContext()
}

type BranchStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchStmtContext() *BranchStmtContext {
	var p = new(BranchStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchStmt
	return p
}

func InitEmptyBranchStmtContext(p *BranchStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchStmt
}

func (*BranchStmtContext) IsBranchStmtContext() {}

func NewBranchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchStmtContext {
	var p = new(BranchStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_branchStmt

	return p
}

func (s *BranchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *BranchStmtContext) BranchDirection() IBranchDirectionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBranchDirectionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBranchDirectionContext)
}

func (s *BranchStmtContext) NodeName() INodeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INodeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INodeNameContext)
}

func (s *BranchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBranchStmt(s)
	}
}

func (s *BranchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBranchStmt(s)
	}
}

func (p *ChainParser) BranchStmt() (localctx IBranchStmtContext) {
	localctx = NewBranchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ChainParserRULE_branchStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(422)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(423)
		p.BranchDirection()
	}
	{
		p.SetState(424)
		p.NodeName()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBranchDirectionContext is an interface to support dynamic dispatch.
type IBranchDirectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMINUS() []antlr.TerminalNode
	MINUS(i int) antlr.TerminalNode
	String_() IString_Context
	GREATER() antlr.TerminalNode

	// IsBranchDirectionContext differentiates from other interfaces.
	IsBranchDirectionContext()
}

type BranchDirectionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchDirectionContext() *BranchDirectionContext {
	var p = new(BranchDirectionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchDirection
	return p
}

func InitEmptyBranchDirectionContext(p *BranchDirectionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_branchDirection
}

func (*BranchDirectionContext) IsBranchDirectionContext() {}

func NewBranchDirectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchDirectionContext {
	var p = new(BranchDirectionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_branchDirection

	return p
}

func (s *BranchDirectionContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchDirectionContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(ChainParserMINUS)
}

func (s *BranchDirectionContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserMINUS, i)
}

func (s *BranchDirectionContext) String_() IString_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *BranchDirectionContext) GREATER() antlr.TerminalNode {
	return s.GetToken(ChainParserGREATER, 0)
}

func (s *BranchDirectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchDirectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchDirectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBranchDirection(s)
	}
}

func (s *BranchDirectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBranchDirection(s)
	}
}

func (p *ChainParser) BranchDirection() (localctx IBranchDirectionContext) {
	localctx = NewBranchDirectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ChainParserRULE_branchDirection)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(426)
		p.Match(ChainParserMINUS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(427)
		p.String_()
	}
	{
		p.SetState(428)
		p.Match(ChainParserMINUS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(429)
		p.Match(ChainParserGREATER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChain_eosContext is an interface to support dynamic dispatch.
type IChain_eosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOS() antlr.TerminalNode

	// IsChain_eosContext differentiates from other interfaces.
	IsChain_eosContext()
}

type Chain_eosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChain_eosContext() *Chain_eosContext {
	var p = new(Chain_eosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_chain_eos
	return p
}

func InitEmptyChain_eosContext(p *Chain_eosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_chain_eos
}

func (*Chain_eosContext) IsChain_eosContext() {}

func NewChain_eosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Chain_eosContext {
	var p = new(Chain_eosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_chain_eos

	return p
}

func (s *Chain_eosContext) GetParser() antlr.Parser { return s.parser }

func (s *Chain_eosContext) EOS() antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, 0)
}

func (s *Chain_eosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Chain_eosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Chain_eosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterChain_eos(s)
	}
}

func (s *Chain_eosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitChain_eos(s)
	}
}

func (p *ChainParser) Chain_eos() (localctx IChain_eosContext) {
	localctx = NewChain_eosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ChainParserRULE_chain_eos)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(431)
		p.Match(ChainParserEOS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageClauseContext is an interface to support dynamic dispatch.
type IPackageClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PACKAGE() antlr.TerminalNode
	PackageName() IPackageNameContext

	// IsPackageClauseContext differentiates from other interfaces.
	IsPackageClauseContext()
}

type PackageClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageClauseContext() *PackageClauseContext {
	var p = new(PackageClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_packageClause
	return p
}

func InitEmptyPackageClauseContext(p *PackageClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_packageClause
}

func (*PackageClauseContext) IsPackageClauseContext() {}

func NewPackageClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageClauseContext {
	var p = new(PackageClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_packageClause

	return p
}

func (s *PackageClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageClauseContext) PACKAGE() antlr.TerminalNode {
	return s.GetToken(ChainParserPACKAGE, 0)
}

func (s *PackageClauseContext) PackageName() IPackageNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *PackageClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPackageClause(s)
	}
}

func (s *PackageClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPackageClause(s)
	}
}

func (p *ChainParser) PackageClause() (localctx IPackageClauseContext) {
	localctx = NewPackageClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ChainParserRULE_packageClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(433)
		p.Match(ChainParserPACKAGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(434)
		p.PackageName()
	}
	p.myreset()

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageNameContext is an interface to support dynamic dispatch.
type IPackageNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsPackageNameContext differentiates from other interfaces.
	IsPackageNameContext()
}

type PackageNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNameContext() *PackageNameContext {
	var p = new(PackageNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_packageName
	return p
}

func InitEmptyPackageNameContext(p *PackageNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_packageName
}

func (*PackageNameContext) IsPackageNameContext() {}

func NewPackageNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNameContext {
	var p = new(PackageNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_packageName

	return p
}

func (s *PackageNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PackageNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPackageName(s)
	}
}

func (s *PackageNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPackageName(s)
	}
}

func (p *ChainParser) PackageName() (localctx IPackageNameContext) {
	localctx = NewPackageNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ChainParserRULE_packageName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(437)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *ChainParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ChainParserRULE_identifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(439)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportDeclContext is an interface to support dynamic dispatch.
type IImportDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	AllImportSpec() []IImportSpecContext
	ImportSpec(i int) IImportSpecContext
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllEos() []IEosContext
	Eos(i int) IEosContext

	// IsImportDeclContext differentiates from other interfaces.
	IsImportDeclContext()
}

type ImportDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclContext() *ImportDeclContext {
	var p = new(ImportDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importDecl
	return p
}

func InitEmptyImportDeclContext(p *ImportDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importDecl
}

func (*ImportDeclContext) IsImportDeclContext() {}

func NewImportDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclContext {
	var p = new(ImportDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_importDecl

	return p
}

func (s *ImportDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(ChainParserIMPORT, 0)
}

func (s *ImportDeclContext) AllImportSpec() []IImportSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportSpecContext); ok {
			len++
		}
	}

	tst := make([]IImportSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportSpecContext); ok {
			tst[i] = t.(IImportSpecContext)
			i++
		}
	}

	return tst
}

func (s *ImportDeclContext) ImportSpec(i int) IImportSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportSpecContext)
}

func (s *ImportDeclContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *ImportDeclContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *ImportDeclContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *ImportDeclContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ImportDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterImportDecl(s)
	}
}

func (s *ImportDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitImportDecl(s)
	}
}

func (p *ChainParser) ImportDecl() (localctx IImportDeclContext) {
	localctx = NewImportDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ChainParserRULE_importDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(441)
		p.Match(ChainParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserIDENTIFIER, ChainParserDOT, ChainParserRAW_STRING_LIT, ChainParserINTERPRETED_STRING_LIT:
		{
			p.SetState(442)
			p.ImportSpec()
		}

	case ChainParserL_PAREN:
		{
			p.SetState(443)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(449)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-36)) & ^0x3f) == 0 && ((int64(1)<<(_la-36))&54043195528448001) != 0 {
			{
				p.SetState(444)
				p.ImportSpec()
			}
			{
				p.SetState(445)
				p.Eos()
			}

			p.SetState(451)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(452)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportSpecContext is an interface to support dynamic dispatch.
type IImportSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ImportPath() IImportPathContext
	DOT() antlr.TerminalNode
	PackageName() IPackageNameContext

	// IsImportSpecContext differentiates from other interfaces.
	IsImportSpecContext()
}

type ImportSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportSpecContext() *ImportSpecContext {
	var p = new(ImportSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importSpec
	return p
}

func InitEmptyImportSpecContext(p *ImportSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importSpec
}

func (*ImportSpecContext) IsImportSpecContext() {}

func NewImportSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportSpecContext {
	var p = new(ImportSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_importSpec

	return p
}

func (s *ImportSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportSpecContext) ImportPath() IImportPathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportPathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportSpecContext) DOT() antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, 0)
}

func (s *ImportSpecContext) PackageName() IPackageNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *ImportSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterImportSpec(s)
	}
}

func (s *ImportSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitImportSpec(s)
	}
}

func (p *ChainParser) ImportSpec() (localctx IImportSpecContext) {
	localctx = NewImportSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ChainParserRULE_importSpec)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case ChainParserDOT:
		{
			p.SetState(455)
			p.Match(ChainParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ChainParserIDENTIFIER:
		{
			p.SetState(456)
			p.PackageName()
		}

	case ChainParserRAW_STRING_LIT, ChainParserINTERPRETED_STRING_LIT:

	default:
	}
	{
		p.SetState(459)
		p.ImportPath()
	}
	p.addImportSpec()

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_() IString_Context

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importPath
	return p
}

func InitEmptyImportPathContext(p *ImportPathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_importPath
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) String_() IString_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterImportPath(s)
	}
}

func (s *ImportPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitImportPath(s)
	}
}

func (p *ChainParser) ImportPath() (localctx IImportPathContext) {
	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ChainParserRULE_importPath)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(462)
		p.String_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConstDecl() IConstDeclContext
	TypeDecl() ITypeDeclContext
	VarDecl() IVarDeclContext

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_declaration
	return p
}

func InitEmptyDeclarationContext(p *DeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_declaration
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) ConstDecl() IConstDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstDeclContext)
}

func (s *DeclarationContext) TypeDecl() ITypeDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeDeclContext)
}

func (s *DeclarationContext) VarDecl() IVarDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarDeclContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (p *ChainParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ChainParserRULE_declaration)
	p.SetState(467)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserCONST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(464)
			p.ConstDecl()
		}

	case ChainParserTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(465)
			p.TypeDecl()
		}

	case ChainParserVAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(466)
			p.VarDecl()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstDeclContext is an interface to support dynamic dispatch.
type IConstDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONST() antlr.TerminalNode
	AllConstSpec() []IConstSpecContext
	ConstSpec(i int) IConstSpecContext
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllEos() []IEosContext
	Eos(i int) IEosContext

	// IsConstDeclContext differentiates from other interfaces.
	IsConstDeclContext()
}

type ConstDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstDeclContext() *ConstDeclContext {
	var p = new(ConstDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_constDecl
	return p
}

func InitEmptyConstDeclContext(p *ConstDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_constDecl
}

func (*ConstDeclContext) IsConstDeclContext() {}

func NewConstDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstDeclContext {
	var p = new(ConstDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_constDecl

	return p
}

func (s *ConstDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstDeclContext) CONST() antlr.TerminalNode {
	return s.GetToken(ChainParserCONST, 0)
}

func (s *ConstDeclContext) AllConstSpec() []IConstSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConstSpecContext); ok {
			len++
		}
	}

	tst := make([]IConstSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConstSpecContext); ok {
			tst[i] = t.(IConstSpecContext)
			i++
		}
	}

	return tst
}

func (s *ConstDeclContext) ConstSpec(i int) IConstSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstSpecContext)
}

func (s *ConstDeclContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *ConstDeclContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *ConstDeclContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *ConstDeclContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ConstDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterConstDecl(s)
	}
}

func (s *ConstDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitConstDecl(s)
	}
}

func (p *ChainParser) ConstDecl() (localctx IConstDeclContext) {
	localctx = NewConstDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ChainParserRULE_constDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(469)
		p.Match(ChainParserCONST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(481)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserIDENTIFIER:
		{
			p.SetState(470)
			p.ConstSpec()
		}

	case ChainParserL_PAREN:
		{
			p.SetState(471)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ChainParserIDENTIFIER {
			{
				p.SetState(472)
				p.ConstSpec()
			}
			{
				p.SetState(473)
				p.Eos()
			}

			p.SetState(479)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(480)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstSpecContext is an interface to support dynamic dispatch.
type IConstSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdentifierList() IIdentifierListContext
	ASSIGN() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	Type_() IType_Context

	// IsConstSpecContext differentiates from other interfaces.
	IsConstSpecContext()
}

type ConstSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstSpecContext() *ConstSpecContext {
	var p = new(ConstSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_constSpec
	return p
}

func InitEmptyConstSpecContext(p *ConstSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_constSpec
}

func (*ConstSpecContext) IsConstSpecContext() {}

func NewConstSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstSpecContext {
	var p = new(ConstSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_constSpec

	return p
}

func (s *ConstSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstSpecContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ConstSpecContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *ConstSpecContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ConstSpecContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConstSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterConstSpec(s)
	}
}

func (s *ConstSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitConstSpec(s)
	}
}

func (p *ChainParser) ConstSpec() (localctx IConstSpecContext) {
	localctx = NewConstSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ChainParserRULE_constSpec)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(483)
		p.IdentifierList()
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
		p.SetState(485)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(484)
				p.Type_()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(487)
			p.Match(ChainParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(488)
			p.ExpressionList()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_identifierList
	return p
}

func InitEmptyIdentifierListContext(p *IdentifierListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_identifierList
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ChainParserIDENTIFIER)
}

func (s *IdentifierListContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, i)
}

func (s *IdentifierListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *IdentifierListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (p *ChainParser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ChainParserRULE_identifierList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(491)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(492)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(493)
				p.Match(ChainParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expressionList
	return p
}

func InitEmptyExpressionListContext(p *ExpressionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expressionList
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *ExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (p *ChainParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ChainParserRULE_expressionList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(499)
		p.expression(0)
	}
	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(500)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(501)
				p.expression(0)
			}

		}
		p.SetState(506)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeDeclContext is an interface to support dynamic dispatch.
type ITypeDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TYPE() antlr.TerminalNode
	AllTypeSpec() []ITypeSpecContext
	TypeSpec(i int) ITypeSpecContext
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllEos() []IEosContext
	Eos(i int) IEosContext

	// IsTypeDeclContext differentiates from other interfaces.
	IsTypeDeclContext()
}

type TypeDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDeclContext() *TypeDeclContext {
	var p = new(TypeDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeDecl
	return p
}

func InitEmptyTypeDeclContext(p *TypeDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeDecl
}

func (*TypeDeclContext) IsTypeDeclContext() {}

func NewTypeDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDeclContext {
	var p = new(TypeDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeDecl

	return p
}

func (s *TypeDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDeclContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ChainParserTYPE, 0)
}

func (s *TypeDeclContext) AllTypeSpec() []ITypeSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeSpecContext); ok {
			len++
		}
	}

	tst := make([]ITypeSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeSpecContext); ok {
			tst[i] = t.(ITypeSpecContext)
			i++
		}
	}

	return tst
}

func (s *TypeDeclContext) TypeSpec(i int) ITypeSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecContext)
}

func (s *TypeDeclContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *TypeDeclContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *TypeDeclContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *TypeDeclContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *TypeDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeDecl(s)
	}
}

func (s *TypeDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeDecl(s)
	}
}

func (p *ChainParser) TypeDecl() (localctx ITypeDeclContext) {
	localctx = NewTypeDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ChainParserRULE_typeDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(507)
		p.Match(ChainParserTYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserIDENTIFIER:
		{
			p.SetState(508)
			p.TypeSpec()
		}

	case ChainParserL_PAREN:
		{
			p.SetState(509)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(515)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ChainParserIDENTIFIER {
			{
				p.SetState(510)
				p.TypeSpec()
			}
			{
				p.SetState(511)
				p.Eos()
			}

			p.SetState(517)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(518)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSpecContext is an interface to support dynamic dispatch.
type ITypeSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AliasDecl() IAliasDeclContext
	TypeDef() ITypeDefContext

	// IsTypeSpecContext differentiates from other interfaces.
	IsTypeSpecContext()
}

type TypeSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecContext() *TypeSpecContext {
	var p = new(TypeSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSpec
	return p
}

func InitEmptyTypeSpecContext(p *TypeSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSpec
}

func (*TypeSpecContext) IsTypeSpecContext() {}

func NewTypeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecContext {
	var p = new(TypeSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeSpec

	return p
}

func (s *TypeSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecContext) AliasDecl() IAliasDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasDeclContext)
}

func (s *TypeSpecContext) TypeDef() ITypeDefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeDefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeDefContext)
}

func (s *TypeSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeSpec(s)
	}
}

func (s *TypeSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeSpec(s)
	}
}

func (p *ChainParser) TypeSpec() (localctx ITypeSpecContext) {
	localctx = NewTypeSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ChainParserRULE_typeSpec)
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(521)
			p.AliasDecl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(522)
			p.TypeDef()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasDeclContext is an interface to support dynamic dispatch.
type IAliasDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	Type_() IType_Context
	TypeParameters() ITypeParametersContext

	// IsAliasDeclContext differentiates from other interfaces.
	IsAliasDeclContext()
}

type AliasDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasDeclContext() *AliasDeclContext {
	var p = new(AliasDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_aliasDecl
	return p
}

func InitEmptyAliasDeclContext(p *AliasDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_aliasDecl
}

func (*AliasDeclContext) IsAliasDeclContext() {}

func NewAliasDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasDeclContext {
	var p = new(AliasDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_aliasDecl

	return p
}

func (s *AliasDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasDeclContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *AliasDeclContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *AliasDeclContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *AliasDeclContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *AliasDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterAliasDecl(s)
	}
}

func (s *AliasDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitAliasDecl(s)
	}
}

func (p *ChainParser) AliasDecl() (localctx IAliasDeclContext) {
	localctx = NewAliasDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ChainParserRULE_aliasDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(525)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserL_BRACKET {
		{
			p.SetState(526)
			p.TypeParameters()
		}

	}
	{
		p.SetState(529)
		p.Match(ChainParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(530)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeDefContext is an interface to support dynamic dispatch.
type ITypeDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Type_() IType_Context
	TypeParameters() ITypeParametersContext

	// IsTypeDefContext differentiates from other interfaces.
	IsTypeDefContext()
}

type TypeDefContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDefContext() *TypeDefContext {
	var p = new(TypeDefContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeDef
	return p
}

func InitEmptyTypeDefContext(p *TypeDefContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeDef
}

func (*TypeDefContext) IsTypeDefContext() {}

func NewTypeDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDefContext {
	var p = new(TypeDefContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeDef

	return p
}

func (s *TypeDefContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDefContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *TypeDefContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeDefContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *TypeDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeDef(s)
	}
}

func (s *TypeDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeDef(s)
	}
}

func (p *ChainParser) TypeDef() (localctx ITypeDefContext) {
	localctx = NewTypeDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ChainParserRULE_typeDef)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(532)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(534)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(533)
			p.TypeParameters()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(536)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParametersContext is an interface to support dynamic dispatch.
type ITypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	AllTypeParameterDecl() []ITypeParameterDeclContext
	TypeParameterDecl(i int) ITypeParameterDeclContext
	R_BRACKET() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeParametersContext differentiates from other interfaces.
	IsTypeParametersContext()
}

type TypeParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParametersContext() *TypeParametersContext {
	var p = new(TypeParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeParameters
	return p
}

func InitEmptyTypeParametersContext(p *TypeParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeParameters
}

func (*TypeParametersContext) IsTypeParametersContext() {}

func NewTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParametersContext {
	var p = new(TypeParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeParameters

	return p
}

func (s *TypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParametersContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *TypeParametersContext) AllTypeParameterDecl() []ITypeParameterDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeParameterDeclContext); ok {
			len++
		}
	}

	tst := make([]ITypeParameterDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeParameterDeclContext); ok {
			tst[i] = t.(ITypeParameterDeclContext)
			i++
		}
	}

	return tst
}

func (s *TypeParametersContext) TypeParameterDecl(i int) ITypeParameterDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterDeclContext)
}

func (s *TypeParametersContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *TypeParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *TypeParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *TypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeParameters(s)
	}
}

func (s *TypeParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeParameters(s)
	}
}

func (p *ChainParser) TypeParameters() (localctx ITypeParametersContext) {
	localctx = NewTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ChainParserRULE_typeParameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(538)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(539)
		p.TypeParameterDecl()
	}
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserCOMMA {
		{
			p.SetState(540)
			p.Match(ChainParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(541)
			p.TypeParameterDecl()
		}

		p.SetState(546)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(547)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParameterDeclContext is an interface to support dynamic dispatch.
type ITypeParameterDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdentifierList() IIdentifierListContext
	TypeElement() ITypeElementContext

	// IsTypeParameterDeclContext differentiates from other interfaces.
	IsTypeParameterDeclContext()
}

type TypeParameterDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterDeclContext() *TypeParameterDeclContext {
	var p = new(TypeParameterDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeParameterDecl
	return p
}

func InitEmptyTypeParameterDeclContext(p *TypeParameterDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeParameterDecl
}

func (*TypeParameterDeclContext) IsTypeParameterDeclContext() {}

func NewTypeParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterDeclContext {
	var p = new(TypeParameterDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeParameterDecl

	return p
}

func (s *TypeParameterDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterDeclContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *TypeParameterDeclContext) TypeElement() ITypeElementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeElementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeElementContext)
}

func (s *TypeParameterDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeParameterDecl(s)
	}
}

func (s *TypeParameterDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeParameterDecl(s)
	}
}

func (p *ChainParser) TypeParameterDecl() (localctx ITypeParameterDeclContext) {
	localctx = NewTypeParameterDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ChainParserRULE_typeParameterDecl)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(549)
		p.IdentifierList()
	}
	{
		p.SetState(550)
		p.TypeElement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeElementContext is an interface to support dynamic dispatch.
type ITypeElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeTerm() []ITypeTermContext
	TypeTerm(i int) ITypeTermContext
	AllOR() []antlr.TerminalNode
	OR(i int) antlr.TerminalNode

	// IsTypeElementContext differentiates from other interfaces.
	IsTypeElementContext()
}

type TypeElementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeElementContext() *TypeElementContext {
	var p = new(TypeElementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeElement
	return p
}

func InitEmptyTypeElementContext(p *TypeElementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeElement
}

func (*TypeElementContext) IsTypeElementContext() {}

func NewTypeElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeElementContext {
	var p = new(TypeElementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeElement

	return p
}

func (s *TypeElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeElementContext) AllTypeTerm() []ITypeTermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeTermContext); ok {
			len++
		}
	}

	tst := make([]ITypeTermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeTermContext); ok {
			tst[i] = t.(ITypeTermContext)
			i++
		}
	}

	return tst
}

func (s *TypeElementContext) TypeTerm(i int) ITypeTermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeTermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeTermContext)
}

func (s *TypeElementContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(ChainParserOR)
}

func (s *TypeElementContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserOR, i)
}

func (s *TypeElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeElement(s)
	}
}

func (s *TypeElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeElement(s)
	}
}

func (p *ChainParser) TypeElement() (localctx ITypeElementContext) {
	localctx = NewTypeElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ChainParserRULE_typeElement)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(552)
		p.TypeTerm()
	}
	p.SetState(557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(553)
				p.Match(ChainParserOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(554)
				p.TypeTerm()
			}

		}
		p.SetState(559)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeTermContext is an interface to support dynamic dispatch.
type ITypeTermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() IType_Context
	UNDERLYING() antlr.TerminalNode

	// IsTypeTermContext differentiates from other interfaces.
	IsTypeTermContext()
}

type TypeTermContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTermContext() *TypeTermContext {
	var p = new(TypeTermContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeTerm
	return p
}

func InitEmptyTypeTermContext(p *TypeTermContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeTerm
}

func (*TypeTermContext) IsTypeTermContext() {}

func NewTypeTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTermContext {
	var p = new(TypeTermContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeTerm

	return p
}

func (s *TypeTermContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTermContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeTermContext) UNDERLYING() antlr.TerminalNode {
	return s.GetToken(ChainParserUNDERLYING, 0)
}

func (s *TypeTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeTerm(s)
	}
}

func (s *TypeTermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeTerm(s)
	}
}

func (p *ChainParser) TypeTerm() (localctx ITypeTermContext) {
	localctx = NewTypeTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ChainParserRULE_typeTerm)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(561)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(560)
			p.Match(ChainParserUNDERLYING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(563)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionDeclContext is an interface to support dynamic dispatch.
type IFunctionDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNC() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	Signature() ISignatureContext
	TypeParameters() ITypeParametersContext
	Block() IBlockContext

	// IsFunctionDeclContext differentiates from other interfaces.
	IsFunctionDeclContext()
}

type FunctionDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclContext() *FunctionDeclContext {
	var p = new(FunctionDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionDecl
	return p
}

func InitEmptyFunctionDeclContext(p *FunctionDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionDecl
}

func (*FunctionDeclContext) IsFunctionDeclContext() {}

func NewFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclContext {
	var p = new(FunctionDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_functionDecl

	return p
}

func (s *FunctionDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ChainParserFUNC, 0)
}

func (s *FunctionDeclContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *FunctionDeclContext) Signature() ISignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionDeclContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *FunctionDeclContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterFunctionDecl(s)
	}
}

func (s *FunctionDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitFunctionDecl(s)
	}
}

func (p *ChainParser) FunctionDecl() (localctx IFunctionDeclContext) {
	localctx = NewFunctionDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ChainParserRULE_functionDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(565)
		p.Match(ChainParserFUNC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(566)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserL_BRACKET {
		{
			p.SetState(567)
			p.TypeParameters()
		}

	}
	{
		p.SetState(570)
		p.Signature()
	}
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserL_CURLY {
		{
			p.SetState(571)
			p.Block()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodDeclContext is an interface to support dynamic dispatch.
type IMethodDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNC() antlr.TerminalNode
	Receiver() IReceiverContext
	IDENTIFIER() antlr.TerminalNode
	Signature() ISignatureContext
	Block() IBlockContext

	// IsMethodDeclContext differentiates from other interfaces.
	IsMethodDeclContext()
}

type MethodDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDeclContext() *MethodDeclContext {
	var p = new(MethodDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodDecl
	return p
}

func InitEmptyMethodDeclContext(p *MethodDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodDecl
}

func (*MethodDeclContext) IsMethodDeclContext() {}

func NewMethodDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDeclContext {
	var p = new(MethodDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_methodDecl

	return p
}

func (s *MethodDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDeclContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ChainParserFUNC, 0)
}

func (s *MethodDeclContext) Receiver() IReceiverContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReceiverContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReceiverContext)
}

func (s *MethodDeclContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *MethodDeclContext) Signature() ISignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *MethodDeclContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *MethodDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterMethodDecl(s)
	}
}

func (s *MethodDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitMethodDecl(s)
	}
}

func (p *ChainParser) MethodDecl() (localctx IMethodDeclContext) {
	localctx = NewMethodDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ChainParserRULE_methodDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(574)
		p.Match(ChainParserFUNC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(575)
		p.Receiver()
	}
	{
		p.SetState(576)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(577)
		p.Signature()
	}
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserL_CURLY {
		{
			p.SetState(578)
			p.Block()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReceiverContext is an interface to support dynamic dispatch.
type IReceiverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parameters() IParametersContext

	// IsReceiverContext differentiates from other interfaces.
	IsReceiverContext()
}

type ReceiverContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReceiverContext() *ReceiverContext {
	var p = new(ReceiverContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_receiver
	return p
}

func InitEmptyReceiverContext(p *ReceiverContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_receiver
}

func (*ReceiverContext) IsReceiverContext() {}

func NewReceiverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiverContext {
	var p = new(ReceiverContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_receiver

	return p
}

func (s *ReceiverContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiverContext) Parameters() IParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *ReceiverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterReceiver(s)
	}
}

func (s *ReceiverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitReceiver(s)
	}
}

func (p *ChainParser) Receiver() (localctx IReceiverContext) {
	localctx = NewReceiverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ChainParserRULE_receiver)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(581)
		p.Parameters()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarDeclContext is an interface to support dynamic dispatch.
type IVarDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VAR() antlr.TerminalNode
	AllVarSpec() []IVarSpecContext
	VarSpec(i int) IVarSpecContext
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllEos() []IEosContext
	Eos(i int) IEosContext

	// IsVarDeclContext differentiates from other interfaces.
	IsVarDeclContext()
}

type VarDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarDeclContext() *VarDeclContext {
	var p = new(VarDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_varDecl
	return p
}

func InitEmptyVarDeclContext(p *VarDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_varDecl
}

func (*VarDeclContext) IsVarDeclContext() {}

func NewVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarDeclContext {
	var p = new(VarDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_varDecl

	return p
}

func (s *VarDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *VarDeclContext) VAR() antlr.TerminalNode {
	return s.GetToken(ChainParserVAR, 0)
}

func (s *VarDeclContext) AllVarSpec() []IVarSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVarSpecContext); ok {
			len++
		}
	}

	tst := make([]IVarSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVarSpecContext); ok {
			tst[i] = t.(IVarSpecContext)
			i++
		}
	}

	return tst
}

func (s *VarDeclContext) VarSpec(i int) IVarSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarSpecContext)
}

func (s *VarDeclContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *VarDeclContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *VarDeclContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *VarDeclContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *VarDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterVarDecl(s)
	}
}

func (s *VarDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitVarDecl(s)
	}
}

func (p *ChainParser) VarDecl() (localctx IVarDeclContext) {
	localctx = NewVarDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ChainParserRULE_varDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.Match(ChainParserVAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserIDENTIFIER:
		{
			p.SetState(584)
			p.VarSpec()
		}

	case ChainParserL_PAREN:
		{
			p.SetState(585)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(591)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ChainParserIDENTIFIER {
			{
				p.SetState(586)
				p.VarSpec()
			}
			{
				p.SetState(587)
				p.Eos()
			}

			p.SetState(593)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(594)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarSpecContext is an interface to support dynamic dispatch.
type IVarSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdentifierList() IIdentifierListContext
	Type_() IType_Context
	ASSIGN() antlr.TerminalNode
	ExpressionList() IExpressionListContext

	// IsVarSpecContext differentiates from other interfaces.
	IsVarSpecContext()
}

type VarSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarSpecContext() *VarSpecContext {
	var p = new(VarSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_varSpec
	return p
}

func InitEmptyVarSpecContext(p *VarSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_varSpec
}

func (*VarSpecContext) IsVarSpecContext() {}

func NewVarSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarSpecContext {
	var p = new(VarSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_varSpec

	return p
}

func (s *VarSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *VarSpecContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *VarSpecContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *VarSpecContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *VarSpecContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *VarSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterVarSpec(s)
	}
}

func (s *VarSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitVarSpec(s)
	}
}

func (p *ChainParser) VarSpec() (localctx IVarSpecContext) {
	localctx = NewVarSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ChainParserRULE_varSpec)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		p.IdentifierList()
	}
	p.SetState(605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(598)
			p.Type_()
		}
		p.SetState(601)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(599)
				p.Match(ChainParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(600)
				p.ExpressionList()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		{
			p.SetState(603)
			p.Match(ChainParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(604)
			p.ExpressionList()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_CURLY() antlr.TerminalNode
	StatementList() IStatementListContext
	R_CURLY() antlr.TerminalNode

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *BlockContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *ChainParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ChainParserRULE_block)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(607)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(608)
		p.StatementList()
	}
	{
		p.SetState(609)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext
	AllEos() []IEosContext
	Eos(i int) IEosContext
	AllSEMI() []antlr.TerminalNode
	SEMI(i int) antlr.TerminalNode
	AllEOS() []antlr.TerminalNode
	EOS(i int) antlr.TerminalNode

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_statementList
	return p
}

func InitEmptyStatementListContext(p *StatementListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_statementList
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *StatementListContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *StatementListContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementListContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(ChainParserSEMI)
}

func (s *StatementListContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserSEMI, i)
}

func (s *StatementListContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(ChainParserEOS)
}

func (s *StatementListContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, i)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterStatementList(s)
	}
}

func (s *StatementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitStatementList(s)
	}
}

func (p *ChainParser) StatementList() (localctx IStatementListContext) {
	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ChainParserRULE_statementList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(614)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(611)
					p.Match(ChainParserSEMI)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				{
					p.SetState(612)
					p.Match(ChainParserEOS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(616)
				p.Statement()
			}
			{
				p.SetState(617)
				p.Eos()
			}

		}
		p.SetState(623)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declaration() IDeclarationContext
	LabeledStmt() ILabeledStmtContext
	SimpleStmt() ISimpleStmtContext
	GoStmt() IGoStmtContext
	ReturnStmt() IReturnStmtContext
	BreakStmt() IBreakStmtContext
	ContinueStmt() IContinueStmtContext
	GotoStmt() IGotoStmtContext
	FallthroughStmt() IFallthroughStmtContext
	Block() IBlockContext
	IfStmt() IIfStmtContext
	SwitchStmt() ISwitchStmtContext
	SelectStmt() ISelectStmtContext
	ForStmt() IForStmtContext
	DeferStmt() IDeferStmtContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) LabeledStmt() ILabeledStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledStmtContext)
}

func (s *StatementContext) SimpleStmt() ISimpleStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *StatementContext) GoStmt() IGoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *StatementContext) ReturnStmt() IReturnStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStmtContext)
}

func (s *StatementContext) BreakStmt() IBreakStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *StatementContext) ContinueStmt() IContinueStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *StatementContext) GotoStmt() IGotoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGotoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGotoStmtContext)
}

func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFallthroughStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *StatementContext) SwitchStmt() ISwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *StatementContext) SelectStmt() ISelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *StatementContext) ForStmt() IForStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *StatementContext) DeferStmt() IDeferStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeferStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *ChainParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ChainParserRULE_statement)
	p.SetState(639)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(624)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(625)
			p.LabeledStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(626)
			p.SimpleStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(627)
			p.GoStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(628)
			p.ReturnStmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(629)
			p.BreakStmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(630)
			p.ContinueStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(631)
			p.GotoStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(632)
			p.FallthroughStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(633)
			p.Block()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(634)
			p.IfStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(635)
			p.SwitchStmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(636)
			p.SelectStmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(637)
			p.ForStmt()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(638)
			p.DeferStmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleStmtContext is an interface to support dynamic dispatch.
type ISimpleStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SendStmt() ISendStmtContext
	IncDecStmt() IIncDecStmtContext
	Assignment() IAssignmentContext
	ExpressionStmt() IExpressionStmtContext
	ShortVarDecl() IShortVarDeclContext

	// IsSimpleStmtContext differentiates from other interfaces.
	IsSimpleStmtContext()
}

type SimpleStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStmtContext() *SimpleStmtContext {
	var p = new(SimpleStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_simpleStmt
	return p
}

func InitEmptySimpleStmtContext(p *SimpleStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_simpleStmt
}

func (*SimpleStmtContext) IsSimpleStmtContext() {}

func NewSimpleStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStmtContext {
	var p = new(SimpleStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_simpleStmt

	return p
}

func (s *SimpleStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStmtContext) SendStmt() ISendStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISendStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISendStmtContext)
}

func (s *SimpleStmtContext) IncDecStmt() IIncDecStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncDecStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncDecStmtContext)
}

func (s *SimpleStmtContext) Assignment() IAssignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *SimpleStmtContext) ExpressionStmt() IExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStmtContext)
}

func (s *SimpleStmtContext) ShortVarDecl() IShortVarDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShortVarDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShortVarDeclContext)
}

func (s *SimpleStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSimpleStmt(s)
	}
}

func (s *SimpleStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSimpleStmt(s)
	}
}

func (p *ChainParser) SimpleStmt() (localctx ISimpleStmtContext) {
	localctx = NewSimpleStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ChainParserRULE_simpleStmt)
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(641)
			p.SendStmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(642)
			p.IncDecStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(643)
			p.Assignment()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(644)
			p.ExpressionStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(645)
			p.ShortVarDecl()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionStmtContext is an interface to support dynamic dispatch.
type IExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext

	// IsExpressionStmtContext differentiates from other interfaces.
	IsExpressionStmtContext()
}

type ExpressionStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStmtContext() *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expressionStmt
	return p
}

func InitEmptyExpressionStmtContext(p *ExpressionStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expressionStmt
}

func (*ExpressionStmtContext) IsExpressionStmtContext() {}

func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_expressionStmt

	return p
}

func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExpressionStmt(s)
	}
}

func (s *ExpressionStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExpressionStmt(s)
	}
}

func (p *ChainParser) ExpressionStmt() (localctx IExpressionStmtContext) {
	localctx = NewExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ChainParserRULE_expressionStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISendStmtContext is an interface to support dynamic dispatch.
type ISendStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetChannel returns the channel rule contexts.
	GetChannel() IExpressionContext

	// SetChannel sets the channel rule contexts.
	SetChannel(IExpressionContext)

	// Getter signatures
	RECEIVE() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsSendStmtContext differentiates from other interfaces.
	IsSendStmtContext()
}

type SendStmtContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	channel IExpressionContext
}

func NewEmptySendStmtContext() *SendStmtContext {
	var p = new(SendStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sendStmt
	return p
}

func InitEmptySendStmtContext(p *SendStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sendStmt
}

func (*SendStmtContext) IsSendStmtContext() {}

func NewSendStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SendStmtContext {
	var p = new(SendStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_sendStmt

	return p
}

func (s *SendStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SendStmtContext) GetChannel() IExpressionContext { return s.channel }

func (s *SendStmtContext) SetChannel(v IExpressionContext) { s.channel = v }

func (s *SendStmtContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(ChainParserRECEIVE, 0)
}

func (s *SendStmtContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SendStmtContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SendStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SendStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SendStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSendStmt(s)
	}
}

func (s *SendStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSendStmt(s)
	}
}

func (p *ChainParser) SendStmt() (localctx ISendStmtContext) {
	localctx = NewSendStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ChainParserRULE_sendStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)

		var _x = p.expression(0)

		localctx.(*SendStmtContext).channel = _x
	}
	{
		p.SetState(651)
		p.Match(ChainParserRECEIVE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(652)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIncDecStmtContext is an interface to support dynamic dispatch.
type IIncDecStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	PLUS_PLUS() antlr.TerminalNode
	MINUS_MINUS() antlr.TerminalNode

	// IsIncDecStmtContext differentiates from other interfaces.
	IsIncDecStmtContext()
}

type IncDecStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncDecStmtContext() *IncDecStmtContext {
	var p = new(IncDecStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_incDecStmt
	return p
}

func InitEmptyIncDecStmtContext(p *IncDecStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_incDecStmt
}

func (*IncDecStmtContext) IsIncDecStmtContext() {}

func NewIncDecStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncDecStmtContext {
	var p = new(IncDecStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_incDecStmt

	return p
}

func (s *IncDecStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IncDecStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IncDecStmtContext) PLUS_PLUS() antlr.TerminalNode {
	return s.GetToken(ChainParserPLUS_PLUS, 0)
}

func (s *IncDecStmtContext) MINUS_MINUS() antlr.TerminalNode {
	return s.GetToken(ChainParserMINUS_MINUS, 0)
}

func (s *IncDecStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncDecStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncDecStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterIncDecStmt(s)
	}
}

func (s *IncDecStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitIncDecStmt(s)
	}
}

func (p *ChainParser) IncDecStmt() (localctx IIncDecStmtContext) {
	localctx = NewIncDecStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ChainParserRULE_incDecStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(654)
		p.expression(0)
	}
	{
		p.SetState(655)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ChainParserPLUS_PLUS || _la == ChainParserMINUS_MINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentContext is an interface to support dynamic dispatch.
type IAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpressionList() []IExpressionListContext
	ExpressionList(i int) IExpressionListContext
	Assign_op() IAssign_opContext

	// IsAssignmentContext differentiates from other interfaces.
	IsAssignmentContext()
}

type AssignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentContext() *AssignmentContext {
	var p = new(AssignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_assignment
	return p
}

func InitEmptyAssignmentContext(p *AssignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_assignment
}

func (*AssignmentContext) IsAssignmentContext() {}

func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentContext {
	var p = new(AssignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_assignment

	return p
}

func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentContext) AllExpressionList() []IExpressionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionListContext); ok {
			len++
		}
	}

	tst := make([]IExpressionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionListContext); ok {
			tst[i] = t.(IExpressionListContext)
			i++
		}
	}

	return tst
}

func (s *AssignmentContext) ExpressionList(i int) IExpressionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *AssignmentContext) Assign_op() IAssign_opContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssign_opContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssign_opContext)
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (p *ChainParser) Assignment() (localctx IAssignmentContext) {
	localctx = NewAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ChainParserRULE_assignment)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(657)
		p.ExpressionList()
	}
	{
		p.SetState(658)
		p.Assign_op()
	}
	{
		p.SetState(659)
		p.ExpressionList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssign_opContext is an interface to support dynamic dispatch.
type IAssign_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSIGN() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode
	OR() antlr.TerminalNode
	CARET() antlr.TerminalNode
	STAR() antlr.TerminalNode
	DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode
	LSHIFT() antlr.TerminalNode
	RSHIFT() antlr.TerminalNode
	AMPERSAND() antlr.TerminalNode
	BIT_CLEAR() antlr.TerminalNode

	// IsAssign_opContext differentiates from other interfaces.
	IsAssign_opContext()
}

type Assign_opContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssign_opContext() *Assign_opContext {
	var p = new(Assign_opContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_assign_op
	return p
}

func InitEmptyAssign_opContext(p *Assign_opContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_assign_op
}

func (*Assign_opContext) IsAssign_opContext() {}

func NewAssign_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assign_opContext {
	var p = new(Assign_opContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_assign_op

	return p
}

func (s *Assign_opContext) GetParser() antlr.Parser { return s.parser }

func (s *Assign_opContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *Assign_opContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ChainParserPLUS, 0)
}

func (s *Assign_opContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ChainParserMINUS, 0)
}

func (s *Assign_opContext) OR() antlr.TerminalNode {
	return s.GetToken(ChainParserOR, 0)
}

func (s *Assign_opContext) CARET() antlr.TerminalNode {
	return s.GetToken(ChainParserCARET, 0)
}

func (s *Assign_opContext) STAR() antlr.TerminalNode {
	return s.GetToken(ChainParserSTAR, 0)
}

func (s *Assign_opContext) DIV() antlr.TerminalNode {
	return s.GetToken(ChainParserDIV, 0)
}

func (s *Assign_opContext) MOD() antlr.TerminalNode {
	return s.GetToken(ChainParserMOD, 0)
}

func (s *Assign_opContext) LSHIFT() antlr.TerminalNode {
	return s.GetToken(ChainParserLSHIFT, 0)
}

func (s *Assign_opContext) RSHIFT() antlr.TerminalNode {
	return s.GetToken(ChainParserRSHIFT, 0)
}

func (s *Assign_opContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(ChainParserAMPERSAND, 0)
}

func (s *Assign_opContext) BIT_CLEAR() antlr.TerminalNode {
	return s.GetToken(ChainParserBIT_CLEAR, 0)
}

func (s *Assign_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assign_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assign_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterAssign_op(s)
	}
}

func (s *Assign_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitAssign_op(s)
	}
}

func (p *ChainParser) Assign_op() (localctx IAssign_opContext) {
	localctx = NewAssign_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ChainParserRULE_assign_op)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&7999) != 0 {
		{
			p.SetState(661)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&7999) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(664)
		p.Match(ChainParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShortVarDeclContext is an interface to support dynamic dispatch.
type IShortVarDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdentifierList() IIdentifierListContext
	DECLARE_ASSIGN() antlr.TerminalNode
	ExpressionList() IExpressionListContext

	// IsShortVarDeclContext differentiates from other interfaces.
	IsShortVarDeclContext()
}

type ShortVarDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShortVarDeclContext() *ShortVarDeclContext {
	var p = new(ShortVarDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_shortVarDecl
	return p
}

func InitEmptyShortVarDeclContext(p *ShortVarDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_shortVarDecl
}

func (*ShortVarDeclContext) IsShortVarDeclContext() {}

func NewShortVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShortVarDeclContext {
	var p = new(ShortVarDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_shortVarDecl

	return p
}

func (s *ShortVarDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ShortVarDeclContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ShortVarDeclContext) DECLARE_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserDECLARE_ASSIGN, 0)
}

func (s *ShortVarDeclContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ShortVarDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortVarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShortVarDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterShortVarDecl(s)
	}
}

func (s *ShortVarDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitShortVarDecl(s)
	}
}

func (p *ChainParser) ShortVarDecl() (localctx IShortVarDeclContext) {
	localctx = NewShortVarDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ChainParserRULE_shortVarDecl)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(666)
		p.IdentifierList()
	}
	{
		p.SetState(667)
		p.Match(ChainParserDECLARE_ASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(668)
		p.ExpressionList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabeledStmtContext is an interface to support dynamic dispatch.
type ILabeledStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Statement() IStatementContext

	// IsLabeledStmtContext differentiates from other interfaces.
	IsLabeledStmtContext()
}

type LabeledStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStmtContext() *LabeledStmtContext {
	var p = new(LabeledStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_labeledStmt
	return p
}

func InitEmptyLabeledStmtContext(p *LabeledStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_labeledStmt
}

func (*LabeledStmtContext) IsLabeledStmtContext() {}

func NewLabeledStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStmtContext {
	var p = new(LabeledStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_labeledStmt

	return p
}

func (s *LabeledStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *LabeledStmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *LabeledStmtContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterLabeledStmt(s)
	}
}

func (s *LabeledStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitLabeledStmt(s)
	}
}

func (p *ChainParser) LabeledStmt() (localctx ILabeledStmtContext) {
	localctx = NewLabeledStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ChainParserRULE_labeledStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(671)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(672)
			p.Statement()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnStmtContext is an interface to support dynamic dispatch.
type IReturnStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN() antlr.TerminalNode
	ExpressionList() IExpressionListContext

	// IsReturnStmtContext differentiates from other interfaces.
	IsReturnStmtContext()
}

type ReturnStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStmtContext() *ReturnStmtContext {
	var p = new(ReturnStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_returnStmt
	return p
}

func InitEmptyReturnStmtContext(p *ReturnStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_returnStmt
}

func (*ReturnStmtContext) IsReturnStmtContext() {}

func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStmtContext {
	var p = new(ReturnStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_returnStmt

	return p
}

func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStmtContext) RETURN() antlr.TerminalNode {
	return s.GetToken(ChainParserRETURN, 0)
}

func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterReturnStmt(s)
	}
}

func (s *ReturnStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitReturnStmt(s)
	}
}

func (p *ChainParser) ReturnStmt() (localctx IReturnStmtContext) {
	localctx = NewReturnStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ChainParserRULE_returnStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(675)
		p.Match(ChainParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(676)
			p.ExpressionList()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreakStmtContext is an interface to support dynamic dispatch.
type IBreakStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BREAK() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsBreakStmtContext differentiates from other interfaces.
	IsBreakStmtContext()
}

type BreakStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStmtContext() *BreakStmtContext {
	var p = new(BreakStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_breakStmt
	return p
}

func InitEmptyBreakStmtContext(p *BreakStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_breakStmt
}

func (*BreakStmtContext) IsBreakStmtContext() {}

func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStmtContext {
	var p = new(BreakStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_breakStmt

	return p
}

func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStmtContext) BREAK() antlr.TerminalNode {
	return s.GetToken(ChainParserBREAK, 0)
}

func (s *BreakStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBreakStmt(s)
	}
}

func (s *BreakStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBreakStmt(s)
	}
}

func (p *ChainParser) BreakStmt() (localctx IBreakStmtContext) {
	localctx = NewBreakStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ChainParserRULE_breakStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(679)
		p.Match(ChainParserBREAK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(680)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinueStmtContext is an interface to support dynamic dispatch.
type IContinueStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsContinueStmtContext differentiates from other interfaces.
	IsContinueStmtContext()
}

type ContinueStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStmtContext() *ContinueStmtContext {
	var p = new(ContinueStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_continueStmt
	return p
}

func InitEmptyContinueStmtContext(p *ContinueStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_continueStmt
}

func (*ContinueStmtContext) IsContinueStmtContext() {}

func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStmtContext {
	var p = new(ContinueStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_continueStmt

	return p
}

func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStmtContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(ChainParserCONTINUE, 0)
}

func (s *ContinueStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterContinueStmt(s)
	}
}

func (s *ContinueStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitContinueStmt(s)
	}
}

func (p *ChainParser) ContinueStmt() (localctx IContinueStmtContext) {
	localctx = NewContinueStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ChainParserRULE_continueStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(ChainParserCONTINUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(685)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(684)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGotoStmtContext is an interface to support dynamic dispatch.
type IGotoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GOTO() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsGotoStmtContext differentiates from other interfaces.
	IsGotoStmtContext()
}

type GotoStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGotoStmtContext() *GotoStmtContext {
	var p = new(GotoStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_gotoStmt
	return p
}

func InitEmptyGotoStmtContext(p *GotoStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_gotoStmt
}

func (*GotoStmtContext) IsGotoStmtContext() {}

func NewGotoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GotoStmtContext {
	var p = new(GotoStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_gotoStmt

	return p
}

func (s *GotoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GotoStmtContext) GOTO() antlr.TerminalNode {
	return s.GetToken(ChainParserGOTO, 0)
}

func (s *GotoStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *GotoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GotoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GotoStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterGotoStmt(s)
	}
}

func (s *GotoStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitGotoStmt(s)
	}
}

func (p *ChainParser) GotoStmt() (localctx IGotoStmtContext) {
	localctx = NewGotoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ChainParserRULE_gotoStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(687)
		p.Match(ChainParserGOTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(688)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFallthroughStmtContext is an interface to support dynamic dispatch.
type IFallthroughStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FALLTHROUGH() antlr.TerminalNode

	// IsFallthroughStmtContext differentiates from other interfaces.
	IsFallthroughStmtContext()
}

type FallthroughStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_fallthroughStmt
	return p
}

func InitEmptyFallthroughStmtContext(p *FallthroughStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_fallthroughStmt
}

func (*FallthroughStmtContext) IsFallthroughStmtContext() {}

func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_fallthroughStmt

	return p
}

func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *FallthroughStmtContext) FALLTHROUGH() antlr.TerminalNode {
	return s.GetToken(ChainParserFALLTHROUGH, 0)
}

func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FallthroughStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterFallthroughStmt(s)
	}
}

func (s *FallthroughStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitFallthroughStmt(s)
	}
}

func (p *ChainParser) FallthroughStmt() (localctx IFallthroughStmtContext) {
	localctx = NewFallthroughStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ChainParserRULE_fallthroughStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(690)
		p.Match(ChainParserFALLTHROUGH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeferStmtContext is an interface to support dynamic dispatch.
type IDeferStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFER() antlr.TerminalNode
	Expression() IExpressionContext

	// IsDeferStmtContext differentiates from other interfaces.
	IsDeferStmtContext()
}

type DeferStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferStmtContext() *DeferStmtContext {
	var p = new(DeferStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_deferStmt
	return p
}

func InitEmptyDeferStmtContext(p *DeferStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_deferStmt
}

func (*DeferStmtContext) IsDeferStmtContext() {}

func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeferStmtContext {
	var p = new(DeferStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_deferStmt

	return p
}

func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeferStmtContext) DEFER() antlr.TerminalNode {
	return s.GetToken(ChainParserDEFER, 0)
}

func (s *DeferStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeferStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterDeferStmt(s)
	}
}

func (s *DeferStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitDeferStmt(s)
	}
}

func (p *ChainParser) DeferStmt() (localctx IDeferStmtContext) {
	localctx = NewDeferStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ChainParserRULE_deferStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		p.Match(ChainParserDEFER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(693)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfStmtContext is an interface to support dynamic dispatch.
type IIfStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF() antlr.TerminalNode
	AllBlock() []IBlockContext
	Block(i int) IBlockContext
	Expression() IExpressionContext
	SimpleStmt() ISimpleStmtContext
	SEMI() antlr.TerminalNode
	EOS() antlr.TerminalNode
	ELSE() antlr.TerminalNode
	IfStmt() IIfStmtContext

	// IsIfStmtContext differentiates from other interfaces.
	IsIfStmtContext()
}

type IfStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStmtContext() *IfStmtContext {
	var p = new(IfStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_ifStmt
	return p
}

func InitEmptyIfStmtContext(p *IfStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_ifStmt
}

func (*IfStmtContext) IsIfStmtContext() {}

func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStmtContext {
	var p = new(IfStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_ifStmt

	return p
}

func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ChainParserIF, 0)
}

func (s *IfStmtContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *IfStmtContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStmtContext) SimpleStmt() ISimpleStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *IfStmtContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ChainParserSEMI, 0)
}

func (s *IfStmtContext) EOS() antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, 0)
}

func (s *IfStmtContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ChainParserELSE, 0)
}

func (s *IfStmtContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterIfStmt(s)
	}
}

func (s *IfStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitIfStmt(s)
	}
}

func (p *ChainParser) IfStmt() (localctx IIfStmtContext) {
	localctx = NewIfStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ChainParserRULE_ifStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(695)
		p.Match(ChainParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(696)
			p.expression(0)
		}

	case 2:
		{
			p.SetState(697)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ChainParserSEMI || _la == ChainParserEOS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(698)
			p.expression(0)
		}

	case 3:
		{
			p.SetState(699)
			p.SimpleStmt()
		}
		{
			p.SetState(700)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ChainParserSEMI || _la == ChainParserEOS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(701)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(705)
		p.Block()
	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(706)
			p.Match(ChainParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ChainParserIF:
			{
				p.SetState(707)
				p.IfStmt()
			}

		case ChainParserL_CURLY:
			{
				p.SetState(708)
				p.Block()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchStmtContext is an interface to support dynamic dispatch.
type ISwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExprSwitchStmt() IExprSwitchStmtContext
	TypeSwitchStmt() ITypeSwitchStmtContext

	// IsSwitchStmtContext differentiates from other interfaces.
	IsSwitchStmtContext()
}

type SwitchStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStmtContext() *SwitchStmtContext {
	var p = new(SwitchStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_switchStmt
	return p
}

func InitEmptySwitchStmtContext(p *SwitchStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_switchStmt
}

func (*SwitchStmtContext) IsSwitchStmtContext() {}

func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStmtContext {
	var p = new(SwitchStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_switchStmt

	return p
}

func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStmtContext) ExprSwitchStmt() IExprSwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSwitchStmtContext)
}

func (s *SwitchStmtContext) TypeSwitchStmt() ITypeSwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchStmtContext)
}

func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSwitchStmt(s)
	}
}

func (s *SwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSwitchStmt(s)
	}
}

func (p *ChainParser) SwitchStmt() (localctx ISwitchStmtContext) {
	localctx = NewSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ChainParserRULE_switchStmt)
	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(713)
			p.ExprSwitchStmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(714)
			p.TypeSwitchStmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprSwitchStmtContext is an interface to support dynamic dispatch.
type IExprSwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SWITCH() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	Eos() IEosContext
	AllExprCaseClause() []IExprCaseClauseContext
	ExprCaseClause(i int) IExprCaseClauseContext
	Expression() IExpressionContext
	SimpleStmt() ISimpleStmtContext

	// IsExprSwitchStmtContext differentiates from other interfaces.
	IsExprSwitchStmtContext()
}

type ExprSwitchStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprSwitchStmtContext() *ExprSwitchStmtContext {
	var p = new(ExprSwitchStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprSwitchStmt
	return p
}

func InitEmptyExprSwitchStmtContext(p *ExprSwitchStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprSwitchStmt
}

func (*ExprSwitchStmtContext) IsExprSwitchStmtContext() {}

func NewExprSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprSwitchStmtContext {
	var p = new(ExprSwitchStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_exprSwitchStmt

	return p
}

func (s *ExprSwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprSwitchStmtContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(ChainParserSWITCH, 0)
}

func (s *ExprSwitchStmtContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *ExprSwitchStmtContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *ExprSwitchStmtContext) Eos() IEosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ExprSwitchStmtContext) AllExprCaseClause() []IExprCaseClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprCaseClauseContext); ok {
			len++
		}
	}

	tst := make([]IExprCaseClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprCaseClauseContext); ok {
			tst[i] = t.(IExprCaseClauseContext)
			i++
		}
	}

	return tst
}

func (s *ExprSwitchStmtContext) ExprCaseClause(i int) IExprCaseClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprCaseClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprCaseClauseContext)
}

func (s *ExprSwitchStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExprSwitchStmtContext) SimpleStmt() ISimpleStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *ExprSwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExprSwitchStmt(s)
	}
}

func (s *ExprSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExprSwitchStmt(s)
	}
}

func (p *ChainParser) ExprSwitchStmt() (localctx IExprSwitchStmtContext) {
	localctx = NewExprSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ChainParserRULE_exprSwitchStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.Match(ChainParserSWITCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(728)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.SetState(719)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(718)
				p.expression(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.SetState(722)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(721)
				p.SimpleStmt()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(724)
			p.Eos()
		}
		p.SetState(726)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(725)
				p.expression(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(730)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(734)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserCASE || _la == ChainParserDEFAULT {
		{
			p.SetState(731)
			p.ExprCaseClause()
		}

		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(737)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprCaseClauseContext is an interface to support dynamic dispatch.
type IExprCaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExprSwitchCase() IExprSwitchCaseContext
	COLON() antlr.TerminalNode
	StatementList() IStatementListContext

	// IsExprCaseClauseContext differentiates from other interfaces.
	IsExprCaseClauseContext()
}

type ExprCaseClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprCaseClauseContext() *ExprCaseClauseContext {
	var p = new(ExprCaseClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprCaseClause
	return p
}

func InitEmptyExprCaseClauseContext(p *ExprCaseClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprCaseClause
}

func (*ExprCaseClauseContext) IsExprCaseClauseContext() {}

func NewExprCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprCaseClauseContext {
	var p = new(ExprCaseClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_exprCaseClause

	return p
}

func (s *ExprCaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprCaseClauseContext) ExprSwitchCase() IExprSwitchCaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSwitchCaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSwitchCaseContext)
}

func (s *ExprCaseClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *ExprCaseClauseContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ExprCaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExprCaseClause(s)
	}
}

func (s *ExprCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExprCaseClause(s)
	}
}

func (p *ChainParser) ExprCaseClause() (localctx IExprCaseClauseContext) {
	localctx = NewExprCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ChainParserRULE_exprCaseClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(739)
		p.ExprSwitchCase()
	}
	{
		p.SetState(740)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(741)
		p.StatementList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprSwitchCaseContext is an interface to support dynamic dispatch.
type IExprSwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	DEFAULT() antlr.TerminalNode

	// IsExprSwitchCaseContext differentiates from other interfaces.
	IsExprSwitchCaseContext()
}

type ExprSwitchCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprSwitchCaseContext() *ExprSwitchCaseContext {
	var p = new(ExprSwitchCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprSwitchCase
	return p
}

func InitEmptyExprSwitchCaseContext(p *ExprSwitchCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_exprSwitchCase
}

func (*ExprSwitchCaseContext) IsExprSwitchCaseContext() {}

func NewExprSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprSwitchCaseContext {
	var p = new(ExprSwitchCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_exprSwitchCase

	return p
}

func (s *ExprSwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprSwitchCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ChainParserCASE, 0)
}

func (s *ExprSwitchCaseContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ExprSwitchCaseContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ChainParserDEFAULT, 0)
}

func (s *ExprSwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExprSwitchCase(s)
	}
}

func (s *ExprSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExprSwitchCase(s)
	}
}

func (p *ChainParser) ExprSwitchCase() (localctx IExprSwitchCaseContext) {
	localctx = NewExprSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ChainParserRULE_exprSwitchCase)
	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserCASE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(743)
			p.Match(ChainParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(744)
			p.ExpressionList()
		}

	case ChainParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(745)
			p.Match(ChainParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSwitchStmtContext is an interface to support dynamic dispatch.
type ITypeSwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SWITCH() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	TypeSwitchGuard() ITypeSwitchGuardContext
	Eos() IEosContext
	SimpleStmt() ISimpleStmtContext
	AllTypeCaseClause() []ITypeCaseClauseContext
	TypeCaseClause(i int) ITypeCaseClauseContext

	// IsTypeSwitchStmtContext differentiates from other interfaces.
	IsTypeSwitchStmtContext()
}

type TypeSwitchStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchStmtContext() *TypeSwitchStmtContext {
	var p = new(TypeSwitchStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchStmt
	return p
}

func InitEmptyTypeSwitchStmtContext(p *TypeSwitchStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchStmt
}

func (*TypeSwitchStmtContext) IsTypeSwitchStmtContext() {}

func NewTypeSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchStmtContext {
	var p = new(TypeSwitchStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeSwitchStmt

	return p
}

func (s *TypeSwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchStmtContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(ChainParserSWITCH, 0)
}

func (s *TypeSwitchStmtContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *TypeSwitchStmtContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *TypeSwitchStmtContext) TypeSwitchGuard() ITypeSwitchGuardContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSwitchGuardContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchGuardContext)
}

func (s *TypeSwitchStmtContext) Eos() IEosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *TypeSwitchStmtContext) SimpleStmt() ISimpleStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *TypeSwitchStmtContext) AllTypeCaseClause() []ITypeCaseClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeCaseClauseContext); ok {
			len++
		}
	}

	tst := make([]ITypeCaseClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeCaseClauseContext); ok {
			tst[i] = t.(ITypeCaseClauseContext)
			i++
		}
	}

	return tst
}

func (s *TypeSwitchStmtContext) TypeCaseClause(i int) ITypeCaseClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCaseClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCaseClauseContext)
}

func (s *TypeSwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeSwitchStmt(s)
	}
}

func (s *TypeSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeSwitchStmt(s)
	}
}

func (p *ChainParser) TypeSwitchStmt() (localctx ITypeSwitchStmtContext) {
	localctx = NewTypeSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ChainParserRULE_typeSwitchStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(748)
		p.Match(ChainParserSWITCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(749)
			p.TypeSwitchGuard()
		}

	case 2:
		{
			p.SetState(750)
			p.Eos()
		}
		{
			p.SetState(751)
			p.TypeSwitchGuard()
		}

	case 3:
		{
			p.SetState(753)
			p.SimpleStmt()
		}
		{
			p.SetState(754)
			p.Eos()
		}
		{
			p.SetState(755)
			p.TypeSwitchGuard()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(759)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(763)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserCASE || _la == ChainParserDEFAULT {
		{
			p.SetState(760)
			p.TypeCaseClause()
		}

		p.SetState(765)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(766)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSwitchGuardContext is an interface to support dynamic dispatch.
type ITypeSwitchGuardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimaryExpr() IPrimaryExprContext
	DOT() antlr.TerminalNode
	L_PAREN() antlr.TerminalNode
	TYPE() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	DECLARE_ASSIGN() antlr.TerminalNode

	// IsTypeSwitchGuardContext differentiates from other interfaces.
	IsTypeSwitchGuardContext()
}

type TypeSwitchGuardContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchGuardContext() *TypeSwitchGuardContext {
	var p = new(TypeSwitchGuardContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchGuard
	return p
}

func InitEmptyTypeSwitchGuardContext(p *TypeSwitchGuardContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchGuard
}

func (*TypeSwitchGuardContext) IsTypeSwitchGuardContext() {}

func NewTypeSwitchGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchGuardContext {
	var p = new(TypeSwitchGuardContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeSwitchGuard

	return p
}

func (s *TypeSwitchGuardContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchGuardContext) PrimaryExpr() IPrimaryExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryExprContext)
}

func (s *TypeSwitchGuardContext) DOT() antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, 0)
}

func (s *TypeSwitchGuardContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *TypeSwitchGuardContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ChainParserTYPE, 0)
}

func (s *TypeSwitchGuardContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *TypeSwitchGuardContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *TypeSwitchGuardContext) DECLARE_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserDECLARE_ASSIGN, 0)
}

func (s *TypeSwitchGuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchGuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchGuardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeSwitchGuard(s)
	}
}

func (s *TypeSwitchGuardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeSwitchGuard(s)
	}
}

func (p *ChainParser) TypeSwitchGuard() (localctx ITypeSwitchGuardContext) {
	localctx = NewTypeSwitchGuardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ChainParserRULE_typeSwitchGuard)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(770)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(768)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(769)
			p.Match(ChainParserDECLARE_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(772)
		p.PrimaryExpr()
	}
	{
		p.SetState(773)
		p.Match(ChainParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(774)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(775)
		p.Match(ChainParserTYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(776)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeCaseClauseContext is an interface to support dynamic dispatch.
type ITypeCaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSwitchCase() ITypeSwitchCaseContext
	COLON() antlr.TerminalNode
	StatementList() IStatementListContext

	// IsTypeCaseClauseContext differentiates from other interfaces.
	IsTypeCaseClauseContext()
}

type TypeCaseClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCaseClauseContext() *TypeCaseClauseContext {
	var p = new(TypeCaseClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeCaseClause
	return p
}

func InitEmptyTypeCaseClauseContext(p *TypeCaseClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeCaseClause
}

func (*TypeCaseClauseContext) IsTypeCaseClauseContext() {}

func NewTypeCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCaseClauseContext {
	var p = new(TypeCaseClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeCaseClause

	return p
}

func (s *TypeCaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCaseClauseContext) TypeSwitchCase() ITypeSwitchCaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSwitchCaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchCaseContext)
}

func (s *TypeCaseClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *TypeCaseClauseContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *TypeCaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeCaseClause(s)
	}
}

func (s *TypeCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeCaseClause(s)
	}
}

func (p *ChainParser) TypeCaseClause() (localctx ITypeCaseClauseContext) {
	localctx = NewTypeCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ChainParserRULE_typeCaseClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(778)
		p.TypeSwitchCase()
	}
	{
		p.SetState(779)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(780)
		p.StatementList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSwitchCaseContext is an interface to support dynamic dispatch.
type ITypeSwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	TypeList() ITypeListContext
	DEFAULT() antlr.TerminalNode

	// IsTypeSwitchCaseContext differentiates from other interfaces.
	IsTypeSwitchCaseContext()
}

type TypeSwitchCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchCaseContext() *TypeSwitchCaseContext {
	var p = new(TypeSwitchCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchCase
	return p
}

func InitEmptyTypeSwitchCaseContext(p *TypeSwitchCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeSwitchCase
}

func (*TypeSwitchCaseContext) IsTypeSwitchCaseContext() {}

func NewTypeSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchCaseContext {
	var p = new(TypeSwitchCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeSwitchCase

	return p
}

func (s *TypeSwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ChainParserCASE, 0)
}

func (s *TypeSwitchCaseContext) TypeList() ITypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeSwitchCaseContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ChainParserDEFAULT, 0)
}

func (s *TypeSwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeSwitchCase(s)
	}
}

func (s *TypeSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeSwitchCase(s)
	}
}

func (p *ChainParser) TypeSwitchCase() (localctx ITypeSwitchCaseContext) {
	localctx = NewTypeSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ChainParserRULE_typeSwitchCase)
	p.SetState(785)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserCASE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(782)
			p.Match(ChainParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(783)
			p.TypeList()
		}

	case ChainParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(784)
			p.Match(ChainParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllType_() []IType_Context
	Type_(i int) IType_Context
	AllNIL_LIT() []antlr.TerminalNode
	NIL_LIT(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeList
	return p
}

func InitEmptyTypeListContext(p *TypeListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeList
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) AllType_() []IType_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_Context); ok {
			len++
		}
	}

	tst := make([]IType_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_Context); ok {
			tst[i] = t.(IType_Context)
			i++
		}
	}

	return tst
}

func (s *TypeListContext) Type_(i int) IType_Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeListContext) AllNIL_LIT() []antlr.TerminalNode {
	return s.GetTokens(ChainParserNIL_LIT)
}

func (s *TypeListContext) NIL_LIT(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserNIL_LIT, i)
}

func (s *TypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *TypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeList(s)
	}
}

func (s *TypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeList(s)
	}
}

func (p *ChainParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ChainParserRULE_typeList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(789)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(787)
			p.Type_()
		}

	case 2:
		{
			p.SetState(788)
			p.Match(ChainParserNIL_LIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(791)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(794)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(792)
					p.Type_()
				}

			case 2:
				{
					p.SetState(793)
					p.Match(ChainParserNIL_LIT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(800)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStmtContext is an interface to support dynamic dispatch.
type ISelectStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	AllCommClause() []ICommClauseContext
	CommClause(i int) ICommClauseContext

	// IsSelectStmtContext differentiates from other interfaces.
	IsSelectStmtContext()
}

type SelectStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtContext() *SelectStmtContext {
	var p = new(SelectStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_selectStmt
	return p
}

func InitEmptySelectStmtContext(p *SelectStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_selectStmt
}

func (*SelectStmtContext) IsSelectStmtContext() {}

func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtContext {
	var p = new(SelectStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_selectStmt

	return p
}

func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ChainParserSELECT, 0)
}

func (s *SelectStmtContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *SelectStmtContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *SelectStmtContext) AllCommClause() []ICommClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommClauseContext); ok {
			len++
		}
	}

	tst := make([]ICommClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommClauseContext); ok {
			tst[i] = t.(ICommClauseContext)
			i++
		}
	}

	return tst
}

func (s *SelectStmtContext) CommClause(i int) ICommClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommClauseContext)
}

func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSelectStmt(s)
	}
}

func (s *SelectStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSelectStmt(s)
	}
}

func (p *ChainParser) SelectStmt() (localctx ISelectStmtContext) {
	localctx = NewSelectStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ChainParserRULE_selectStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.Match(ChainParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(802)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserCASE || _la == ChainParserDEFAULT {
		{
			p.SetState(803)
			p.CommClause()
		}

		p.SetState(808)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(809)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommClauseContext is an interface to support dynamic dispatch.
type ICommClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CommCase() ICommCaseContext
	COLON() antlr.TerminalNode
	StatementList() IStatementListContext

	// IsCommClauseContext differentiates from other interfaces.
	IsCommClauseContext()
}

type CommClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommClauseContext() *CommClauseContext {
	var p = new(CommClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_commClause
	return p
}

func InitEmptyCommClauseContext(p *CommClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_commClause
}

func (*CommClauseContext) IsCommClauseContext() {}

func NewCommClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommClauseContext {
	var p = new(CommClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_commClause

	return p
}

func (s *CommClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CommClauseContext) CommCase() ICommCaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommCaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommCaseContext)
}

func (s *CommClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *CommClauseContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *CommClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterCommClause(s)
	}
}

func (s *CommClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitCommClause(s)
	}
}

func (p *ChainParser) CommClause() (localctx ICommClauseContext) {
	localctx = NewCommClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, ChainParserRULE_commClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(811)
		p.CommCase()
	}
	{
		p.SetState(812)
		p.Match(ChainParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(813)
		p.StatementList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommCaseContext is an interface to support dynamic dispatch.
type ICommCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	SendStmt() ISendStmtContext
	RecvStmt() IRecvStmtContext
	DEFAULT() antlr.TerminalNode

	// IsCommCaseContext differentiates from other interfaces.
	IsCommCaseContext()
}

type CommCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommCaseContext() *CommCaseContext {
	var p = new(CommCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_commCase
	return p
}

func InitEmptyCommCaseContext(p *CommCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_commCase
}

func (*CommCaseContext) IsCommCaseContext() {}

func NewCommCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommCaseContext {
	var p = new(CommCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_commCase

	return p
}

func (s *CommCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CommCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ChainParserCASE, 0)
}

func (s *CommCaseContext) SendStmt() ISendStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISendStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISendStmtContext)
}

func (s *CommCaseContext) RecvStmt() IRecvStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecvStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecvStmtContext)
}

func (s *CommCaseContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ChainParserDEFAULT, 0)
}

func (s *CommCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterCommCase(s)
	}
}

func (s *CommCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitCommCase(s)
	}
}

func (p *ChainParser) CommCase() (localctx ICommCaseContext) {
	localctx = NewCommCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, ChainParserRULE_commCase)
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserCASE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(815)
			p.Match(ChainParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(816)
				p.SendStmt()
			}

		case 2:
			{
				p.SetState(817)
				p.RecvStmt()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case ChainParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(820)
			p.Match(ChainParserDEFAULT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecvStmtContext is an interface to support dynamic dispatch.
type IRecvStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRecvExpr returns the recvExpr rule contexts.
	GetRecvExpr() IExpressionContext

	// SetRecvExpr sets the recvExpr rule contexts.
	SetRecvExpr(IExpressionContext)

	// Getter signatures
	Expression() IExpressionContext
	ExpressionList() IExpressionListContext
	ASSIGN() antlr.TerminalNode
	IdentifierList() IIdentifierListContext
	DECLARE_ASSIGN() antlr.TerminalNode

	// IsRecvStmtContext differentiates from other interfaces.
	IsRecvStmtContext()
}

type RecvStmtContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	recvExpr IExpressionContext
}

func NewEmptyRecvStmtContext() *RecvStmtContext {
	var p = new(RecvStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_recvStmt
	return p
}

func InitEmptyRecvStmtContext(p *RecvStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_recvStmt
}

func (*RecvStmtContext) IsRecvStmtContext() {}

func NewRecvStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecvStmtContext {
	var p = new(RecvStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_recvStmt

	return p
}

func (s *RecvStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *RecvStmtContext) GetRecvExpr() IExpressionContext { return s.recvExpr }

func (s *RecvStmtContext) SetRecvExpr(v IExpressionContext) { s.recvExpr = v }

func (s *RecvStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RecvStmtContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *RecvStmtContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *RecvStmtContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *RecvStmtContext) DECLARE_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserDECLARE_ASSIGN, 0)
}

func (s *RecvStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecvStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecvStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterRecvStmt(s)
	}
}

func (s *RecvStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitRecvStmt(s)
	}
}

func (p *ChainParser) RecvStmt() (localctx IRecvStmtContext) {
	localctx = NewRecvStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, ChainParserRULE_recvStmt)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(829)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(823)
			p.ExpressionList()
		}
		{
			p.SetState(824)
			p.Match(ChainParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(826)
			p.IdentifierList()
		}
		{
			p.SetState(827)
			p.Match(ChainParserDECLARE_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(831)

		var _x = p.expression(0)

		localctx.(*RecvStmtContext).recvExpr = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStmtContext is an interface to support dynamic dispatch.
type IForStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	Block() IBlockContext
	Condition() IConditionContext
	ForClause() IForClauseContext
	RangeClause() IRangeClauseContext

	// IsForStmtContext differentiates from other interfaces.
	IsForStmtContext()
}

type ForStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtContext() *ForStmtContext {
	var p = new(ForStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_forStmt
	return p
}

func InitEmptyForStmtContext(p *ForStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_forStmt
}

func (*ForStmtContext) IsForStmtContext() {}

func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtContext {
	var p = new(ForStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_forStmt

	return p
}

func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(ChainParserFOR, 0)
}

func (s *ForStmtContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForStmtContext) Condition() IConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ForStmtContext) ForClause() IForClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForClauseContext)
}

func (s *ForStmtContext) RangeClause() IRangeClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeClauseContext)
}

func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterForStmt(s)
	}
}

func (s *ForStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitForStmt(s)
	}
}

func (p *ChainParser) ForStmt() (localctx IForStmtContext) {
	localctx = NewForStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, ChainParserRULE_forStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(833)
		p.Match(ChainParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(837)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(834)
			p.Condition()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(835)
			p.ForClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(836)
			p.RangeClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(839)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_condition
	return p
}

func InitEmptyConditionContext(p *ConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_condition
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitCondition(s)
	}
}

func (p *ChainParser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, ChainParserRULE_condition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForClauseContext is an interface to support dynamic dispatch.
type IForClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInitStmt returns the initStmt rule contexts.
	GetInitStmt() ISimpleStmtContext

	// GetPostStmt returns the postStmt rule contexts.
	GetPostStmt() ISimpleStmtContext

	// SetInitStmt sets the initStmt rule contexts.
	SetInitStmt(ISimpleStmtContext)

	// SetPostStmt sets the postStmt rule contexts.
	SetPostStmt(ISimpleStmtContext)

	// Getter signatures
	AllEos() []IEosContext
	Eos(i int) IEosContext
	Expression() IExpressionContext
	AllSimpleStmt() []ISimpleStmtContext
	SimpleStmt(i int) ISimpleStmtContext

	// IsForClauseContext differentiates from other interfaces.
	IsForClauseContext()
}

type ForClauseContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	initStmt ISimpleStmtContext
	postStmt ISimpleStmtContext
}

func NewEmptyForClauseContext() *ForClauseContext {
	var p = new(ForClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_forClause
	return p
}

func InitEmptyForClauseContext(p *ForClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_forClause
}

func (*ForClauseContext) IsForClauseContext() {}

func NewForClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForClauseContext {
	var p = new(ForClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_forClause

	return p
}

func (s *ForClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ForClauseContext) GetInitStmt() ISimpleStmtContext { return s.initStmt }

func (s *ForClauseContext) GetPostStmt() ISimpleStmtContext { return s.postStmt }

func (s *ForClauseContext) SetInitStmt(v ISimpleStmtContext) { s.initStmt = v }

func (s *ForClauseContext) SetPostStmt(v ISimpleStmtContext) { s.postStmt = v }

func (s *ForClauseContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *ForClauseContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ForClauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForClauseContext) AllSimpleStmt() []ISimpleStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			len++
		}
	}

	tst := make([]ISimpleStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISimpleStmtContext); ok {
			tst[i] = t.(ISimpleStmtContext)
			i++
		}
	}

	return tst
}

func (s *ForClauseContext) SimpleStmt(i int) ISimpleStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *ForClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterForClause(s)
	}
}

func (s *ForClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitForClause(s)
	}
}

func (p *ChainParser) ForClause() (localctx IForClauseContext) {
	localctx = NewForClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, ChainParserRULE_forClause)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(844)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(843)

			var _x = p.SimpleStmt()

			localctx.(*ForClauseContext).initStmt = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(846)
		p.Eos()
	}
	p.SetState(848)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(847)
			p.expression(0)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(850)
		p.Eos()
	}
	p.SetState(852)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(851)

			var _x = p.SimpleStmt()

			localctx.(*ForClauseContext).postStmt = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeClauseContext is an interface to support dynamic dispatch.
type IRangeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE() antlr.TerminalNode
	Expression() IExpressionContext
	ExpressionList() IExpressionListContext
	ASSIGN() antlr.TerminalNode
	IdentifierList() IIdentifierListContext
	DECLARE_ASSIGN() antlr.TerminalNode

	// IsRangeClauseContext differentiates from other interfaces.
	IsRangeClauseContext()
}

type RangeClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeClauseContext() *RangeClauseContext {
	var p = new(RangeClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_rangeClause
	return p
}

func InitEmptyRangeClauseContext(p *RangeClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_rangeClause
}

func (*RangeClauseContext) IsRangeClauseContext() {}

func NewRangeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeClauseContext {
	var p = new(RangeClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_rangeClause

	return p
}

func (s *RangeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeClauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ChainParserRANGE, 0)
}

func (s *RangeClauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RangeClauseContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *RangeClauseContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserASSIGN, 0)
}

func (s *RangeClauseContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *RangeClauseContext) DECLARE_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ChainParserDECLARE_ASSIGN, 0)
}

func (s *RangeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterRangeClause(s)
	}
}

func (s *RangeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitRangeClause(s)
	}
}

func (p *ChainParser) RangeClause() (localctx IRangeClauseContext) {
	localctx = NewRangeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, ChainParserRULE_rangeClause)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(860)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(854)
			p.ExpressionList()
		}
		{
			p.SetState(855)
			p.Match(ChainParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(857)
			p.IdentifierList()
		}
		{
			p.SetState(858)
			p.Match(ChainParserDECLARE_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(862)
		p.Match(ChainParserRANGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(863)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGoStmtContext is an interface to support dynamic dispatch.
type IGoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GO() antlr.TerminalNode
	Expression() IExpressionContext

	// IsGoStmtContext differentiates from other interfaces.
	IsGoStmtContext()
}

type GoStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoStmtContext() *GoStmtContext {
	var p = new(GoStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_goStmt
	return p
}

func InitEmptyGoStmtContext(p *GoStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_goStmt
}

func (*GoStmtContext) IsGoStmtContext() {}

func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GoStmtContext {
	var p = new(GoStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_goStmt

	return p
}

func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GoStmtContext) GO() antlr.TerminalNode {
	return s.GetToken(ChainParserGO, 0)
}

func (s *GoStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GoStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterGoStmt(s)
	}
}

func (s *GoStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitGoStmt(s)
	}
}

func (p *ChainParser) GoStmt() (localctx IGoStmtContext) {
	localctx = NewGoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, ChainParserRULE_goStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(865)
		p.Match(ChainParserGO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(866)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeName() ITypeNameContext
	TypeArgs() ITypeArgsContext
	TypeLit() ITypeLitContext
	L_PAREN() antlr.TerminalNode
	Type_() IType_Context
	R_PAREN() antlr.TerminalNode

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_type_
	return p
}

func InitEmptyType_Context(p *Type_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_type_
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *Type_Context) TypeArgs() ITypeArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgsContext)
}

func (s *Type_Context) TypeLit() ITypeLitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLitContext)
}

func (s *Type_Context) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *Type_Context) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_Context) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterType_(s)
	}
}

func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitType_(s)
	}
}

func (p *ChainParser) Type_() (localctx IType_Context) {
	localctx = NewType_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, ChainParserRULE_type_)
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(868)
			p.TypeName()
		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(869)
				p.TypeArgs()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(872)
			p.TypeLit()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(873)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(874)
			p.Type_()
		}
		{
			p.SetState(875)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgsContext is an interface to support dynamic dispatch.
type ITypeArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	TypeList() ITypeListContext
	R_BRACKET() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsTypeArgsContext differentiates from other interfaces.
	IsTypeArgsContext()
}

type TypeArgsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgsContext() *TypeArgsContext {
	var p = new(TypeArgsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeArgs
	return p
}

func InitEmptyTypeArgsContext(p *TypeArgsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeArgs
}

func (*TypeArgsContext) IsTypeArgsContext() {}

func NewTypeArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgsContext {
	var p = new(TypeArgsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeArgs

	return p
}

func (s *TypeArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgsContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *TypeArgsContext) TypeList() ITypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeArgsContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *TypeArgsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, 0)
}

func (s *TypeArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeArgs(s)
	}
}

func (s *TypeArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeArgs(s)
	}
}

func (p *ChainParser) TypeArgs() (localctx ITypeArgsContext) {
	localctx = NewTypeArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, ChainParserRULE_typeArgs)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(879)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(880)
		p.TypeList()
	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserCOMMA {
		{
			p.SetState(881)
			p.Match(ChainParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(884)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QualifiedIdent() IQualifiedIdentContext
	IDENTIFIER() antlr.TerminalNode

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeName
	return p
}

func InitEmptyTypeNameContext(p *TypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeName
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) QualifiedIdent() IQualifiedIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentContext)
}

func (s *TypeNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (p *ChainParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, ChainParserRULE_typeName)
	p.SetState(888)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(886)
			p.QualifiedIdent()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(887)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeLitContext is an interface to support dynamic dispatch.
type ITypeLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ArrayType() IArrayTypeContext
	StructType() IStructTypeContext
	PointerType() IPointerTypeContext
	FunctionType() IFunctionTypeContext
	InterfaceType() IInterfaceTypeContext
	SliceType() ISliceTypeContext
	MapType() IMapTypeContext
	ChannelType() IChannelTypeContext

	// IsTypeLitContext differentiates from other interfaces.
	IsTypeLitContext()
}

type TypeLitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeLitContext() *TypeLitContext {
	var p = new(TypeLitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeLit
	return p
}

func InitEmptyTypeLitContext(p *TypeLitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeLit
}

func (*TypeLitContext) IsTypeLitContext() {}

func NewTypeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeLitContext {
	var p = new(TypeLitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeLit

	return p
}

func (s *TypeLitContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeLitContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *TypeLitContext) StructType() IStructTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *TypeLitContext) PointerType() IPointerTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerTypeContext)
}

func (s *TypeLitContext) FunctionType() IFunctionTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *TypeLitContext) InterfaceType() IInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeContext)
}

func (s *TypeLitContext) SliceType() ISliceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeContext)
}

func (s *TypeLitContext) MapType() IMapTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *TypeLitContext) ChannelType() IChannelTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChannelTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChannelTypeContext)
}

func (s *TypeLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeLit(s)
	}
}

func (s *TypeLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeLit(s)
	}
}

func (p *ChainParser) TypeLit() (localctx ITypeLitContext) {
	localctx = NewTypeLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, ChainParserRULE_typeLit)
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 87, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(890)
			p.ArrayType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(891)
			p.StructType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(892)
			p.PointerType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(893)
			p.FunctionType()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(894)
			p.InterfaceType()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(895)
			p.SliceType()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(896)
			p.MapType()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(897)
			p.ChannelType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	ArrayLength() IArrayLengthContext
	R_BRACKET() antlr.TerminalNode
	ElementType() IElementTypeContext

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arrayType
	return p
}

func InitEmptyArrayTypeContext(p *ArrayTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arrayType
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *ArrayTypeContext) ArrayLength() IArrayLengthContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLengthContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLengthContext)
}

func (s *ArrayTypeContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *ArrayTypeContext) ElementType() IElementTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterArrayType(s)
	}
}

func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitArrayType(s)
	}
}

func (p *ChainParser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, ChainParserRULE_arrayType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(900)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(901)
		p.ArrayLength()
	}
	{
		p.SetState(902)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(903)
		p.ElementType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayLengthContext is an interface to support dynamic dispatch.
type IArrayLengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext

	// IsArrayLengthContext differentiates from other interfaces.
	IsArrayLengthContext()
}

type ArrayLengthContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLengthContext() *ArrayLengthContext {
	var p = new(ArrayLengthContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arrayLength
	return p
}

func InitEmptyArrayLengthContext(p *ArrayLengthContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arrayLength
}

func (*ArrayLengthContext) IsArrayLengthContext() {}

func NewArrayLengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLengthContext {
	var p = new(ArrayLengthContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_arrayLength

	return p
}

func (s *ArrayLengthContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLengthContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterArrayLength(s)
	}
}

func (s *ArrayLengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitArrayLength(s)
	}
}

func (p *ChainParser) ArrayLength() (localctx IArrayLengthContext) {
	localctx = NewArrayLengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, ChainParserRULE_arrayLength)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(905)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementTypeContext is an interface to support dynamic dispatch.
type IElementTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() IType_Context

	// IsElementTypeContext differentiates from other interfaces.
	IsElementTypeContext()
}

type ElementTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementTypeContext() *ElementTypeContext {
	var p = new(ElementTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_elementType
	return p
}

func InitEmptyElementTypeContext(p *ElementTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_elementType
}

func (*ElementTypeContext) IsElementTypeContext() {}

func NewElementTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementTypeContext {
	var p = new(ElementTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_elementType

	return p
}

func (s *ElementTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementTypeContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ElementTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterElementType(s)
	}
}

func (s *ElementTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitElementType(s)
	}
}

func (p *ChainParser) ElementType() (localctx IElementTypeContext) {
	localctx = NewElementTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, ChainParserRULE_elementType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(907)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPointerTypeContext is an interface to support dynamic dispatch.
type IPointerTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STAR() antlr.TerminalNode
	Type_() IType_Context

	// IsPointerTypeContext differentiates from other interfaces.
	IsPointerTypeContext()
}

type PointerTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerTypeContext() *PointerTypeContext {
	var p = new(PointerTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_pointerType
	return p
}

func InitEmptyPointerTypeContext(p *PointerTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_pointerType
}

func (*PointerTypeContext) IsPointerTypeContext() {}

func NewPointerTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerTypeContext {
	var p = new(PointerTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_pointerType

	return p
}

func (s *PointerTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerTypeContext) STAR() antlr.TerminalNode {
	return s.GetToken(ChainParserSTAR, 0)
}

func (s *PointerTypeContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PointerTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPointerType(s)
	}
}

func (s *PointerTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPointerType(s)
	}
}

func (p *ChainParser) PointerType() (localctx IPointerTypeContext) {
	localctx = NewPointerTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, ChainParserRULE_pointerType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(909)
		p.Match(ChainParserSTAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(910)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTERFACE() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	AllEos() []IEosContext
	Eos(i int) IEosContext
	AllMethodSpec() []IMethodSpecContext
	MethodSpec(i int) IMethodSpecContext
	AllTypeElement() []ITypeElementContext
	TypeElement(i int) ITypeElementContext

	// IsInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceTypeContext()
}

type InterfaceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_interfaceType
	return p
}

func InitEmptyInterfaceTypeContext(p *InterfaceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_interfaceType
}

func (*InterfaceTypeContext) IsInterfaceTypeContext() {}

func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_interfaceType

	return p
}

func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(ChainParserINTERFACE, 0)
}

func (s *InterfaceTypeContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *InterfaceTypeContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *InterfaceTypeContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceTypeContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *InterfaceTypeContext) AllMethodSpec() []IMethodSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMethodSpecContext); ok {
			len++
		}
	}

	tst := make([]IMethodSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMethodSpecContext); ok {
			tst[i] = t.(IMethodSpecContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceTypeContext) MethodSpec(i int) IMethodSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodSpecContext)
}

func (s *InterfaceTypeContext) AllTypeElement() []ITypeElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeElementContext); ok {
			len++
		}
	}

	tst := make([]ITypeElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeElementContext); ok {
			tst[i] = t.(ITypeElementContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceTypeContext) TypeElement(i int) ITypeElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeElementContext)
}

func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterInterfaceType(s)
	}
}

func (s *InterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitInterfaceType(s)
	}
}

func (p *ChainParser) InterfaceType() (localctx IInterfaceTypeContext) {
	localctx = NewInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, ChainParserRULE_interfaceType)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(912)
		p.Match(ChainParserINTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(913)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(922)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(916)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(914)
					p.MethodSpec()
				}

			case 2:
				{
					p.SetState(915)
					p.TypeElement()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(918)
				p.Eos()
			}

		}
		p.SetState(924)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(925)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISliceTypeContext is an interface to support dynamic dispatch.
type ISliceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	R_BRACKET() antlr.TerminalNode
	ElementType() IElementTypeContext

	// IsSliceTypeContext differentiates from other interfaces.
	IsSliceTypeContext()
}

type SliceTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypeContext() *SliceTypeContext {
	var p = new(SliceTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sliceType
	return p
}

func InitEmptySliceTypeContext(p *SliceTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_sliceType
}

func (*SliceTypeContext) IsSliceTypeContext() {}

func NewSliceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypeContext {
	var p = new(SliceTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_sliceType

	return p
}

func (s *SliceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypeContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *SliceTypeContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *SliceTypeContext) ElementType() IElementTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *SliceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSliceType(s)
	}
}

func (s *SliceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSliceType(s)
	}
}

func (p *ChainParser) SliceType() (localctx ISliceTypeContext) {
	localctx = NewSliceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, ChainParserRULE_sliceType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(928)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(929)
		p.ElementType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMapTypeContext is an interface to support dynamic dispatch.
type IMapTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MAP() antlr.TerminalNode
	L_BRACKET() antlr.TerminalNode
	Type_() IType_Context
	R_BRACKET() antlr.TerminalNode
	ElementType() IElementTypeContext

	// IsMapTypeContext differentiates from other interfaces.
	IsMapTypeContext()
}

type MapTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeContext() *MapTypeContext {
	var p = new(MapTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_mapType
	return p
}

func InitEmptyMapTypeContext(p *MapTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_mapType
}

func (*MapTypeContext) IsMapTypeContext() {}

func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeContext {
	var p = new(MapTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_mapType

	return p
}

func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeContext) MAP() antlr.TerminalNode {
	return s.GetToken(ChainParserMAP, 0)
}

func (s *MapTypeContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *MapTypeContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *MapTypeContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *MapTypeContext) ElementType() IElementTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterMapType(s)
	}
}

func (s *MapTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitMapType(s)
	}
}

func (p *ChainParser) MapType() (localctx IMapTypeContext) {
	localctx = NewMapTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, ChainParserRULE_mapType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(931)
		p.Match(ChainParserMAP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(932)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(933)
		p.Type_()
	}
	{
		p.SetState(934)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(935)
		p.ElementType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChannelTypeContext is an interface to support dynamic dispatch.
type IChannelTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ElementType() IElementTypeContext
	CHAN() antlr.TerminalNode
	RECEIVE() antlr.TerminalNode

	// IsChannelTypeContext differentiates from other interfaces.
	IsChannelTypeContext()
}

type ChannelTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelTypeContext() *ChannelTypeContext {
	var p = new(ChannelTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_channelType
	return p
}

func InitEmptyChannelTypeContext(p *ChannelTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_channelType
}

func (*ChannelTypeContext) IsChannelTypeContext() {}

func NewChannelTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelTypeContext {
	var p = new(ChannelTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_channelType

	return p
}

func (s *ChannelTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelTypeContext) ElementType() IElementTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *ChannelTypeContext) CHAN() antlr.TerminalNode {
	return s.GetToken(ChainParserCHAN, 0)
}

func (s *ChannelTypeContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(ChainParserRECEIVE, 0)
}

func (s *ChannelTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterChannelType(s)
	}
}

func (s *ChannelTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitChannelType(s)
	}
}

func (p *ChainParser) ChannelType() (localctx IChannelTypeContext) {
	localctx = NewChannelTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, ChainParserRULE_channelType)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(943)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.SetState(937)

		if !(p.isNotReceive()) {
			p.SetError(antlr.NewFailedPredicateException(p, "p.isNotReceive()", ""))
			goto errorExit
		}
		{
			p.SetState(938)
			p.Match(ChainParserCHAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(939)
			p.Match(ChainParserCHAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(940)
			p.Match(ChainParserRECEIVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(941)
			p.Match(ChainParserRECEIVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(942)
			p.Match(ChainParserCHAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(945)
		p.ElementType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodSpecContext is an interface to support dynamic dispatch.
type IMethodSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Parameters() IParametersContext
	Result() IResultContext

	// IsMethodSpecContext differentiates from other interfaces.
	IsMethodSpecContext()
}

type MethodSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodSpecContext() *MethodSpecContext {
	var p = new(MethodSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodSpec
	return p
}

func InitEmptyMethodSpecContext(p *MethodSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodSpec
}

func (*MethodSpecContext) IsMethodSpecContext() {}

func NewMethodSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodSpecContext {
	var p = new(MethodSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_methodSpec

	return p
}

func (s *MethodSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodSpecContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *MethodSpecContext) Parameters() IParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *MethodSpecContext) Result() IResultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResultContext)
}

func (s *MethodSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterMethodSpec(s)
	}
}

func (s *MethodSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitMethodSpec(s)
	}
}

func (p *ChainParser) MethodSpec() (localctx IMethodSpecContext) {
	localctx = NewMethodSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, ChainParserRULE_methodSpec)
	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(947)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(948)
			p.Parameters()
		}
		{
			p.SetState(949)
			p.Result()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(951)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(952)
			p.Parameters()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNC() antlr.TerminalNode
	Signature() ISignatureContext

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionType
	return p
}

func InitEmptyFunctionTypeContext(p *FunctionTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionType
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ChainParserFUNC, 0)
}

func (s *FunctionTypeContext) Signature() ISignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

func (p *ChainParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, ChainParserRULE_functionType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(955)
		p.Match(ChainParserFUNC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(956)
		p.Signature()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISignatureContext is an interface to support dynamic dispatch.
type ISignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parameters() IParametersContext
	Result() IResultContext

	// IsSignatureContext differentiates from other interfaces.
	IsSignatureContext()
}

type SignatureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignatureContext() *SignatureContext {
	var p = new(SignatureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_signature
	return p
}

func InitEmptySignatureContext(p *SignatureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_signature
}

func (*SignatureContext) IsSignatureContext() {}

func NewSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignatureContext {
	var p = new(SignatureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_signature

	return p
}

func (s *SignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *SignatureContext) Parameters() IParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *SignatureContext) Result() IResultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResultContext)
}

func (s *SignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSignature(s)
	}
}

func (s *SignatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSignature(s)
	}
}

func (p *ChainParser) Signature() (localctx ISignatureContext) {
	localctx = NewSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, ChainParserRULE_signature)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.Parameters()
	}
	p.SetState(960)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(959)
			p.Result()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResultContext is an interface to support dynamic dispatch.
type IResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parameters() IParametersContext
	Type_() IType_Context

	// IsResultContext differentiates from other interfaces.
	IsResultContext()
}

type ResultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResultContext() *ResultContext {
	var p = new(ResultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_result
	return p
}

func InitEmptyResultContext(p *ResultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_result
}

func (*ResultContext) IsResultContext() {}

func NewResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResultContext {
	var p = new(ResultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_result

	return p
}

func (s *ResultContext) GetParser() antlr.Parser { return s.parser }

func (s *ResultContext) Parameters() IParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *ResultContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterResult(s)
	}
}

func (s *ResultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitResult(s)
	}
}

func (p *ChainParser) Result() (localctx IResultContext) {
	localctx = NewResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, ChainParserRULE_result)
	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(962)
			p.Parameters()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(963)
			p.Type_()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParametersContext is an interface to support dynamic dispatch.
type IParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllParameterDecl() []IParameterDeclContext
	ParameterDecl(i int) IParameterDeclContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsParametersContext differentiates from other interfaces.
	IsParametersContext()
}

type ParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParametersContext() *ParametersContext {
	var p = new(ParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_parameters
	return p
}

func InitEmptyParametersContext(p *ParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_parameters
}

func (*ParametersContext) IsParametersContext() {}

func NewParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametersContext {
	var p = new(ParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_parameters

	return p
}

func (s *ParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametersContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *ParametersContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *ParametersContext) AllParameterDecl() []IParameterDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParameterDeclContext); ok {
			len++
		}
	}

	tst := make([]IParameterDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParameterDeclContext); ok {
			tst[i] = t.(IParameterDeclContext)
			i++
		}
	}

	return tst
}

func (s *ParametersContext) ParameterDecl(i int) IParameterDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclContext)
}

func (s *ParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *ParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *ParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterParameters(s)
	}
}

func (s *ParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitParameters(s)
	}
}

func (p *ChainParser) Parameters() (localctx IParametersContext) {
	localctx = NewParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, ChainParserRULE_parameters)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(966)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(967)
			p.ParameterDecl()
		}
		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(968)
					p.Match(ChainParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(969)
					p.ParameterDecl()
				}

			}
			p.SetState(974)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserCOMMA {
			{
				p.SetState(975)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(980)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterDeclContext is an interface to support dynamic dispatch.
type IParameterDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() IType_Context
	IdentifierList() IIdentifierListContext
	ELLIPSIS() antlr.TerminalNode

	// IsParameterDeclContext differentiates from other interfaces.
	IsParameterDeclContext()
}

type ParameterDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclContext() *ParameterDeclContext {
	var p = new(ParameterDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_parameterDecl
	return p
}

func InitEmptyParameterDeclContext(p *ParameterDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_parameterDecl
}

func (*ParameterDeclContext) IsParameterDeclContext() {}

func NewParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclContext {
	var p = new(ParameterDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_parameterDecl

	return p
}

func (s *ParameterDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ParameterDeclContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ParameterDeclContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(ChainParserELLIPSIS, 0)
}

func (s *ParameterDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterParameterDecl(s)
	}
}

func (s *ParameterDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitParameterDecl(s)
	}
}

func (p *ChainParser) ParameterDecl() (localctx IParameterDeclContext) {
	localctx = NewParameterDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, ChainParserRULE_parameterDecl)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(983)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(982)
			p.IdentifierList()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(986)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(985)
			p.Match(ChainParserELLIPSIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(988)
		p.Type_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnary_op returns the unary_op token.
	GetUnary_op() antlr.Token

	// GetMul_op returns the mul_op token.
	GetMul_op() antlr.Token

	// GetAdd_op returns the add_op token.
	GetAdd_op() antlr.Token

	// GetRel_op returns the rel_op token.
	GetRel_op() antlr.Token

	// SetUnary_op sets the unary_op token.
	SetUnary_op(antlr.Token)

	// SetMul_op sets the mul_op token.
	SetMul_op(antlr.Token)

	// SetAdd_op sets the add_op token.
	SetAdd_op(antlr.Token)

	// SetRel_op sets the rel_op token.
	SetRel_op(antlr.Token)

	// Getter signatures
	PrimaryExpr() IPrimaryExprContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode
	EXCLAMATION() antlr.TerminalNode
	CARET() antlr.TerminalNode
	STAR() antlr.TerminalNode
	AMPERSAND() antlr.TerminalNode
	RECEIVE() antlr.TerminalNode
	DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode
	LSHIFT() antlr.TerminalNode
	RSHIFT() antlr.TerminalNode
	BIT_CLEAR() antlr.TerminalNode
	OR() antlr.TerminalNode
	EQUALS() antlr.TerminalNode
	NOT_EQUALS() antlr.TerminalNode
	LESS() antlr.TerminalNode
	LESS_OR_EQUALS() antlr.TerminalNode
	GREATER() antlr.TerminalNode
	GREATER_OR_EQUALS() antlr.TerminalNode
	LOGICAL_AND() antlr.TerminalNode
	LOGICAL_OR() antlr.TerminalNode

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	unary_op antlr.Token
	mul_op   antlr.Token
	add_op   antlr.Token
	rel_op   antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetUnary_op() antlr.Token { return s.unary_op }

func (s *ExpressionContext) GetMul_op() antlr.Token { return s.mul_op }

func (s *ExpressionContext) GetAdd_op() antlr.Token { return s.add_op }

func (s *ExpressionContext) GetRel_op() antlr.Token { return s.rel_op }

func (s *ExpressionContext) SetUnary_op(v antlr.Token) { s.unary_op = v }

func (s *ExpressionContext) SetMul_op(v antlr.Token) { s.mul_op = v }

func (s *ExpressionContext) SetAdd_op(v antlr.Token) { s.add_op = v }

func (s *ExpressionContext) SetRel_op(v antlr.Token) { s.rel_op = v }

func (s *ExpressionContext) PrimaryExpr() IPrimaryExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryExprContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ChainParserPLUS, 0)
}

func (s *ExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ChainParserMINUS, 0)
}

func (s *ExpressionContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(ChainParserEXCLAMATION, 0)
}

func (s *ExpressionContext) CARET() antlr.TerminalNode {
	return s.GetToken(ChainParserCARET, 0)
}

func (s *ExpressionContext) STAR() antlr.TerminalNode {
	return s.GetToken(ChainParserSTAR, 0)
}

func (s *ExpressionContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(ChainParserAMPERSAND, 0)
}

func (s *ExpressionContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(ChainParserRECEIVE, 0)
}

func (s *ExpressionContext) DIV() antlr.TerminalNode {
	return s.GetToken(ChainParserDIV, 0)
}

func (s *ExpressionContext) MOD() antlr.TerminalNode {
	return s.GetToken(ChainParserMOD, 0)
}

func (s *ExpressionContext) LSHIFT() antlr.TerminalNode {
	return s.GetToken(ChainParserLSHIFT, 0)
}

func (s *ExpressionContext) RSHIFT() antlr.TerminalNode {
	return s.GetToken(ChainParserRSHIFT, 0)
}

func (s *ExpressionContext) BIT_CLEAR() antlr.TerminalNode {
	return s.GetToken(ChainParserBIT_CLEAR, 0)
}

func (s *ExpressionContext) OR() antlr.TerminalNode {
	return s.GetToken(ChainParserOR, 0)
}

func (s *ExpressionContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(ChainParserEQUALS, 0)
}

func (s *ExpressionContext) NOT_EQUALS() antlr.TerminalNode {
	return s.GetToken(ChainParserNOT_EQUALS, 0)
}

func (s *ExpressionContext) LESS() antlr.TerminalNode {
	return s.GetToken(ChainParserLESS, 0)
}

func (s *ExpressionContext) LESS_OR_EQUALS() antlr.TerminalNode {
	return s.GetToken(ChainParserLESS_OR_EQUALS, 0)
}

func (s *ExpressionContext) GREATER() antlr.TerminalNode {
	return s.GetToken(ChainParserGREATER, 0)
}

func (s *ExpressionContext) GREATER_OR_EQUALS() antlr.TerminalNode {
	return s.GetToken(ChainParserGREATER_OR_EQUALS, 0)
}

func (s *ExpressionContext) LOGICAL_AND() antlr.TerminalNode {
	return s.GetToken(ChainParserLOGICAL_AND, 0)
}

func (s *ExpressionContext) LOGICAL_OR() antlr.TerminalNode {
	return s.GetToken(ChainParserLOGICAL_OR, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *ChainParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *ChainParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 196
	p.EnterRecursionRule(localctx, 196, ChainParserRULE_expression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(991)
			p.PrimaryExpr()
		}

	case 2:
		{
			p.SetState(992)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExpressionContext).unary_op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-67)) & ^0x3f) == 0 && ((int64(1)<<(_la-67))&127) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExpressionContext).unary_op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(993)
			p.expression(6)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1011)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ChainParserRULE_expression)
				p.SetState(996)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(997)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).mul_op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-61)) & ^0x3f) == 0 && ((int64(1)<<(_la-61))&3103) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).mul_op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(998)
					p.expression(6)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ChainParserRULE_expression)
				p.SetState(999)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(1000)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).add_op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&1793) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).add_op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1001)
					p.expression(5)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ChainParserRULE_expression)
				p.SetState(1002)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(1003)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).rel_op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1134907106097364992) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).rel_op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1004)
					p.expression(4)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ChainParserRULE_expression)
				p.SetState(1005)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(1006)
					p.Match(ChainParserLOGICAL_AND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1007)
					p.expression(3)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ChainParserRULE_expression)
				p.SetState(1008)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(1009)
					p.Match(ChainParserLOGICAL_OR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1010)
					p.expression(2)
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryExprContext is an interface to support dynamic dispatch.
type IPrimaryExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Operand() IOperandContext
	Conversion() IConversionContext
	MethodExpr() IMethodExprContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllIndex() []IIndexContext
	Index(i int) IIndexContext
	AllSlice_() []ISlice_Context
	Slice_(i int) ISlice_Context
	AllTypeAssertion() []ITypeAssertionContext
	TypeAssertion(i int) ITypeAssertionContext
	AllArguments() []IArgumentsContext
	Arguments(i int) IArgumentsContext

	// IsPrimaryExprContext differentiates from other interfaces.
	IsPrimaryExprContext()
}

type PrimaryExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExprContext() *PrimaryExprContext {
	var p = new(PrimaryExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_primaryExpr
	return p
}

func InitEmptyPrimaryExprContext(p *PrimaryExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_primaryExpr
}

func (*PrimaryExprContext) IsPrimaryExprContext() {}

func NewPrimaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExprContext {
	var p = new(PrimaryExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_primaryExpr

	return p
}

func (s *PrimaryExprContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExprContext) Operand() IOperandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperandContext)
}

func (s *PrimaryExprContext) Conversion() IConversionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConversionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConversionContext)
}

func (s *PrimaryExprContext) MethodExpr() IMethodExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMethodExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMethodExprContext)
}

func (s *PrimaryExprContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ChainParserDOT)
}

func (s *PrimaryExprContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, i)
}

func (s *PrimaryExprContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ChainParserIDENTIFIER)
}

func (s *PrimaryExprContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, i)
}

func (s *PrimaryExprContext) AllIndex() []IIndexContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexContext); ok {
			len++
		}
	}

	tst := make([]IIndexContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexContext); ok {
			tst[i] = t.(IIndexContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryExprContext) Index(i int) IIndexContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexContext)
}

func (s *PrimaryExprContext) AllSlice_() []ISlice_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISlice_Context); ok {
			len++
		}
	}

	tst := make([]ISlice_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISlice_Context); ok {
			tst[i] = t.(ISlice_Context)
			i++
		}
	}

	return tst
}

func (s *PrimaryExprContext) Slice_(i int) ISlice_Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlice_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlice_Context)
}

func (s *PrimaryExprContext) AllTypeAssertion() []ITypeAssertionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeAssertionContext); ok {
			len++
		}
	}

	tst := make([]ITypeAssertionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeAssertionContext); ok {
			tst[i] = t.(ITypeAssertionContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryExprContext) TypeAssertion(i int) ITypeAssertionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAssertionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAssertionContext)
}

func (s *PrimaryExprContext) AllArguments() []IArgumentsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArgumentsContext); ok {
			len++
		}
	}

	tst := make([]IArgumentsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArgumentsContext); ok {
			tst[i] = t.(IArgumentsContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryExprContext) Arguments(i int) IArgumentsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *PrimaryExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterPrimaryExpr(s)
	}
}

func (s *PrimaryExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitPrimaryExpr(s)
	}
}

func (p *ChainParser) PrimaryExpr() (localctx IPrimaryExprContext) {
	localctx = NewPrimaryExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, ChainParserRULE_primaryExpr)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1016)

		if !(p.isOperand()) {
			p.SetError(antlr.NewFailedPredicateException(p, "p.isOperand()", ""))
			goto errorExit
		}
		{
			p.SetState(1017)
			p.Operand()
		}

	case 2:
		p.SetState(1018)

		if !(p.isConversion()) {
			p.SetError(antlr.NewFailedPredicateException(p, "p.isConversion()", ""))
			goto errorExit
		}
		{
			p.SetState(1019)
			p.Conversion()
		}

	case 3:
		p.SetState(1020)

		if !(p.isMethodExpr()) {
			p.SetError(antlr.NewFailedPredicateException(p, "p.isMethodExpr()", ""))
			goto errorExit
		}
		{
			p.SetState(1021)
			p.MethodExpr()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 104, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1030)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1024)
					p.Match(ChainParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1025)
					p.Match(ChainParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				{
					p.SetState(1026)
					p.Index()
				}

			case 3:
				{
					p.SetState(1027)
					p.Slice_()
				}

			case 4:
				{
					p.SetState(1028)
					p.TypeAssertion()
				}

			case 5:
				{
					p.SetState(1029)
					p.Arguments()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1034)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 104, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConversionContext is an interface to support dynamic dispatch.
type IConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() IType_Context
	L_PAREN() antlr.TerminalNode
	Expression() IExpressionContext
	R_PAREN() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsConversionContext differentiates from other interfaces.
	IsConversionContext()
}

type ConversionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionContext() *ConversionContext {
	var p = new(ConversionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_conversion
	return p
}

func InitEmptyConversionContext(p *ConversionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_conversion
}

func (*ConversionContext) IsConversionContext() {}

func NewConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionContext {
	var p = new(ConversionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_conversion

	return p
}

func (s *ConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConversionContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *ConversionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConversionContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *ConversionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, 0)
}

func (s *ConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterConversion(s)
	}
}

func (s *ConversionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitConversion(s)
	}
}

func (p *ChainParser) Conversion() (localctx IConversionContext) {
	localctx = NewConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, ChainParserRULE_conversion)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1035)
		p.Type_()
	}
	{
		p.SetState(1036)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1037)
		p.expression(0)
	}
	p.SetState(1039)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserCOMMA {
		{
			p.SetState(1038)
			p.Match(ChainParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1041)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOperandContext is an interface to support dynamic dispatch.
type IOperandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	OperandName() IOperandNameContext
	TypeArgs() ITypeArgsContext
	L_PAREN() antlr.TerminalNode
	Expression() IExpressionContext
	R_PAREN() antlr.TerminalNode

	// IsOperandContext differentiates from other interfaces.
	IsOperandContext()
}

type OperandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperandContext() *OperandContext {
	var p = new(OperandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_operand
	return p
}

func InitEmptyOperandContext(p *OperandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_operand
}

func (*OperandContext) IsOperandContext() {}

func NewOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperandContext {
	var p = new(OperandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_operand

	return p
}

func (s *OperandContext) GetParser() antlr.Parser { return s.parser }

func (s *OperandContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *OperandContext) OperandName() IOperandNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperandNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperandNameContext)
}

func (s *OperandContext) TypeArgs() ITypeArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgsContext)
}

func (s *OperandContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *OperandContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OperandContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *OperandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterOperand(s)
	}
}

func (s *OperandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitOperand(s)
	}
}

func (p *ChainParser) Operand() (localctx IOperandContext) {
	localctx = NewOperandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, ChainParserRULE_operand)
	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1043)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1044)
			p.OperandName()
		}
		p.SetState(1046)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1045)
				p.TypeArgs()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1048)
			p.Match(ChainParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1049)
			p.expression(0)
		}
		{
			p.SetState(1050)
			p.Match(ChainParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BasicLit() IBasicLitContext
	CompositeLit() ICompositeLitContext
	FunctionLit() IFunctionLitContext

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) BasicLit() IBasicLitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicLitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicLitContext)
}

func (s *LiteralContext) CompositeLit() ICompositeLitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompositeLitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompositeLitContext)
}

func (s *LiteralContext) FunctionLit() IFunctionLitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionLitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionLitContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *ChainParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, ChainParserRULE_literal)
	p.SetState(1057)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserNIL_LIT, ChainParserDECIMAL_LIT, ChainParserBINARY_LIT, ChainParserOCTAL_LIT, ChainParserHEX_LIT, ChainParserFLOAT_LIT, ChainParserIMAGINARY_LIT, ChainParserRUNE_LIT, ChainParserRAW_STRING_LIT, ChainParserINTERPRETED_STRING_LIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1054)
			p.BasicLit()
		}

	case ChainParserMAP, ChainParserSTRUCT, ChainParserIDENTIFIER, ChainParserL_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1055)
			p.CompositeLit()
		}

	case ChainParserFUNC:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1056)
			p.FunctionLit()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBasicLitContext is an interface to support dynamic dispatch.
type IBasicLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NIL_LIT() antlr.TerminalNode
	Integer() IIntegerContext
	String_() IString_Context
	FLOAT_LIT() antlr.TerminalNode

	// IsBasicLitContext differentiates from other interfaces.
	IsBasicLitContext()
}

type BasicLitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicLitContext() *BasicLitContext {
	var p = new(BasicLitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_basicLit
	return p
}

func InitEmptyBasicLitContext(p *BasicLitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_basicLit
}

func (*BasicLitContext) IsBasicLitContext() {}

func NewBasicLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicLitContext {
	var p = new(BasicLitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_basicLit

	return p
}

func (s *BasicLitContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicLitContext) NIL_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserNIL_LIT, 0)
}

func (s *BasicLitContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *BasicLitContext) String_() IString_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *BasicLitContext) FLOAT_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserFLOAT_LIT, 0)
}

func (s *BasicLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterBasicLit(s)
	}
}

func (s *BasicLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitBasicLit(s)
	}
}

func (p *ChainParser) BasicLit() (localctx IBasicLitContext) {
	localctx = NewBasicLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, ChainParserRULE_basicLit)
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ChainParserNIL_LIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1059)
			p.Match(ChainParserNIL_LIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ChainParserDECIMAL_LIT, ChainParserBINARY_LIT, ChainParserOCTAL_LIT, ChainParserHEX_LIT, ChainParserIMAGINARY_LIT, ChainParserRUNE_LIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1060)
			p.Integer()
		}

	case ChainParserRAW_STRING_LIT, ChainParserINTERPRETED_STRING_LIT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1061)
			p.String_()
		}

	case ChainParserFLOAT_LIT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1062)
			p.Match(ChainParserFLOAT_LIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntegerContext is an interface to support dynamic dispatch.
type IIntegerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DECIMAL_LIT() antlr.TerminalNode
	BINARY_LIT() antlr.TerminalNode
	OCTAL_LIT() antlr.TerminalNode
	HEX_LIT() antlr.TerminalNode
	IMAGINARY_LIT() antlr.TerminalNode
	RUNE_LIT() antlr.TerminalNode

	// IsIntegerContext differentiates from other interfaces.
	IsIntegerContext()
}

type IntegerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerContext() *IntegerContext {
	var p = new(IntegerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_integer
	return p
}

func InitEmptyIntegerContext(p *IntegerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_integer
}

func (*IntegerContext) IsIntegerContext() {}

func NewIntegerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerContext {
	var p = new(IntegerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_integer

	return p
}

func (s *IntegerContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerContext) DECIMAL_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserDECIMAL_LIT, 0)
}

func (s *IntegerContext) BINARY_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserBINARY_LIT, 0)
}

func (s *IntegerContext) OCTAL_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserOCTAL_LIT, 0)
}

func (s *IntegerContext) HEX_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserHEX_LIT, 0)
}

func (s *IntegerContext) IMAGINARY_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserIMAGINARY_LIT, 0)
}

func (s *IntegerContext) RUNE_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserRUNE_LIT, 0)
}

func (s *IntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterInteger(s)
	}
}

func (s *IntegerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitInteger(s)
	}
}

func (p *ChainParser) Integer() (localctx IIntegerContext) {
	localctx = NewIntegerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, ChainParserRULE_integer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1065)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&399) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOperandNameContext is an interface to support dynamic dispatch.
type IOperandNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	QualifiedIdent() IQualifiedIdentContext

	// IsOperandNameContext differentiates from other interfaces.
	IsOperandNameContext()
}

type OperandNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperandNameContext() *OperandNameContext {
	var p = new(OperandNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_operandName
	return p
}

func InitEmptyOperandNameContext(p *OperandNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_operandName
}

func (*OperandNameContext) IsOperandNameContext() {}

func NewOperandNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperandNameContext {
	var p = new(OperandNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_operandName

	return p
}

func (s *OperandNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OperandNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *OperandNameContext) QualifiedIdent() IQualifiedIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentContext)
}

func (s *OperandNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperandNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperandNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterOperandName(s)
	}
}

func (s *OperandNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitOperandName(s)
	}
}

func (p *ChainParser) OperandName() (localctx IOperandNameContext) {
	localctx = NewOperandNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, ChainParserRULE_operandName)
	p.SetState(1069)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1067)
			p.Match(ChainParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1068)
			p.QualifiedIdent()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiedIdentContext is an interface to support dynamic dispatch.
type IQualifiedIdentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	DOT() antlr.TerminalNode

	// IsQualifiedIdentContext differentiates from other interfaces.
	IsQualifiedIdentContext()
}

type QualifiedIdentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdentContext() *QualifiedIdentContext {
	var p = new(QualifiedIdentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_qualifiedIdent
	return p
}

func InitEmptyQualifiedIdentContext(p *QualifiedIdentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_qualifiedIdent
}

func (*QualifiedIdentContext) IsQualifiedIdentContext() {}

func NewQualifiedIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdentContext {
	var p = new(QualifiedIdentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_qualifiedIdent

	return p
}

func (s *QualifiedIdentContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdentContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ChainParserIDENTIFIER)
}

func (s *QualifiedIdentContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, i)
}

func (s *QualifiedIdentContext) DOT() antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, 0)
}

func (s *QualifiedIdentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterQualifiedIdent(s)
	}
}

func (s *QualifiedIdentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitQualifiedIdent(s)
	}
}

func (p *ChainParser) QualifiedIdent() (localctx IQualifiedIdentContext) {
	localctx = NewQualifiedIdentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, ChainParserRULE_qualifiedIdent)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1071)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1072)
		p.Match(ChainParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1073)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompositeLitContext is an interface to support dynamic dispatch.
type ICompositeLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LiteralType() ILiteralTypeContext
	LiteralValue() ILiteralValueContext

	// IsCompositeLitContext differentiates from other interfaces.
	IsCompositeLitContext()
}

type CompositeLitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompositeLitContext() *CompositeLitContext {
	var p = new(CompositeLitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_compositeLit
	return p
}

func InitEmptyCompositeLitContext(p *CompositeLitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_compositeLit
}

func (*CompositeLitContext) IsCompositeLitContext() {}

func NewCompositeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompositeLitContext {
	var p = new(CompositeLitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_compositeLit

	return p
}

func (s *CompositeLitContext) GetParser() antlr.Parser { return s.parser }

func (s *CompositeLitContext) LiteralType() ILiteralTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralTypeContext)
}

func (s *CompositeLitContext) LiteralValue() ILiteralValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *CompositeLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompositeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompositeLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterCompositeLit(s)
	}
}

func (s *CompositeLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitCompositeLit(s)
	}
}

func (p *ChainParser) CompositeLit() (localctx ICompositeLitContext) {
	localctx = NewCompositeLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, ChainParserRULE_compositeLit)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1075)
		p.LiteralType()
	}
	{
		p.SetState(1076)
		p.LiteralValue()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralTypeContext is an interface to support dynamic dispatch.
type ILiteralTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StructType() IStructTypeContext
	ArrayType() IArrayTypeContext
	L_BRACKET() antlr.TerminalNode
	ELLIPSIS() antlr.TerminalNode
	R_BRACKET() antlr.TerminalNode
	ElementType() IElementTypeContext
	SliceType() ISliceTypeContext
	MapType() IMapTypeContext
	TypeName() ITypeNameContext
	TypeArgs() ITypeArgsContext

	// IsLiteralTypeContext differentiates from other interfaces.
	IsLiteralTypeContext()
}

type LiteralTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralTypeContext() *LiteralTypeContext {
	var p = new(LiteralTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literalType
	return p
}

func InitEmptyLiteralTypeContext(p *LiteralTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literalType
}

func (*LiteralTypeContext) IsLiteralTypeContext() {}

func NewLiteralTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralTypeContext {
	var p = new(LiteralTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_literalType

	return p
}

func (s *LiteralTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralTypeContext) StructType() IStructTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *LiteralTypeContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *LiteralTypeContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *LiteralTypeContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(ChainParserELLIPSIS, 0)
}

func (s *LiteralTypeContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *LiteralTypeContext) ElementType() IElementTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *LiteralTypeContext) SliceType() ISliceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeContext)
}

func (s *LiteralTypeContext) MapType() IMapTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *LiteralTypeContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *LiteralTypeContext) TypeArgs() ITypeArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgsContext)
}

func (s *LiteralTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterLiteralType(s)
	}
}

func (s *LiteralTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitLiteralType(s)
	}
}

func (p *ChainParser) LiteralType() (localctx ILiteralTypeContext) {
	localctx = NewLiteralTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, ChainParserRULE_literalType)
	var _la int

	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1078)
			p.StructType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1079)
			p.ArrayType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1080)
			p.Match(ChainParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1081)
			p.Match(ChainParserELLIPSIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1082)
			p.Match(ChainParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1083)
			p.ElementType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1084)
			p.SliceType()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1085)
			p.MapType()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1086)
			p.TypeName()
		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserL_BRACKET {
			{
				p.SetState(1087)
				p.TypeArgs()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralValueContext is an interface to support dynamic dispatch.
type ILiteralValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	ElementList() IElementListContext
	COMMA() antlr.TerminalNode

	// IsLiteralValueContext differentiates from other interfaces.
	IsLiteralValueContext()
}

type LiteralValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralValueContext() *LiteralValueContext {
	var p = new(LiteralValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literalValue
	return p
}

func InitEmptyLiteralValueContext(p *LiteralValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_literalValue
}

func (*LiteralValueContext) IsLiteralValueContext() {}

func NewLiteralValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralValueContext {
	var p = new(LiteralValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_literalValue

	return p
}

func (s *LiteralValueContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralValueContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *LiteralValueContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *LiteralValueContext) ElementList() IElementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementListContext)
}

func (s *LiteralValueContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, 0)
}

func (s *LiteralValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterLiteralValue(s)
	}
}

func (s *LiteralValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitLiteralValue(s)
	}
}

func (p *ChainParser) LiteralValue() (localctx ILiteralValueContext) {
	localctx = NewLiteralValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, ChainParserRULE_literalValue)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1092)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1097)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1093)
			p.ElementList()
		}
		p.SetState(1095)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserCOMMA {
			{
				p.SetState(1094)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1099)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementListContext is an interface to support dynamic dispatch.
type IElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllKeyedElement() []IKeyedElementContext
	KeyedElement(i int) IKeyedElementContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsElementListContext differentiates from other interfaces.
	IsElementListContext()
}

type ElementListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementListContext() *ElementListContext {
	var p = new(ElementListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_elementList
	return p
}

func InitEmptyElementListContext(p *ElementListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_elementList
}

func (*ElementListContext) IsElementListContext() {}

func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementListContext {
	var p = new(ElementListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_elementList

	return p
}

func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementListContext) AllKeyedElement() []IKeyedElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyedElementContext); ok {
			len++
		}
	}

	tst := make([]IKeyedElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyedElementContext); ok {
			tst[i] = t.(IKeyedElementContext)
			i++
		}
	}

	return tst
}

func (s *ElementListContext) KeyedElement(i int) IKeyedElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyedElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyedElementContext)
}

func (s *ElementListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *ElementListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *ElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterElementList(s)
	}
}

func (s *ElementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitElementList(s)
	}
}

func (p *ChainParser) ElementList() (localctx IElementListContext) {
	localctx = NewElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, ChainParserRULE_elementList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1101)
		p.KeyedElement()
	}
	p.SetState(1106)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1102)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1103)
				p.KeyedElement()
			}

		}
		p.SetState(1108)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyedElementContext is an interface to support dynamic dispatch.
type IKeyedElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Element() IElementContext
	Key() IKeyContext
	COLON() antlr.TerminalNode

	// IsKeyedElementContext differentiates from other interfaces.
	IsKeyedElementContext()
}

type KeyedElementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedElementContext() *KeyedElementContext {
	var p = new(KeyedElementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_keyedElement
	return p
}

func InitEmptyKeyedElementContext(p *KeyedElementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_keyedElement
}

func (*KeyedElementContext) IsKeyedElementContext() {}

func NewKeyedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedElementContext {
	var p = new(KeyedElementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_keyedElement

	return p
}

func (s *KeyedElementContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedElementContext) Element() IElementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElementContext)
}

func (s *KeyedElementContext) Key() IKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyContext)
}

func (s *KeyedElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, 0)
}

func (s *KeyedElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterKeyedElement(s)
	}
}

func (s *KeyedElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitKeyedElement(s)
	}
}

func (p *ChainParser) KeyedElement() (localctx IKeyedElementContext) {
	localctx = NewKeyedElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, ChainParserRULE_keyedElement)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1112)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1109)
			p.Key()
		}
		{
			p.SetState(1110)
			p.Match(ChainParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1114)
		p.Element()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyContext is an interface to support dynamic dispatch.
type IKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	LiteralValue() ILiteralValueContext

	// IsKeyContext differentiates from other interfaces.
	IsKeyContext()
}

type KeyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyContext() *KeyContext {
	var p = new(KeyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_key
	return p
}

func InitEmptyKeyContext(p *KeyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_key
}

func (*KeyContext) IsKeyContext() {}

func NewKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyContext {
	var p = new(KeyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_key

	return p
}

func (s *KeyContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *KeyContext) LiteralValue() ILiteralValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *KeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterKey(s)
	}
}

func (s *KeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitKey(s)
	}
}

func (p *ChainParser) Key() (localctx IKeyContext) {
	localctx = NewKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, ChainParserRULE_key)
	p.SetState(1118)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1116)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1117)
			p.LiteralValue()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElementContext is an interface to support dynamic dispatch.
type IElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	LiteralValue() ILiteralValueContext

	// IsElementContext differentiates from other interfaces.
	IsElementContext()
}

type ElementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementContext() *ElementContext {
	var p = new(ElementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_element
	return p
}

func InitEmptyElementContext(p *ElementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_element
}

func (*ElementContext) IsElementContext() {}

func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementContext {
	var p = new(ElementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_element

	return p
}

func (s *ElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ElementContext) LiteralValue() ILiteralValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *ElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterElement(s)
	}
}

func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitElement(s)
	}
}

func (p *ChainParser) Element() (localctx IElementContext) {
	localctx = NewElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, ChainParserRULE_element)
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1120)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1121)
			p.LiteralValue()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructTypeContext is an interface to support dynamic dispatch.
type IStructTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT() antlr.TerminalNode
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	AllFieldDecl() []IFieldDeclContext
	FieldDecl(i int) IFieldDeclContext
	AllEos() []IEosContext
	Eos(i int) IEosContext

	// IsStructTypeContext differentiates from other interfaces.
	IsStructTypeContext()
}

type StructTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructTypeContext() *StructTypeContext {
	var p = new(StructTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_structType
	return p
}

func InitEmptyStructTypeContext(p *StructTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_structType
}

func (*StructTypeContext) IsStructTypeContext() {}

func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeContext {
	var p = new(StructTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_structType

	return p
}

func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(ChainParserSTRUCT, 0)
}

func (s *StructTypeContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserL_CURLY, 0)
}

func (s *StructTypeContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ChainParserR_CURLY, 0)
}

func (s *StructTypeContext) AllFieldDecl() []IFieldDeclContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldDeclContext); ok {
			len++
		}
	}

	tst := make([]IFieldDeclContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldDeclContext); ok {
			tst[i] = t.(IFieldDeclContext)
			i++
		}
	}

	return tst
}

func (s *StructTypeContext) FieldDecl(i int) IFieldDeclContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldDeclContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldDeclContext)
}

func (s *StructTypeContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *StructTypeContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterStructType(s)
	}
}

func (s *StructTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitStructType(s)
	}
}

func (p *ChainParser) StructType() (localctx IStructTypeContext) {
	localctx = NewStructTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, ChainParserRULE_structType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1124)
		p.Match(ChainParserSTRUCT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1125)
		p.Match(ChainParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1131)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ChainParserIDENTIFIER || _la == ChainParserSTAR {
		{
			p.SetState(1126)
			p.FieldDecl()
		}
		{
			p.SetState(1127)
			p.Eos()
		}

		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1134)
		p.Match(ChainParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldDeclContext is an interface to support dynamic dispatch.
type IFieldDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag returns the tag rule contexts.
	GetTag() IString_Context

	// SetTag sets the tag rule contexts.
	SetTag(IString_Context)

	// Getter signatures
	IdentifierList() IIdentifierListContext
	Type_() IType_Context
	EmbeddedField() IEmbeddedFieldContext
	String_() IString_Context

	// IsFieldDeclContext differentiates from other interfaces.
	IsFieldDeclContext()
}

type FieldDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	tag    IString_Context
}

func NewEmptyFieldDeclContext() *FieldDeclContext {
	var p = new(FieldDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_fieldDecl
	return p
}

func InitEmptyFieldDeclContext(p *FieldDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_fieldDecl
}

func (*FieldDeclContext) IsFieldDeclContext() {}

func NewFieldDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDeclContext {
	var p = new(FieldDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_fieldDecl

	return p
}

func (s *FieldDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDeclContext) GetTag() IString_Context { return s.tag }

func (s *FieldDeclContext) SetTag(v IString_Context) { s.tag = v }

func (s *FieldDeclContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *FieldDeclContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FieldDeclContext) EmbeddedField() IEmbeddedFieldContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmbeddedFieldContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmbeddedFieldContext)
}

func (s *FieldDeclContext) String_() IString_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_Context)
}

func (s *FieldDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterFieldDecl(s)
	}
}

func (s *FieldDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitFieldDecl(s)
	}
}

func (p *ChainParser) FieldDecl() (localctx IFieldDeclContext) {
	localctx = NewFieldDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, ChainParserRULE_fieldDecl)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1140)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1136)
			p.IdentifierList()
		}
		{
			p.SetState(1137)
			p.Type_()
		}

	case 2:
		{
			p.SetState(1139)
			p.EmbeddedField()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1143)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1142)

			var _x = p.String_()

			localctx.(*FieldDeclContext).tag = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_Context is an interface to support dynamic dispatch.
type IString_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RAW_STRING_LIT() antlr.TerminalNode
	INTERPRETED_STRING_LIT() antlr.TerminalNode

	// IsString_Context differentiates from other interfaces.
	IsString_Context()
}

type String_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_Context() *String_Context {
	var p = new(String_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_string_
	return p
}

func InitEmptyString_Context(p *String_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_string_
}

func (*String_Context) IsString_Context() {}

func NewString_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_Context {
	var p = new(String_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_string_

	return p
}

func (s *String_Context) GetParser() antlr.Parser { return s.parser }

func (s *String_Context) RAW_STRING_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserRAW_STRING_LIT, 0)
}

func (s *String_Context) INTERPRETED_STRING_LIT() antlr.TerminalNode {
	return s.GetToken(ChainParserINTERPRETED_STRING_LIT, 0)
}

func (s *String_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterString_(s)
	}
}

func (s *String_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitString_(s)
	}
}

func (p *ChainParser) String_() (localctx IString_Context) {
	localctx = NewString_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, ChainParserRULE_string_)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1145)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ChainParserRAW_STRING_LIT || _la == ChainParserINTERPRETED_STRING_LIT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEmbeddedFieldContext is an interface to support dynamic dispatch.
type IEmbeddedFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeName() ITypeNameContext
	STAR() antlr.TerminalNode
	TypeArgs() ITypeArgsContext

	// IsEmbeddedFieldContext differentiates from other interfaces.
	IsEmbeddedFieldContext()
}

type EmbeddedFieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmbeddedFieldContext() *EmbeddedFieldContext {
	var p = new(EmbeddedFieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_embeddedField
	return p
}

func InitEmptyEmbeddedFieldContext(p *EmbeddedFieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_embeddedField
}

func (*EmbeddedFieldContext) IsEmbeddedFieldContext() {}

func NewEmbeddedFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmbeddedFieldContext {
	var p = new(EmbeddedFieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_embeddedField

	return p
}

func (s *EmbeddedFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *EmbeddedFieldContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EmbeddedFieldContext) STAR() antlr.TerminalNode {
	return s.GetToken(ChainParserSTAR, 0)
}

func (s *EmbeddedFieldContext) TypeArgs() ITypeArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgsContext)
}

func (s *EmbeddedFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmbeddedFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmbeddedFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterEmbeddedField(s)
	}
}

func (s *EmbeddedFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitEmbeddedField(s)
	}
}

func (p *ChainParser) EmbeddedField() (localctx IEmbeddedFieldContext) {
	localctx = NewEmbeddedFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, ChainParserRULE_embeddedField)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ChainParserSTAR {
		{
			p.SetState(1147)
			p.Match(ChainParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1150)
		p.TypeName()
	}
	p.SetState(1152)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1151)
			p.TypeArgs()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionLitContext is an interface to support dynamic dispatch.
type IFunctionLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNC() antlr.TerminalNode
	Signature() ISignatureContext
	Block() IBlockContext

	// IsFunctionLitContext differentiates from other interfaces.
	IsFunctionLitContext()
}

type FunctionLitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionLitContext() *FunctionLitContext {
	var p = new(FunctionLitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionLit
	return p
}

func InitEmptyFunctionLitContext(p *FunctionLitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_functionLit
}

func (*FunctionLitContext) IsFunctionLitContext() {}

func NewFunctionLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionLitContext {
	var p = new(FunctionLitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_functionLit

	return p
}

func (s *FunctionLitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionLitContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ChainParserFUNC, 0)
}

func (s *FunctionLitContext) Signature() ISignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionLitContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterFunctionLit(s)
	}
}

func (s *FunctionLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitFunctionLit(s)
	}
}

func (p *ChainParser) FunctionLit() (localctx IFunctionLitContext) {
	localctx = NewFunctionLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, ChainParserRULE_functionLit)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1154)
		p.Match(ChainParserFUNC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1155)
		p.Signature()
	}
	{
		p.SetState(1156)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndexContext is an interface to support dynamic dispatch.
type IIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	Expression() IExpressionContext
	R_BRACKET() antlr.TerminalNode

	// IsIndexContext differentiates from other interfaces.
	IsIndexContext()
}

type IndexContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexContext() *IndexContext {
	var p = new(IndexContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_index
	return p
}

func InitEmptyIndexContext(p *IndexContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_index
}

func (*IndexContext) IsIndexContext() {}

func NewIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexContext {
	var p = new(IndexContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_index

	return p
}

func (s *IndexContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *IndexContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitIndex(s)
	}
}

func (p *ChainParser) Index() (localctx IIndexContext) {
	localctx = NewIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, ChainParserRULE_index)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1158)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1159)
		p.expression(0)
	}
	{
		p.SetState(1160)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlice_Context is an interface to support dynamic dispatch.
type ISlice_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_BRACKET() antlr.TerminalNode
	R_BRACKET() antlr.TerminalNode
	AllCOLON() []antlr.TerminalNode
	COLON(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsSlice_Context differentiates from other interfaces.
	IsSlice_Context()
}

type Slice_Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlice_Context() *Slice_Context {
	var p = new(Slice_Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_slice_
	return p
}

func InitEmptySlice_Context(p *Slice_Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_slice_
}

func (*Slice_Context) IsSlice_Context() {}

func NewSlice_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slice_Context {
	var p = new(Slice_Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_slice_

	return p
}

func (s *Slice_Context) GetParser() antlr.Parser { return s.parser }

func (s *Slice_Context) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserL_BRACKET, 0)
}

func (s *Slice_Context) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ChainParserR_BRACKET, 0)
}

func (s *Slice_Context) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOLON)
}

func (s *Slice_Context) COLON(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOLON, i)
}

func (s *Slice_Context) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Slice_Context) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Slice_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slice_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slice_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterSlice_(s)
	}
}

func (s *Slice_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitSlice_(s)
	}
}

func (p *ChainParser) Slice_() (localctx ISlice_Context) {
	localctx = NewSlice_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, ChainParserRULE_slice_)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1162)
		p.Match(ChainParserL_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1164)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1163)
				p.expression(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1166)
			p.Match(ChainParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1167)
				p.expression(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.SetState(1171)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1170)
				p.expression(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1173)
			p.Match(ChainParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1174)
			p.expression(0)
		}
		{
			p.SetState(1175)
			p.Match(ChainParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1176)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1180)
		p.Match(ChainParserR_BRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeAssertionContext is an interface to support dynamic dispatch.
type ITypeAssertionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DOT() antlr.TerminalNode
	L_PAREN() antlr.TerminalNode
	Type_() IType_Context
	R_PAREN() antlr.TerminalNode

	// IsTypeAssertionContext differentiates from other interfaces.
	IsTypeAssertionContext()
}

type TypeAssertionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAssertionContext() *TypeAssertionContext {
	var p = new(TypeAssertionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeAssertion
	return p
}

func InitEmptyTypeAssertionContext(p *TypeAssertionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_typeAssertion
}

func (*TypeAssertionContext) IsTypeAssertionContext() {}

func NewTypeAssertionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAssertionContext {
	var p = new(TypeAssertionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_typeAssertion

	return p
}

func (s *TypeAssertionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAssertionContext) DOT() antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, 0)
}

func (s *TypeAssertionContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *TypeAssertionContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAssertionContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *TypeAssertionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAssertionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAssertionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterTypeAssertion(s)
	}
}

func (s *TypeAssertionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitTypeAssertion(s)
	}
}

func (p *ChainParser) TypeAssertion() (localctx ITypeAssertionContext) {
	localctx = NewTypeAssertionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, ChainParserRULE_typeAssertion)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1182)
		p.Match(ChainParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1183)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1184)
		p.Type_()
	}
	{
		p.SetState(1185)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	Type_() IType_Context
	ELLIPSIS() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arguments
	return p
}

func InitEmptyArgumentsContext(p *ArgumentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_arguments
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserL_PAREN, 0)
}

func (s *ArgumentsContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ChainParserR_PAREN, 0)
}

func (s *ArgumentsContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ArgumentsContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ArgumentsContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(ChainParserELLIPSIS, 0)
}

func (s *ArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ChainParserCOMMA)
}

func (s *ArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ChainParserCOMMA, i)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterArguments(s)
	}
}

func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitArguments(s)
	}
}

func (p *ChainParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, ChainParserRULE_arguments)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1187)
		p.Match(ChainParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1202)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1188)
				p.ExpressionList()
			}

		case 2:
			{
				p.SetState(1189)
				p.Type_()
			}
			p.SetState(1192)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1190)
					p.Match(ChainParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1191)
					p.ExpressionList()
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1197)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserELLIPSIS {
			{
				p.SetState(1196)
				p.Match(ChainParserELLIPSIS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1200)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ChainParserCOMMA {
			{
				p.SetState(1199)
				p.Match(ChainParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1204)
		p.Match(ChainParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMethodExprContext is an interface to support dynamic dispatch.
type IMethodExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() IType_Context
	DOT() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsMethodExprContext differentiates from other interfaces.
	IsMethodExprContext()
}

type MethodExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodExprContext() *MethodExprContext {
	var p = new(MethodExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodExpr
	return p
}

func InitEmptyMethodExprContext(p *MethodExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_methodExpr
}

func (*MethodExprContext) IsMethodExprContext() {}

func NewMethodExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodExprContext {
	var p = new(MethodExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_methodExpr

	return p
}

func (s *MethodExprContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodExprContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *MethodExprContext) DOT() antlr.TerminalNode {
	return s.GetToken(ChainParserDOT, 0)
}

func (s *MethodExprContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ChainParserIDENTIFIER, 0)
}

func (s *MethodExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterMethodExpr(s)
	}
}

func (s *MethodExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitMethodExpr(s)
	}
}

func (p *ChainParser) MethodExpr() (localctx IMethodExprContext) {
	localctx = NewMethodExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, ChainParserRULE_methodExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1206)
		p.Type_()
	}
	{
		p.SetState(1207)
		p.Match(ChainParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1208)
		p.Match(ChainParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEMI() antlr.TerminalNode
	EOS() antlr.TerminalNode

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_eos
	return p
}

func InitEmptyEosContext(p *EosContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ChainParserRULE_eos
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ChainParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ChainParserSEMI, 0)
}

func (s *EosContext) EOS() antlr.TerminalNode {
	return s.GetToken(ChainParserEOS, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.EnterEos(s)
	}
}

func (s *EosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ChainParserListener); ok {
		listenerT.ExitEos(s)
	}
}

func (p *ChainParser) Eos() (localctx IEosContext) {
	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, ChainParserRULE_eos)
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1210)
			p.Match(ChainParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1211)
			p.Match(ChainParserEOS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1212)

		if !(p.closingBracket()) {
			p.SetError(antlr.NewFailedPredicateException(p, "p.closingBracket()", ""))
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ChainParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 91:
		var t *ChannelTypeContext = nil
		if localctx != nil {
			t = localctx.(*ChannelTypeContext)
		}
		return p.ChannelType_Sempred(t, predIndex)

	case 98:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 99:
		var t *PrimaryExprContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryExprContext)
		}
		return p.PrimaryExpr_Sempred(t, predIndex)

	case 124:
		var t *EosContext = nil
		if localctx != nil {
			t = localctx.(*EosContext)
		}
		return p.Eos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ChainParser) ChannelType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.isNotReceive()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ChainParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ChainParser) PrimaryExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.isOperand()

	case 7:
		return p.isConversion()

	case 8:
		return p.isMethodExpr()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ChainParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.closingBracket()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
